// Code generated by MockGen. DO NOT EDIT.
// Source: command.go

// Package cmd is a generated GoMock package.
package cmd

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExecSession is a mock of ExecSession interface.
type MockExecSession struct {
	ctrl     *gomock.Controller
	recorder *MockExecSessionMockRecorder
}

// MockExecSessionMockRecorder is the mock recorder for MockExecSession.
type MockExecSessionMockRecorder struct {
	mock *MockExecSession
}

// NewMockExecSession creates a new mock instance.
func NewMockExecSession(ctrl *gomock.Controller) *MockExecSession {
	mock := &MockExecSession{ctrl: ctrl}
	mock.recorder = &MockExecSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecSession) EXPECT() *MockExecSessionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockExecSession) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockExecSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockExecSession)(nil).Close))
}

// ErrMsg mocks base method.
func (m *MockExecSession) ErrMsg() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrMsg")
	ret0, _ := ret[0].(string)
	return ret0
}

// ErrMsg indicates an expected call of ErrMsg.
func (mr *MockExecSessionMockRecorder) ErrMsg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrMsg", reflect.TypeOf((*MockExecSession)(nil).ErrMsg))
}

// Exec mocks base method.
func (m *MockExecSession) Exec(cmd string, runType uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", cmd, runType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockExecSessionMockRecorder) Exec(cmd, runType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockExecSession)(nil).Exec), cmd, runType)
}

// Output mocks base method.
func (m *MockExecSession) Output() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output")
	ret0, _ := ret[0].(string)
	return ret0
}

// Output indicates an expected call of Output.
func (mr *MockExecSessionMockRecorder) Output() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockExecSession)(nil).Output))
}
