basePath: /api/v1/
definitions:
  cluster.BackupClusterDataReq:
    properties:
      backupMode:
        description: auto,manual
        type: string
      backupType:
        description: full,incr
        type: string
      clusterId:
        type: string
    type: object
  cluster.BackupClusterDataResp:
    properties:
      backupId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.CloneClusterReq:
    properties:
      cloneStrategy:
        description: specify clone strategy, include empty, snapshot and sync, default
          empty(option)
        type: string
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      copies:
        description: The number of copies of the newly created cluster data, consistent
          with the number of copies set in PD
        type: integer
      cpuArchitecture:
        description: X86/X86_64/ARM
        type: string
      dbPassword:
        type: string
      dbUser:
        description: The username and password for the newly created database cluster,
          default is the root user, which is not valid for Data Migration clusters
        type: string
      exclusive:
        description: Whether the newly created cluster is exclusive to physical resources,
          when exclusive, a host will only deploy instances of the same cluster, which
          may result in poor resource utilization
        type: boolean
      parameterGroupID:
        type: string
      region:
        description: The Region where the cluster is located
        type: string
      sourceClusterId:
        description: specify source cluster id(require)
        type: string
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
      vendorId:
        type: string
    type: object
  cluster.CloneClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.CreateChangeFeedTaskReq:
    properties:
      clusterId:
        example: CLUSTER_ID_IN_TIEM__22
        type: string
      downstream:
        type: object
      downstreamType:
        enum:
        - tidb
        - kafka
        - mysql
        example: tidb
        type: string
      name:
        example: my_sync_name
        type: string
      rules:
        example:
        - '*.*'
        items:
          type: string
        type: array
      startTS:
        example: "415241823337054209"
        type: string
    type: object
  cluster.CreateChangeFeedTaskResp:
    properties:
      id:
        example: TASK_ID_IN_TIEM____22
        type: string
    type: object
  cluster.CreateClusterReq:
    properties:
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      copies:
        description: The number of copies of the newly created cluster data, consistent
          with the number of copies set in PD
        type: integer
      cpuArchitecture:
        description: X86/X86_64/ARM
        type: string
      dbPassword:
        type: string
      dbUser:
        description: The username and password for the newly created database cluster,
          default is the root user, which is not valid for Data Migration clusters
        type: string
      exclusive:
        description: Whether the newly created cluster is exclusive to physical resources,
          when exclusive, a host will only deploy instances of the same cluster, which
          may result in poor resource utilization
        type: boolean
      parameterGroupID:
        type: string
      region:
        description: The Region where the cluster is located
        type: string
      resourceParameters:
        $ref: '#/definitions/structs.ClusterResourceInfo'
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
      vendorId:
        type: string
    type: object
  cluster.CreateClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.DeleteBackupDataReq:
    properties:
      backupMode:
        type: string
      clusterId:
        type: string
    type: object
  cluster.DeleteBackupDataResp:
    type: object
  cluster.DeleteChangeFeedTaskResp:
    properties:
      id:
        example: TASK_ID_IN_TIEM____22
        type: string
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: Normal
        type: string
    type: object
  cluster.DeleteClusterReq:
    properties:
      autoBackup:
        type: boolean
      force:
        type: boolean
      keepHistoryBackupRecords:
        type: boolean
    type: object
  cluster.DeleteClusterResp:
    properties:
      clusterID:
        type: string
      maintenanceStatus:
        type: string
      needConfirmation:
        type: boolean
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.DetailChangeFeedTaskResp:
    properties:
      clusterId:
        example: CLUSTER_ID_IN_TIEM__22
        type: string
      createTime:
        type: string
      downstream:
        type: object
      downstreamFetchTs:
        example: "415241823337054209"
        type: string
      downstreamSyncTs:
        example: "415241823337054209"
        type: string
      downstreamType:
        enum:
        - tidb
        - kafka
        - mysql
        example: tidb
        type: string
      id:
        example: CLUSTER_ID_IN_TIEM__22
        type: string
      name:
        example: my_sync_name
        type: string
      rules:
        example:
        - '*.*'
        items:
          type: string
        type: array
      startTS:
        example: "415241823337054209"
        type: string
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: Normal
        type: string
      unsteady:
        example: false
        type: boolean
      updateTime:
        type: string
      upstreamUpdateTs:
        example: "415241823337054209"
        type: string
    type: object
  cluster.Dispatcher:
    properties:
      dispatcher:
        example: ts
        type: string
      matcher:
        example: test1.*
        type: string
    type: object
  cluster.GetBackupStrategyResp:
    properties:
      strategy:
        $ref: '#/definitions/structs.BackupStrategy'
    type: object
  cluster.GetDashboardInfoResp:
    properties:
      clusterId:
        example: abc
        type: string
      token:
        type: string
      url:
        example: http://127.0.0.1:9093
        type: string
    type: object
  cluster.InspectClusterParametersResp:
    properties:
      inspectValue:
        example: "1"
        type: string
      instance:
        example: 172.16.5.23
        type: string
      instanceType:
        example: tidb
        type: string
      name:
        example: binlog_cache
        type: string
      paramId:
        example: 1
        type: integer
      realValue:
        $ref: '#/definitions/structs.ParameterRealValue'
    type: object
  cluster.KafkaDownstream:
    properties:
      clientId:
        example: "213"
        type: string
      dispatchers:
        items:
          $ref: '#/definitions/cluster.Dispatcher'
        type: array
      ip:
        example: 127.0.0.1
        type: string
      maxBatchSize:
        example: 5
        type: integer
      maxMessageBytes:
        example: 16
        type: integer
      partitions:
        example: 1
        type: integer
      port:
        example: 9001
        type: integer
      protocol:
        enum:
        - default
        - canal
        - avro
        - maxwell
        example: default
        type: string
      replicationFactor:
        example: 1
        type: integer
      tls:
        example: false
        type: boolean
      topicName:
        example: my_topic
        type: string
      version:
        example: 2.4.0
        type: string
    type: object
  cluster.MysqlDownstream:
    properties:
      concurrentThreads:
        example: 7
        type: integer
      ip:
        example: 127.0.0.1
        type: string
      maxTxnRow:
        example: 5
        type: integer
      password:
        example: my_password
        type: string
      port:
        example: 8001
        type: integer
      tls:
        example: false
        type: boolean
      username:
        example: root
        type: string
      workerCount:
        example: 2
        type: integer
    type: object
  cluster.PauseChangeFeedTaskResp:
    properties:
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: Normal
        type: string
    type: object
  cluster.PreviewClusterResp:
    properties:
      capabilityIndexes:
        items:
          $ref: '#/definitions/structs.Index'
        type: array
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      cpuArchitecture:
        type: string
      region:
        type: string
      stockCheckResult:
        items:
          $ref: '#/definitions/structs.ResourceStockCheckResult'
        type: array
    type: object
  cluster.QueryBackupRecordsResp:
    properties:
      backupRecords:
        items:
          $ref: '#/definitions/structs.BackupRecord'
        type: array
    type: object
  cluster.QueryChangeFeedTaskResp:
    properties:
      clusterId:
        example: CLUSTER_ID_IN_TIEM__22
        type: string
      createTime:
        type: string
      downstream:
        type: object
      downstreamFetchTs:
        example: "415241823337054209"
        type: string
      downstreamSyncTs:
        example: "415241823337054209"
        type: string
      downstreamType:
        enum:
        - tidb
        - kafka
        - mysql
        example: tidb
        type: string
      id:
        example: CLUSTER_ID_IN_TIEM__22
        type: string
      name:
        example: my_sync_name
        type: string
      rules:
        example:
        - '*.*'
        items:
          type: string
        type: array
      startTS:
        example: "415241823337054209"
        type: string
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: Normal
        type: string
      unsteady:
        example: false
        type: boolean
      updateTime:
        type: string
      upstreamUpdateTs:
        example: "415241823337054209"
        type: string
    type: object
  cluster.QueryClusterDetailResp:
    properties:
      info:
        $ref: '#/definitions/structs.ClusterInfo'
      instanceResource:
        items:
          $ref: '#/definitions/structs.ClusterResourceParameterCompute'
        type: array
      topology:
        items:
          $ref: '#/definitions/structs.ClusterInstanceInfo'
        type: array
    type: object
  cluster.QueryClusterLogResp:
    properties:
      results:
        items:
          $ref: '#/definitions/structs.ClusterLogItem'
        type: array
      took:
        example: 10
        type: integer
    type: object
  cluster.QueryClusterParametersResp:
    properties:
      paramGroupId:
        type: string
      params:
        items:
          $ref: '#/definitions/structs.ClusterParameterInfo'
        type: array
    type: object
  cluster.QueryClusterResp:
    properties:
      clusters:
        items:
          $ref: '#/definitions/structs.ClusterInfo'
        type: array
    type: object
  cluster.QueryMonitorInfoResp:
    properties:
      alertUrl:
        example: http://127.0.0.1:9093
        type: string
      clusterId:
        example: abc
        type: string
      grafanaUrl:
        example: http://127.0.0.1:3000
        type: string
    type: object
  cluster.RestartClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.RestoreNewClusterReq:
    properties:
      backupId:
        type: string
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      copies:
        description: The number of copies of the newly created cluster data, consistent
          with the number of copies set in PD
        type: integer
      cpuArchitecture:
        description: X86/X86_64/ARM
        type: string
      dbPassword:
        type: string
      dbUser:
        description: The username and password for the newly created database cluster,
          default is the root user, which is not valid for Data Migration clusters
        type: string
      exclusive:
        description: Whether the newly created cluster is exclusive to physical resources,
          when exclusive, a host will only deploy instances of the same cluster, which
          may result in poor resource utilization
        type: boolean
      parameterGroupID:
        type: string
      region:
        description: The Region where the cluster is located
        type: string
      resourceParameters:
        $ref: '#/definitions/structs.ClusterResourceInfo'
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
      vendorId:
        type: string
    type: object
  cluster.RestoreNewClusterResp:
    properties:
      clusterID:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.ResumeChangeFeedTaskResp:
    properties:
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: Normal
        type: string
    type: object
  cluster.SaveBackupStrategyReq:
    properties:
      strategy:
        $ref: '#/definitions/structs.BackupStrategy'
    type: object
  cluster.SaveBackupStrategyResp:
    type: object
  cluster.ScaleInClusterReq:
    properties:
      instanceId:
        type: string
    type: object
  cluster.ScaleInClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.ScaleOutClusterReq:
    properties:
      instanceResource:
        items:
          $ref: '#/definitions/structs.ClusterResourceParameterCompute'
        type: array
    type: object
  cluster.ScaleOutClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.StopClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.TakeoverClusterReq:
    properties:
      TiUPIp:
        example: 172.16.4.147
        type: string
      TiUPPath:
        example: .tiup/
        type: string
      TiUPPort:
        example: 22
        type: integer
      TiUPUserName:
        example: root
        type: string
      TiUPUserPassword:
        example: password
        type: string
      clusterName:
        example: myClusterName
        type: string
      dbPassword:
        example: myPassword
        type: string
      dbUser:
        example: root
        type: string
    type: object
  cluster.TakeoverClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.TiDBDownstream:
    properties:
      concurrentThreads:
        example: 5
        type: integer
      ip:
        example: 127.0.0.1
        type: string
      maxTxnRow:
        example: 4
        type: integer
      password:
        example: my_password
        type: string
      port:
        example: 4534
        type: integer
      targetClusterId:
        example: CLUSTER_ID_IN_TIEM__22
        type: string
      tls:
        example: false
        type: boolean
      username:
        example: tidb
        type: string
      workerCount:
        example: 2
        type: integer
    type: object
  cluster.UpdateChangeFeedTaskReq:
    properties:
      downstream:
        type: object
      downstreamType:
        enum:
        - tidb
        - kafka
        - mysql
        example: tidb
        type: string
      name:
        example: my_sync_name
        type: string
      rules:
        example:
        - '*.*'
        items:
          type: string
        type: array
    type: object
  cluster.UpdateChangeFeedTaskResp:
    properties:
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: Normal
        type: string
    type: object
  cluster.UpdateClusterParametersReq:
    properties:
      params:
        items:
          $ref: '#/definitions/structs.ClusterParameterSampleInfo'
        type: array
      reboot:
        type: boolean
    type: object
  cluster.UpdateClusterParametersResp:
    properties:
      clusterId:
        example: "1"
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  controller.CommonResult:
    properties:
      code:
        type: integer
      data:
        type: object
      message:
        type: string
    type: object
  controller.Page:
    properties:
      page:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
    type: object
  controller.ResultWithPage:
    properties:
      code:
        type: integer
      data:
        type: object
      message:
        type: string
      page:
        $ref: '#/definitions/controller.Page'
    type: object
  knowledge.ClusterComponent:
    properties:
      componentName:
        type: string
      componentPurpose:
        type: string
      componentType:
        type: string
    type: object
  knowledge.ClusterComponentSpec:
    properties:
      clusterComponent:
        $ref: '#/definitions/knowledge.ClusterComponent'
      componentConstraint:
        $ref: '#/definitions/knowledge.ComponentConstraint'
      componentPortConstraint:
        $ref: '#/definitions/knowledge.ComponentPortConstraint'
    type: object
  knowledge.ClusterType:
    properties:
      code:
        type: string
      name:
        type: string
    type: object
  knowledge.ClusterTypeSpec:
    properties:
      clusterType:
        $ref: '#/definitions/knowledge.ClusterType'
      versionSpecs:
        items:
          $ref: '#/definitions/knowledge.ClusterVersionSpec'
        type: array
    type: object
  knowledge.ClusterVersion:
    properties:
      code:
        type: string
      name:
        type: string
    type: object
  knowledge.ClusterVersionSpec:
    properties:
      archTypes:
        items:
          type: string
        type: array
      clusterPortConstraint:
        $ref: '#/definitions/knowledge.ComponentPortConstraint'
      clusterVersion:
        $ref: '#/definitions/knowledge.ClusterVersion'
      componentSpecs:
        items:
          $ref: '#/definitions/knowledge.ClusterComponentSpec'
        type: array
    type: object
  knowledge.ComponentConstraint:
    properties:
      availableSpecCodes:
        items:
          type: string
        type: array
      componentRequired:
        type: boolean
      minZoneQuantity:
        type: integer
      parasite:
        type: boolean
      suggestedNodeQuantities:
        items:
          type: integer
        type: array
    type: object
  knowledge.ComponentPortConstraint:
    properties:
      portCount:
        type: integer
      portRangeEnd:
        type: integer
      portRangeStart:
        type: integer
    type: object
  message.ApplyParameterGroupReq:
    properties:
      clusterId:
        example: "123"
        type: string
      reboot:
        type: boolean
    type: object
  message.ApplyParameterGroupResp:
    properties:
      clusterId:
        example: "123"
        type: string
      paramGroupId:
        example: "123"
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  message.CopyParameterGroupReq:
    properties:
      name:
        example: 8C16GV4_copy
        type: string
      note:
        example: copy param group
        type: string
    type: object
  message.CopyParameterGroupResp:
    properties:
      paramGroupId:
        example: "1"
        type: string
    type: object
  message.CreateParameterGroupReq:
    properties:
      clusterSpec:
        example: 8C16G
        type: string
      clusterVersion:
        example: v5.0
        type: string
      dbType:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      groupType:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      hasDefault:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      name:
        example: 8C16GV4_default
        type: string
      note:
        example: default param group
        type: string
      params:
        items:
          $ref: '#/definitions/structs.ParameterGroupParameterSampleInfo'
        type: array
    type: object
  message.CreateParameterGroupResp:
    properties:
      paramGroupId:
        example: "1"
        type: string
    type: object
  message.CreateProductReq:
    properties:
      components:
        items:
          $ref: '#/definitions/structs.ProductComponentProperty'
        type: array
      productInfo:
        $ref: '#/definitions/structs.Product'
    type: object
  message.CreateProductResp:
    type: object
  message.CreateSpecsReq:
    properties:
      specs:
        items:
          $ref: '#/definitions/structs.SpecInfo'
        type: array
    type: object
  message.CreateSpecsResp:
    type: object
  message.CreateZonesReq:
    properties:
      zones:
        items:
          $ref: '#/definitions/structs.ZoneInfo'
        type: array
    type: object
  message.CreateZonesResp:
    type: object
  message.DataExportReq:
    properties:
      accessKey:
        type: string
      bucketUrl:
        type: string
      clusterId:
        type: string
      comment:
        type: string
      endpointUrl:
        type: string
      fileType:
        type: string
      filter:
        type: string
      password:
        type: string
      secretAccessKey:
        type: string
      sql:
        type: string
      storageType:
        type: string
      userName:
        type: string
      zipName:
        type: string
    type: object
  message.DataExportResp:
    properties:
      recordId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  message.DataImportReq:
    properties:
      accessKey:
        type: string
      bucketUrl:
        type: string
      clusterId:
        type: string
      comment:
        type: string
      endpointUrl:
        type: string
      password:
        type: string
      recordId:
        type: string
      secretAccessKey:
        type: string
      storageType:
        type: string
      userName:
        type: string
    type: object
  message.DataImportResp:
    properties:
      recordId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  message.DeleteHostsReq:
    properties:
      hostIds:
        items:
          type: string
        type: array
    type: object
  message.DeleteHostsResp:
    properties:
      flowInfo:
        items:
          $ref: '#/definitions/structs.AsyncTaskWorkFlowInfo'
        type: array
    type: object
  message.DeleteImportExportRecordReq:
    type: object
  message.DeleteImportExportRecordResp:
    properties:
      recordId:
        type: string
    type: object
  message.DeleteParameterGroupResp:
    properties:
      paramGroupId:
        example: "1"
        type: string
    type: object
  message.DeleteProductReq:
    properties:
      productInfo:
        $ref: '#/definitions/structs.Product'
    type: object
  message.DeleteProductResp:
    type: object
  message.DeleteSpecsReq:
    properties:
      specIds:
        items:
          type: string
        type: array
    type: object
  message.DeleteSpecsResp:
    type: object
  message.DeleteZoneReq:
    properties:
      zone:
        items:
          $ref: '#/definitions/structs.ZoneInfo'
        type: array
    type: object
  message.DeleteZoneResp:
    type: object
  message.DetailParameterGroupResp:
    properties:
      clusterSpec:
        example: 8C16G
        type: string
      clusterVersion:
        example: v5.0
        type: string
      createTime:
        example: 1636698675
        type: integer
      dbType:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      groupType:
        enum:
        - 1
        - 2
        example: 0
        type: integer
      hasDefault:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      name:
        example: default
        type: string
      note:
        example: default param group
        type: string
      paramGroupId:
        example: "1"
        type: string
      params:
        items:
          $ref: '#/definitions/structs.ParameterGroupParameterInfo'
        type: array
      updateTime:
        example: 1636698675
        type: integer
    type: object
  message.GetHierarchyResp:
    properties:
      root:
        $ref: '#/definitions/structs.HierarchyTreeNode'
    type: object
  message.GetStocksResp:
    properties:
      stocks:
        $ref: '#/definitions/structs.Stocks'
    type: object
  message.ImportHostsResp:
    properties:
      flowInfo:
        items:
          $ref: '#/definitions/structs.AsyncTaskWorkFlowInfo'
        type: array
      hostIds:
        items:
          type: string
        type: array
    type: object
  message.LoginReq:
    properties:
      userName:
        type: string
      userPassword:
        type: string
    type: object
  message.LoginResp:
    properties:
      tenantId:
        type: string
      token:
        type: string
      userName:
        type: string
    type: object
  message.LogoutResp:
    properties:
      accountName:
        type: string
    type: object
  message.QueryDataImportExportRecordsResp:
    properties:
      transportRecords:
        items:
          $ref: '#/definitions/structs.DataImportExportRecordInfo'
        type: array
    type: object
  message.QueryHostsResp:
    properties:
      hosts:
        items:
          $ref: '#/definitions/structs.HostInfo'
        type: array
    type: object
  message.QueryParameterGroupResp:
    properties:
      clusterSpec:
        example: 8C16G
        type: string
      clusterVersion:
        example: v5.0
        type: string
      createTime:
        example: 1636698675
        type: integer
      dbType:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      groupType:
        enum:
        - 1
        - 2
        example: 0
        type: integer
      hasDefault:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      name:
        example: default
        type: string
      note:
        example: default param group
        type: string
      paramGroupId:
        example: "1"
        type: string
      params:
        items:
          $ref: '#/definitions/structs.ParameterGroupParameterInfo'
        type: array
      updateTime:
        example: 1636698675
        type: integer
    type: object
  message.QueryProductDetailResp:
    properties:
      products:
        additionalProperties:
          $ref: '#/definitions/structs.ProductDetail'
        type: object
    type: object
  message.QueryProductsResp:
    properties:
      products:
        additionalProperties:
          additionalProperties:
            additionalProperties:
              additionalProperties:
                $ref: '#/definitions/structs.Product'
              type: object
            type: object
          type: object
        description: arch version
        type: object
    type: object
  message.QuerySpecsResp:
    properties:
      specs:
        items:
          $ref: '#/definitions/structs.SpecInfo'
        type: array
    type: object
  message.QueryWorkFlowDetailResp:
    properties:
      info:
        $ref: '#/definitions/structs.WorkFlowInfo'
      nodeNames:
        items:
          type: string
        type: array
      nodes:
        items:
          $ref: '#/definitions/structs.WorkFlowNodeInfo'
        type: array
    type: object
  message.QueryWorkFlowsResp:
    properties:
      workFlows:
        items:
          $ref: '#/definitions/structs.WorkFlowInfo'
        type: array
    type: object
  message.QueryZonesResp:
    properties:
      zones:
        items:
          $ref: '#/definitions/structs.ZoneInfo'
        type: array
    type: object
  message.UpdateHostReservedReq:
    properties:
      hostIds:
        items:
          type: string
        type: array
      reserved:
        type: boolean
    type: object
  message.UpdateHostReservedResp:
    type: object
  message.UpdateHostStatusReq:
    properties:
      hostIds:
        items:
          type: string
        type: array
      status:
        type: string
    type: object
  message.UpdateHostStatusResp:
    type: object
  message.UpdateParameterGroupReq:
    properties:
      clusterSpec:
        example: 8C16G
        type: string
      clusterVersion:
        example: v5.0
        type: string
      name:
        example: 8C16GV4_default
        type: string
      note:
        example: default param group
        type: string
      params:
        items:
          $ref: '#/definitions/structs.ParameterGroupParameterSampleInfo'
        type: array
    type: object
  message.UpdateParameterGroupResp:
    properties:
      paramGroupId:
        example: "1"
        type: string
    type: object
  message.UserProfile:
    properties:
      tenantId:
        type: string
      userName:
        type: string
    type: object
  structs.AsyncTaskWorkFlowInfo:
    properties:
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  structs.BackupRecord:
    properties:
      backupMethod:
        type: string
      backupMode:
        type: string
      backupTso:
        type: string
      backupType:
        type: string
      clusterId:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      endTime:
        type: string
      filePath:
        type: string
      id:
        type: string
      size:
        type: number
      startTime:
        type: string
      status:
        type: string
      updateTime:
        type: string
    type: object
  structs.BackupStrategy:
    properties:
      backupDate:
        type: string
      clusterId:
        type: string
      period:
        type: string
    type: object
  structs.ClusterInfo:
    properties:
      alertUrl:
        example: http://127.0.0.1:9093
        type: string
      backupFileUsage:
        $ref: '#/definitions/structs.Usage'
      clusterId:
        type: string
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      copies:
        description: The number of copies of the newly created cluster data, consistent
          with the number of copies set in PD
        type: integer
      cpuArchitecture:
        description: X86/X86_64/ARM
        type: string
      cpuUsage:
        $ref: '#/definitions/structs.Usage'
      createTime:
        type: string
      dbUser:
        description: The username and password for the newly created database cluster,
          default is the root user, which is not valid for Data Migration clusters
        type: string
      deleteTime:
        type: string
      exclusive:
        description: Whether the newly created cluster is exclusive to physical resources,
          when exclusive, a host will only deploy instances of the same cluster, which
          may result in poor resource utilization
        type: boolean
      extranetConnectAddresses:
        items:
          type: string
        type: array
      grafanaUrl:
        example: http://127.0.0.1:3000
        type: string
      intranetConnectAddresses:
        items:
          type: string
        type: array
      maintainStatus:
        type: string
      maintainWindow:
        type: string
      memoryUsage:
        $ref: '#/definitions/structs.Usage'
      region:
        type: string
      role:
        type: string
      status:
        type: string
      storageUsage:
        $ref: '#/definitions/structs.Usage'
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
      updateTime:
        type: string
      userId:
        type: string
      vendor:
        type: string
      whitelist:
        items:
          type: string
        type: array
    type: object
  structs.ClusterInstanceInfo:
    properties:
      addresses:
        items:
          type: string
        type: array
      cpuUsage:
        $ref: '#/definitions/structs.Usage'
      hostID:
        type: string
      id:
        type: string
      ioUtil:
        type: number
      iops:
        items:
          type: number
        type: array
      memoryUsage:
        $ref: '#/definitions/structs.Usage'
      ports:
        items:
          type: integer
        type: array
      role:
        type: string
      spec:
        $ref: '#/definitions/structs.ProductSpecInfo'
        description: ??
      status:
        type: string
      storageUsage:
        $ref: '#/definitions/structs.Usage'
      type:
        type: string
      version:
        type: string
      zone:
        $ref: '#/definitions/structs.ZoneInfo'
        description: ??
    type: object
  structs.ClusterInstanceParameterValue:
    properties:
      instanceId:
        type: string
      value:
        type: string
    type: object
  structs.ClusterLogItem:
    properties:
      clusterId:
        example: abc
        type: string
      ext:
        additionalProperties: true
        type: object
      id:
        example: zvadfwf
        type: string
      index:
        example: tiem-tidb-cluster-2021.09.23
        type: string
      ip:
        example: 127.0.0.1
        type: string
      level:
        example: warn
        type: string
      message:
        example: tidb log
        type: string
      module:
        example: tidb
        type: string
      sourceLine:
        example: main.go:210
        type: string
      timestamp:
        example: "2021-09-23 14:23:10"
        type: string
    type: object
  structs.ClusterParameterInfo:
    properties:
      category:
        example: basic
        type: string
      createTime:
        example: 1636698675
        type: integer
      defaultValue:
        example: "1"
        type: string
      description:
        example: binlog cache size
        type: string
      hasApply:
        enum:
        - 0
        - 1
        example: 1
        type: integer
      hasReboot:
        enum:
        - 0
        - 1
        example: 0
        type: integer
      instanceType:
        example: tidb
        type: string
      name:
        example: binlog_size
        type: string
      note:
        example: binlog cache size
        type: string
      paramId:
        example: "1"
        type: string
      range:
        example:
        - "1"
        - ' 1000'
        items:
          type: string
        type: array
      realValue:
        $ref: '#/definitions/structs.ParameterRealValue'
      systemVariable:
        example: log.log_level
        type: string
      type:
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        example: 0
        type: integer
      unit:
        example: mb
        type: string
      updateSource:
        enum:
        - 0
        - 1
        - 2
        - 3
        example: 0
        type: integer
      updateTime:
        example: 1636698675
        type: integer
    type: object
  structs.ClusterParameterSampleInfo:
    properties:
      paramId:
        example: "1"
        type: string
      realValue:
        $ref: '#/definitions/structs.ParameterRealValue'
    type: object
  structs.ClusterResourceInfo:
    properties:
      instanceResource:
        items:
          $ref: '#/definitions/structs.ClusterResourceParameterCompute'
        type: array
    type: object
  structs.ClusterResourceParameterCompute:
    properties:
      componentType:
        description: TiDB/TiKV/PD/TiFlash/CDC/DM-Master/DM-Worker
        type: string
      resource:
        items:
          $ref: '#/definitions/structs.ClusterResourceParameterComputeResource'
        type: array
      totalNodeCount:
        type: integer
    type: object
  structs.ClusterResourceParameterComputeResource:
    properties:
      count:
        type: integer
      diskCapacity:
        type: integer
      diskType:
        description: NVMeSSD/SSD/SATA
        type: string
      specCode:
        description: 4C8G/8C16G ?
        type: string
      zoneCode:
        type: string
    type: object
  structs.ComponentInstanceResourceSpec:
    properties:
      cpu:
        type: integer
      diskType:
        description: 'eg: NVMeSSD/SSD/SATA'
        type: string
      id:
        description: ID of the instance resource specification
        type: string
      memory:
        description: The amount of memory occupied by the instance, in GiB
        type: integer
      name:
        description: 'Name of the instance resource specification,eg: TiDB.c1.large'
        type: string
      zoneId:
        type: string
      zoneName:
        type: string
    type: object
  structs.DataImportExportRecordInfo:
    properties:
      clusterId:
        type: string
      comment:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      endTime:
        type: string
      filePath:
        type: string
      recordId:
        type: string
      startTime:
        type: string
      status:
        type: string
      storageType:
        type: string
      transportType:
        type: string
      updateTime:
        type: string
      zipName:
        type: string
    type: object
  structs.DiskInfo:
    properties:
      capacity:
        description: 'Disk size, Unit: GB'
        type: integer
      diskId:
        type: string
      hostId:
        type: string
      name:
        description: '[sda/sdb/nvmep0...]'
        type: string
      path:
        description: 'Disk mount path: [/data1]'
        type: string
      status:
        description: Disk Status, 0 for available, 1 for inused
        type: string
      type:
        description: 'Disk type: [nvme-ssd/ssd/sata]'
        type: string
    type: object
  structs.HierarchyTreeNode:
    properties:
      Code:
        type: string
      Name:
        type: string
      Prefix:
        type: string
      SubNodes:
        items:
          $ref: '#/definitions/structs.HierarchyTreeNode'
        type: array
    type: object
  structs.HostInfo:
    properties:
      arch:
        description: x86 or arm64
        type: string
      az:
        type: string
      clusterType:
        description: What cluster is the host used for? [database/data migration]
        type: string
      cpuCores:
        description: Host cpu cores spec, init while importing
        type: integer
      createTime:
        type: integer
      diskType:
        description: Disk type of this host [sata/ssd/nvme_ssd]
        type: string
      disks:
        items:
          $ref: '#/definitions/structs.DiskInfo'
        type: array
      freeCpuCores:
        description: Unused CpuCore, used for allocation
        type: integer
      freeMemory:
        description: Unused memory size, Unit:GB, used for allocation
        type: integer
      hostId:
        type: string
      hostName:
        type: string
      ip:
        type: string
      kernel:
        type: string
      loadStat:
        description: Host Resource Stat, 0 for loadless, 1 for inused, 2 for exhaust
        type: string
      memory:
        description: Host memory, init while importing
        type: integer
      nic:
        description: 'Host network type: 1GE or 10GE'
        type: string
      os:
        type: string
      passwd:
        type: string
      purpose:
        description: What Purpose is the host used for? [compute/storage/general]
        type: string
      rack:
        type: string
      region:
        type: string
      reserved:
        description: Whether this host is reserved - will not be allocated
        type: boolean
      spec:
        description: Host Spec, init while importing
        type: string
      status:
        description: Host Status, 0 for Online, 1 for offline
        type: string
      sysLabels:
        items:
          type: string
        type: array
      traits:
        description: Traits of labels
        type: integer
      updateTime:
        type: integer
      userName:
        type: string
    type: object
  structs.Index:
    properties:
      description:
        type: string
      name:
        type: string
      unit:
        type: string
      value:
        type: object
    type: object
  structs.ParameterGroupParameterInfo:
    properties:
      category:
        example: basic
        type: string
      createTime:
        example: 1636698675
        type: integer
      defaultValue:
        example: "1"
        type: string
      description:
        example: binlog cache size
        type: string
      hasApply:
        enum:
        - 0
        - 1
        example: 1
        type: integer
      hasReboot:
        enum:
        - 0
        - 1
        example: 0
        type: integer
      instanceType:
        example: tidb
        type: string
      name:
        example: binlog_size
        type: string
      note:
        example: binlog cache size
        type: string
      paramId:
        example: "1"
        type: string
      range:
        example:
        - "1"
        - ' 1000'
        items:
          type: string
        type: array
      systemVariable:
        example: log.log_level
        type: string
      type:
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        example: 0
        type: integer
      unit:
        example: mb
        type: string
      updateSource:
        enum:
        - 0
        - 1
        - 2
        - 3
        example: 0
        type: integer
      updateTime:
        example: 1636698675
        type: integer
    type: object
  structs.ParameterGroupParameterSampleInfo:
    properties:
      defaultValue:
        example: "1"
        type: string
      description:
        example: binlog cache size
        type: string
      paramId:
        example: "123"
        type: string
    type: object
  structs.ParameterRealValue:
    properties:
      clusterValue:
        type: string
      instanceValue:
        items:
          $ref: '#/definitions/structs.ClusterInstanceParameterValue'
        type: array
    type: object
  structs.Product:
    properties:
      arch:
        type: string
      id:
        description: The ID of the product
        type: string
      internal:
        type: integer
      name:
        description: the Name of the product
        type: string
      regionId:
        type: string
      regionName:
        type: string
      status:
        type: string
      vendorId:
        description: the vendor ID of the vendor, e.go AWS
        type: string
      vendorName:
        description: the Vendor name of the vendor, e.g AWS/Aliyun
        type: string
      version:
        type: string
    type: object
  structs.ProductComponentProperty:
    properties:
      endPort:
        type: integer
      id:
        description: ID of the product component, globally unique
        type: string
      maxInstance:
        description: Maximum number of instances when the product component is running,
          e.g. PD can run up to 7 instances, other components have no upper limit
        type: integer
      maxPort:
        type: integer
      minInstance:
        description: Minimum number of instances of product components at runtime,
          e.g. at least 1 instance of PD, at least 3 instances of TiKV
        type: integer
      name:
        description: Name of the product component, globally unique
        type: string
      purposeType:
        description: The type of resources required by the product component at runtime,
          e.g. storage class
        type: string
      spec:
        additionalProperties:
          $ref: '#/definitions/structs.ComponentInstanceResourceSpec'
        description: Information on the specifications of the resources online for
          the running of product components,organized by different Zone
        type: object
      startPort:
        type: integer
    type: object
  structs.ProductDetail:
    properties:
      id:
        description: The ID of the product consists of the product ID
        type: string
      name:
        description: The name of the product consists of the product name and the
          version
        type: string
      versions:
        additionalProperties:
          $ref: '#/definitions/structs.ProductVersion'
        description: Organize product information by version
        type: object
    type: object
  structs.ProductSpecInfo:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  structs.ProductVersion:
    properties:
      arch:
        additionalProperties:
          additionalProperties:
            $ref: '#/definitions/structs.ProductComponentProperty'
          type: object
        description: Arch information of the product, e.g. X86/X86_64
        type: object
      version:
        description: Version information of the product, e.g. v5.0.0
        type: string
    type: object
  structs.ResourceStockCheckResult:
    properties:
      componentName:
        type: string
      componentType:
        type: string
      count:
        type: integer
      diskCapacity:
        type: integer
      diskType:
        description: NVMeSSD/SSD/SATA
        type: string
      enough:
        type: boolean
      specCode:
        description: 4C8G/8C16G ?
        type: string
      zoneCode:
        type: string
    type: object
  structs.SpecInfo:
    properties:
      cpu:
        type: integer
      diskType:
        description: 'eg: NVMeSSD/SSD/SATA'
        type: string
      id:
        description: ID of the resource specification
        type: string
      memory:
        description: The amount of memory occupied by the instance, in GiB
        type: integer
      name:
        description: 'Name of the resource specification,eg: TiDB.c1.large'
        type: string
      purpose_type:
        description: eg:Compute/Storage/Schedule
        type: string
      status:
        description: e.g. Online/Offline
        type: string
    type: object
  structs.Stocks:
    properties:
      freeCpuCores:
        type: integer
      freeDiskCapacity:
        type: integer
      freeDiskCount:
        type: integer
      freeHostCount:
        type: integer
      freeMemory:
        type: integer
    type: object
  structs.Usage:
    properties:
      total:
        type: number
      usageRate:
        type: number
      used:
        type: number
    type: object
  structs.WorkFlowInfo:
    properties:
      bizId:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        enum:
        - Initializing
        - Processing
        - Finished
        - Error
        - Canceled
        type: string
      updateTime:
        type: string
    type: object
  structs.WorkFlowNodeInfo:
    properties:
      endTime:
        type: string
      id:
        type: string
      name:
        type: string
      parameters:
        type: string
      result:
        type: string
      startTime:
        type: string
      status:
        enum:
        - Initializing
        - Processing
        - Finished
        - Error
        - Canceled
        type: string
    type: object
  structs.ZoneInfo:
    properties:
      comment:
        type: string
      regionId:
        description: The value of the RegionID is similar to CN-HANGZHOU
        type: string
      regionName:
        description: The value of the Name is similar to East China(Hangzhou)
        type: string
      vendorId:
        description: The value of the VendorID is similar to AWS
        type: string
      vendorName:
        description: The value of the Name is similar to AWS
        type: string
      zoneId:
        description: The value of the ZoneID is similar to CN-HANGZHOU-H
        type: string
      zoneName:
        description: The value of the Name is similar to Hangzhou(H)
        type: string
    type: object
host: localhost:4100
info:
  contact:
    email: zhangpeijin@pingcap.com
    name: zhangpeijin
  description: TiEM UI API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: TiEM UI API
  version: "1.0"
paths:
  /backups/:
    get:
      consumes:
      - application/json
      description: query backup records of a cluster
      parameters:
      - in: query
        name: backupId
        type: string
      - in: query
        name: clusterId
        type: string
      - in: query
        name: endTime
        type: integer
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - in: query
        name: startTime
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryBackupRecordsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query backup records of a cluster
      tags:
      - cluster backup
    post:
      consumes:
      - application/json
      description: backup
      parameters:
      - description: backup request
        in: body
        name: backupReq
        required: true
        schema:
          $ref: '#/definitions/cluster.BackupClusterDataReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.BackupClusterDataResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: backup
      tags:
      - cluster backup
  /backups/{backupId}:
    delete:
      consumes:
      - application/json
      description: delete backup record
      parameters:
      - description: backup record id
        in: path
        name: backupId
        required: true
        type: integer
      - description: backup delete request
        in: body
        name: backupDeleteReq
        required: true
        schema:
          $ref: '#/definitions/cluster.DeleteBackupDataReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.DeleteBackupDataResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete backup record
      tags:
      - cluster backup
  /changefeeds/:
    get:
      consumes:
      - application/json
      description: query change feed tasks of a cluster
      parameters:
      - example: CLUSTER_ID_IN_TIEM__22
        in: query
        name: clusterId
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/cluster.QueryChangeFeedTaskResp'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query change feed tasks of a cluster
      tags:
      - change feed
    post:
      consumes:
      - application/json
      description: create a change feed task
      parameters:
      - description: change feed task request
        in: body
        name: changeFeedTask
        required: true
        schema:
          $ref: '#/definitions/cluster.CreateChangeFeedTaskReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.CreateChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: create a change feed task
      tags:
      - change feed
  /changefeeds/{changeFeedTaskId}:
    delete:
      consumes:
      - application/json
      description: delete a change feed task
      parameters:
      - description: changeFeedTaskId
        in: path
        name: changeFeedTaskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.DeleteChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete a change feed task
      tags:
      - change feed
  /changefeeds/{changeFeedTaskId}/:
    get:
      consumes:
      - application/json
      description: get change feed detail
      parameters:
      - description: changeFeedTaskId
        in: path
        name: changeFeedTaskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.DetailChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: get change feed detail
      tags:
      - change feed
  /changefeeds/{changeFeedTaskId}/pause:
    post:
      consumes:
      - application/json
      description: pause a change feed task
      parameters:
      - description: changeFeedTaskId
        in: path
        name: changeFeedTaskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.PauseChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: pause a change feed task
      tags:
      - change feed
  /changefeeds/{changeFeedTaskId}/resume:
    post:
      consumes:
      - application/json
      description: resume a change feed task
      parameters:
      - description: changeFeedTaskId
        in: path
        name: changeFeedTaskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.ResumeChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: resume a change feed task
      tags:
      - change feed
  /changefeeds/{changeFeedTaskId}/update:
    post:
      consumes:
      - application/json
      description: resume a change feed
      parameters:
      - description: changeFeedTaskId
        in: path
        name: changeFeedTaskId
        required: true
        type: string
      - description: change feed task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/cluster.UpdateChangeFeedTaskReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.UpdateChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: resume a change feed
      tags:
      - change feed
  /clusters/:
    get:
      consumes:
      - application/json
      description: query clusters
      parameters:
      - in: query
        name: clusterId
        type: string
      - in: query
        name: clusterName
        type: string
      - in: query
        name: clusterStatus
        type: string
      - in: query
        name: clusterTag
        type: string
      - in: query
        name: clusterType
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query clusters
      tags:
      - cluster
    post:
      consumes:
      - application/json
      description: create a cluster
      parameters:
      - description: create request
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/cluster.CreateClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.CreateClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: create a cluster
      tags:
      - cluster
  /clusters/{clusterId}:
    delete:
      consumes:
      - application/json
      description: delete cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      - description: delete request
        in: body
        name: deleteReq
        schema:
          $ref: '#/definitions/cluster.DeleteClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.DeleteClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete cluster
      tags:
      - cluster
    get:
      consumes:
      - application/json
      description: show details of a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryClusterDetailResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show details of a cluster
      tags:
      - cluster
  /clusters/{clusterId}/dashboard:
    get:
      consumes:
      - application/json
      description: dashboard
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.GetDashboardInfoResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: dashboard
      tags:
      - cluster
  /clusters/{clusterId}/log:
    get:
      consumes:
      - application/json
      description: query cluster log
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      - example: 1638331200
        in: query
        name: endTime
        type: integer
      - example: 127.0.0.1
        in: query
        name: ip
        type: string
      - example: warn
        in: query
        name: level
        type: string
      - example: tidb log
        in: query
        name: message
        type: string
      - example: tidb
        in: query
        name: module
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - example: 1630468800
        in: query
        name: startTime
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryClusterLogResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query cluster log
      tags:
      - cluster log
  /clusters/{clusterId}/monitor:
    get:
      consumes:
      - application/json
      description: describe monitoring link
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryMonitorInfoResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: describe monitoring link
      tags:
      - cluster
  /clusters/{clusterId}/params:
    get:
      consumes:
      - application/json
      description: query parameters of a cluster
      parameters:
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryClusterParametersResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query parameters of a cluster
      tags:
      - cluster parameters
    put:
      consumes:
      - application/json
      description: submit parameters
      parameters:
      - description: update params request
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/cluster.UpdateClusterParametersReq'
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.UpdateClusterParametersResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: submit parameters
      tags:
      - cluster parameters
  /clusters/{clusterId}/params/inspect:
    post:
      consumes:
      - application/json
      description: inspect parameters
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/cluster.InspectClusterParametersResp'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: inspect parameters
      tags:
      - cluster parameters
  /clusters/{clusterId}/restart:
    post:
      consumes:
      - application/json
      description: restart a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.RestartClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: restart a cluster
      tags:
      - cluster
  /clusters/{clusterId}/scale-in:
    post:
      consumes:
      - application/json
      description: scale in a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      - description: scale in request
        in: body
        name: scaleInReq
        required: true
        schema:
          $ref: '#/definitions/cluster.ScaleInClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.ScaleInClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: scale in a cluster
      tags:
      - cluster
  /clusters/{clusterId}/scale-out:
    post:
      consumes:
      - application/json
      description: scale out a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      - description: scale out request
        in: body
        name: scaleOutReq
        required: true
        schema:
          $ref: '#/definitions/cluster.ScaleOutClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.ScaleOutClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: scale out a cluster
      tags:
      - cluster
  /clusters/{clusterId}/stop:
    post:
      consumes:
      - application/json
      description: stop a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.StopClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: stop a cluster
      tags:
      - cluster
  /clusters/{clusterId}/strategy:
    put:
      consumes:
      - application/json
      description: save the backup strategy of a cluster
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      - description: backup strategy request
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/cluster.SaveBackupStrategyReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.SaveBackupStrategyResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: save the backup strategy of a cluster
      tags:
      - cluster backup
  /clusters/{clusterId}/strategy/:
    get:
      consumes:
      - application/json
      description: show the backup strategy of a cluster
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.GetBackupStrategyResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show the backup strategy of a cluster
      tags:
      - cluster backup
  /clusters/clone:
    post:
      consumes:
      - application/json
      description: clone a cluster
      parameters:
      - description: clone cluster request
        in: body
        name: cloneClusterReq
        required: true
        schema:
          $ref: '#/definitions/cluster.CloneClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.CloneClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: clone a cluster
      tags:
      - cluster
  /clusters/export:
    post:
      consumes:
      - application/json
      description: export
      parameters:
      - description: cluster info for data export
        in: body
        name: dataExport
        required: true
        schema:
          $ref: '#/definitions/message.DataExportReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DataExportResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: export data from tidb cluster
      tags:
      - cluster export
  /clusters/import:
    post:
      consumes:
      - application/json
      description: import
      parameters:
      - description: cluster info for import data
        in: body
        name: dataImport
        required: true
        schema:
          $ref: '#/definitions/message.DataImportReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DataImportResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: import data to tidb cluster
      tags:
      - cluster import
  /clusters/preview:
    post:
      consumes:
      - application/json
      description: preview cluster topology and capability
      parameters:
      - description: preview request
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/cluster.CreateClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.PreviewClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: preview cluster topology and capability
      tags:
      - cluster
  /clusters/restore:
    post:
      consumes:
      - application/json
      description: restore a new cluster by backup record
      parameters:
      - description: restore request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/cluster.RestoreNewClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.RestoreNewClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: restore a new cluster by backup record
      tags:
      - cluster
  /clusters/takeover:
    post:
      consumes:
      - application/json
      description: takeover a cluster
      parameters:
      - description: takeover request
        in: body
        name: takeoverReq
        required: true
        schema:
          $ref: '#/definitions/cluster.TakeoverClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.TakeoverClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: takeover a cluster
      tags:
      - cluster
  /clusters/transport:
    get:
      consumes:
      - application/json
      description: query records of import and export
      parameters:
      - in: query
        name: clusterId
        type: string
      - in: query
        name: endTime
        type: integer
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - in: query
        name: reImport
        type: boolean
      - in: query
        name: recordId
        type: string
      - in: query
        name: startTime
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryDataImportExportRecordsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query records of import and export
      tags:
      - cluster data transport
  /clusters/transport/{recordId}:
    delete:
      consumes:
      - application/json
      description: delete data transport record
      parameters:
      - description: data transport recordId
        in: path
        name: recordId
        required: true
        type: integer
      - description: data transport record delete request
        in: body
        name: DataTransportDeleteReq
        required: true
        schema:
          $ref: '#/definitions/message.DeleteImportExportRecordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DeleteImportExportRecordResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete data transport record
      tags:
      - cluster data transport
  /downstream/:
    delete:
      consumes:
      - application/json
      description: show display config
      parameters:
      - description: tidb
        in: body
        name: tidb
        required: true
        schema:
          $ref: '#/definitions/cluster.TiDBDownstream'
      - description: mysql
        in: body
        name: mysql
        required: true
        schema:
          $ref: '#/definitions/cluster.MysqlDownstream'
      - description: kafka
        in: body
        name: kafka
        required: true
        schema:
          $ref: '#/definitions/cluster.KafkaDownstream'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: unused, just display downstream config
      tags:
      - change feed
  /knowledges/:
    get:
      consumes:
      - application/json
      description: show cluster knowledge
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/knowledge.ClusterTypeSpec'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show cluster knowledge
      tags:
      - knowledge
  /param-groups/:
    get:
      consumes:
      - application/json
      description: query parameter group
      parameters:
      - example: 8C16G
        in: query
        name: clusterSpec
        type: string
      - example: v5.0
        in: query
        name: clusterVersion
        type: string
      - enum:
        - 0
        - 1
        - 2
        example: 0
        in: query
        name: dbType
        type: integer
      - enum:
        - 0
        - 1
        - 2
        example: 0
        in: query
        name: hasDefault
        type: integer
      - example: false
        in: query
        name: hasDetail
        type: boolean
      - example: default
        in: query
        name: name
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/message.QueryParameterGroupResp'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query parameter group
      tags:
      - parameter group
    post:
      consumes:
      - application/json
      description: create a parameter group
      parameters:
      - description: create request
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/message.CreateParameterGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.CreateParameterGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: create a parameter group
      tags:
      - parameter group
  /param-groups/{paramGroupId}:
    delete:
      consumes:
      - application/json
      description: delete a parameter group
      parameters:
      - description: parameter group id
        in: path
        name: paramGroupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DeleteParameterGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete a parameter group
      tags:
      - parameter group
    get:
      consumes:
      - application/json
      description: show details of a parameter group
      parameters:
      - description: parameter group id
        in: path
        name: paramGroupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DetailParameterGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show details of a parameter group
      tags:
      - parameter group
    put:
      consumes:
      - application/json
      description: update a parameter group
      parameters:
      - description: parameter group id
        in: path
        name: paramGroupId
        required: true
        type: string
      - description: update parameter group request
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/message.UpdateParameterGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UpdateParameterGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: update a parameter group
      tags:
      - parameter group
  /param-groups/{paramGroupId}/apply:
    post:
      consumes:
      - application/json
      description: apply a parameter group
      parameters:
      - description: parameter group id
        in: path
        name: paramGroupId
        required: true
        type: string
      - description: apply parameter group request
        in: body
        name: applyReq
        required: true
        schema:
          $ref: '#/definitions/message.ApplyParameterGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.ApplyParameterGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: apply a parameter group
      tags:
      - parameter group
  /param-groups/{paramGroupId}/copy:
    post:
      consumes:
      - application/json
      description: copy a parameter group
      parameters:
      - description: parameter group id
        in: path
        name: paramGroupId
        required: true
        type: string
      - description: copy parameter group request
        in: body
        name: copyReq
        required: true
        schema:
          $ref: '#/definitions/message.CopyParameterGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.CopyParameterGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: copy a parameter group
      tags:
      - parameter group
  /products/:
    delete:
      consumes:
      - application/json
      description: delete product
      parameters:
      - description: create product request parameter
        in: body
        name: CreateProductReq
        required: true
        schema:
          $ref: '#/definitions/message.DeleteProductReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DeleteProductResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete product
      tags:
      - platform
    get:
      consumes:
      - application/json
      description: queries all products' information
      parameters:
      - in: query
        name: internalProduct
        type: integer
      - in: query
        name: status
        type: string
      - in: query
        name: vendorId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryProductsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: queries all products' information
      tags:
      - platform
    post:
      consumes:
      - application/json
      description: created product
      parameters:
      - description: create product request parameter
        in: body
        name: CreateProductReq
        required: true
        schema:
          $ref: '#/definitions/message.CreateProductReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.CreateProductResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: created product
      tags:
      - platform
  /products/detail:
    get:
      consumes:
      - application/json
      description: query all product detail
      parameters:
      - in: query
        name: internalProduct
        type: integer
      - in: query
        name: productId
        type: string
      - in: query
        name: regionId
        type: string
      - in: query
        name: status
        type: string
      - in: query
        name: vendorId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryProductDetailResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query all product detail
      tags:
      - platform
  /resources/hierarchy:
    get:
      consumes:
      - application/json
      description: get resource hierarchy-tree
      parameters:
      - in: query
        name: Depth
        type: integer
      - description: '[1:Region, 2:Zone, 3:Rack, 4:Host]'
        in: query
        name: Level
        type: integer
      - in: query
        name: arch
        type: string
      - in: query
        name: hostId
        type: string
      - in: query
        name: loadStat
        type: string
      - in: query
        name: purpose
        type: string
      - in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.GetHierarchyResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show the resources hierarchy
      tags:
      - resource
  /resources/host-reserved:
    put:
      consumes:
      - application/json
      description: update host reserved by a list
      parameters:
      - description: do update in host list
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/message.UpdateHostReservedReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UpdateHostReservedResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Update host reserved
      tags:
      - resource
  /resources/host-status:
    put:
      consumes:
      - application/json
      description: update host status by a list
      parameters:
      - description: do update in host list
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/message.UpdateHostStatusReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UpdateHostStatusResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Update host status
      tags:
      - resource
  /resources/hosts:
    delete:
      consumes:
      - application/json
      description: remove hosts by a list
      parameters:
      - description: list of host IDs
        in: body
        name: hostIds
        required: true
        schema:
          $ref: '#/definitions/message.DeleteHostsReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DeleteHostsResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Remove a batch of hosts
      tags:
      - resource
    get:
      consumes:
      - application/json
      description: get hosts list
      parameters:
      - in: query
        name: arch
        type: string
      - in: query
        name: hostId
        type: string
      - in: query
        name: loadStat
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - in: query
        name: purpose
        type: string
      - in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryHostsResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show all hosts list in TiEM
      tags:
      - resource
    post:
      consumes:
      - multipart/form-data
      description: import hosts by xlsx file
      parameters:
      - default: "false"
        description: whether hosts are reserved(won't be allocated) after import
        in: formData
        name: hostReserved
        type: string
      - description: hosts information in a xlsx file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.ImportHostsResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Import a batch of hosts to TiEM
      tags:
      - resource
  /resources/hosts-template:
    get:
      consumes:
      - application/json
      description: get host template xlsx file
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
      security:
      - ApiKeyAuth: []
      summary: Download the host information template file for importing
      tags:
      - resource
  /resources/stocks:
    get:
      consumes:
      - application/json
      description: get resource stocks in specified conditions
      parameters:
      - in: query
        name: Capacity
        type: integer
      - in: query
        name: DiskStatus
        type: string
      - in: query
        name: DiskType
        type: string
      - in: query
        name: HostIp
        type: string
      - in: query
        name: Rack
        type: string
      - in: query
        name: Region
        type: string
      - in: query
        name: Zone
        type: string
      - in: query
        name: arch
        type: string
      - in: query
        name: hostId
        type: string
      - in: query
        name: loadStat
        type: string
      - in: query
        name: purpose
        type: string
      - in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.GetStocksResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show the resources stocks
      tags:
      - resource
  /specs:
    delete:
      consumes:
      - application/json
      description: deleted specs
      parameters:
      - description: delete specs request parameter
        in: body
        name: DeleteSpecsReq
        required: true
        schema:
          $ref: '#/definitions/message.DeleteSpecsReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DeleteSpecsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: deleted  specs
      tags:
      - platform
    get:
      consumes:
      - application/json
      description: queries all specs information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QuerySpecsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: queries all specs information
      tags:
      - platform
    post:
      consumes:
      - application/json
      description: created specs
      parameters:
      - description: create specs request parameter
        in: body
        name: CreateSpecsReq
        required: true
        schema:
          $ref: '#/definitions/message.CreateSpecsReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.CreateSpecsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: created  specs
      tags:
      - platform
  /user/login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: login info
        in: body
        name: loginInfo
        required: true
        schema:
          $ref: '#/definitions/message.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.LoginResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      summary: login
      tags:
      - platform
  /user/logout:
    post:
      consumes:
      - application/json
      description: logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.LogoutResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: logout
      tags:
      - platform
  /user/profile:
    get:
      consumes:
      - application/json
      description: profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UserProfile'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: user profile
      tags:
      - platform
  /workflow/:
    get:
      consumes:
      - application/json
      description: query flow works
      parameters:
      - in: query
        name: bizId
        type: string
      - in: query
        name: flowName
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryWorkFlowsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query flow works
      tags:
      - task
  /workflow/{workFlowId}:
    get:
      consumes:
      - application/json
      description: show details of a flow work
      parameters:
      - description: flow work id
        in: path
        name: workFlowId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryWorkFlowDetailResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show details of a flow work
      tags:
      - task
  /zones:
    delete:
      consumes:
      - application/json
      description: deleted zones
      parameters:
      - description: delete zone request parameter
        in: body
        name: CreateZoneReq
        required: true
        schema:
          $ref: '#/definitions/message.DeleteZoneReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DeleteZoneResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: deleted zones
      tags:
      - platform
    get:
      consumes:
      - application/json
      description: queries all zones information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryZonesResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: queries all zones information
      tags:
      - platform
    post:
      consumes:
      - application/json
      description: created  zones
      parameters:
      - description: create zones request parameter
        in: body
        name: CreateZoneReq
        required: true
        schema:
          $ref: '#/definitions/message.CreateZonesReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.CreateZonesResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: created  zones
      tags:
      - platform
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
