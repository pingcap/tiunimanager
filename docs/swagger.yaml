basePath: /api/v1/
definitions:
  cluster.BackupClusterDataReq:
    properties:
      backupMode:
        description: auto,manual
        type: string
      backupType:
        description: full,incr
        type: string
      clusterId:
        type: string
    type: object
  cluster.BackupClusterDataResp:
    properties:
      backupId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.CancelBackupReq:
    properties:
      backupId:
        type: string
      clusterId:
        type: string
    type: object
  cluster.CancelBackupResp:
    type: object
  cluster.CloneClusterReq:
    properties:
      cloneStrategy:
        description: specify clone strategy, include empty, snapshot and sync, default
          empty(option)
        type: string
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      copies:
        description: The number of copies of the newly created cluster data, consistent
          with the number of copies set in PD
        type: integer
      cpuArchitecture:
        description: X86/X86_64/ARM
        type: string
      dbPassword:
        type: string
      dbUser:
        description: todo delete?
        type: string
      exclusive:
        description: Whether the newly created cluster is exclusive to physical resources,
          when exclusive, a host will only deploy instances of the same cluster, which
          may result in poor resource utilization
        type: boolean
      parameterGroupID:
        type: string
      region:
        description: The Region where the cluster is located
        type: string
      resourceParameters:
        $ref: '#/definitions/structs.ClusterResourceInfo'
      sourceClusterId:
        description: specify source cluster id(require)
        type: string
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
      vendor:
        type: string
    required:
    - cloneStrategy
    - clusterName
    - clusterType
    - clusterVersion
    - cpuArchitecture
    - dbPassword
    - region
    - sourceClusterId
    type: object
  cluster.CloneClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.CreateChangeFeedTaskReq:
    properties:
      clusterId:
        example: CLUSTER_ID_IN_TIUNIMANAGER__22
        type: string
      downstream:
        type: object
      downstreamType:
        enum:
        - tidb
        - kafka
        - mysql
        example: tidb
        type: string
      name:
        example: my_sync_name
        type: string
      rules:
        example:
        - '*.*'
        items:
          type: string
        type: array
      startTS:
        example: "415241823337054209"
        type: string
    required:
    - clusterId
    - downstreamType
    - name
    type: object
  cluster.CreateChangeFeedTaskResp:
    properties:
      id:
        example: TASK_ID_IN_TIUNIMANAGER____22
        type: string
    type: object
  cluster.CreateClusterReq:
    properties:
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      copies:
        description: The number of copies of the newly created cluster data, consistent
          with the number of copies set in PD
        type: integer
      cpuArchitecture:
        description: X86/X86_64/ARM
        type: string
      dbPassword:
        type: string
      dbUser:
        description: todo delete?
        type: string
      exclusive:
        description: Whether the newly created cluster is exclusive to physical resources,
          when exclusive, a host will only deploy instances of the same cluster, which
          may result in poor resource utilization
        type: boolean
      parameterGroupID:
        type: string
      region:
        description: The Region where the cluster is located
        type: string
      resourceParameters:
        $ref: '#/definitions/structs.ClusterResourceInfo'
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
      vendor:
        type: string
    required:
    - clusterName
    - clusterType
    - clusterVersion
    - cpuArchitecture
    - dbPassword
    - region
    type: object
  cluster.CreateClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.DeleteBackupDataReq:
    properties:
      backupMode:
        type: string
      clusterId:
        type: string
    type: object
  cluster.DeleteBackupDataResp:
    type: object
  cluster.DeleteChangeFeedTaskResp:
    properties:
      id:
        example: TASK_ID_IN_TIUNIMANAGER____22
        type: string
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: Normal
        type: string
    type: object
  cluster.DeleteClusterReq:
    properties:
      autoBackup:
        type: boolean
      force:
        type: boolean
      keepHistoryBackupRecords:
        type: boolean
    type: object
  cluster.DeleteClusterResp:
    properties:
      clusterID:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.DeleteMetadataPhysicallyReq:
    properties:
      reason:
        type: string
    required:
    - reason
    type: object
  cluster.DeleteMetadataPhysicallyResp:
    type: object
  cluster.DetailChangeFeedTaskResp:
    properties:
      clusterId:
        example: CLUSTER_ID_IN_TIUNIMANAGER__22
        type: string
      createTime:
        type: string
      downstream:
        type: object
      downstreamFetchTs:
        example: "415241823337054209"
        type: string
      downstreamFetchUnix:
        example: 1642402879000
        type: integer
      downstreamSyncTs:
        example: "415241823337054209"
        type: string
      downstreamSyncUnix:
        example: 1642402879000
        type: integer
      downstreamType:
        enum:
        - tidb
        - kafka
        - mysql
        example: tidb
        type: string
      id:
        example: CLUSTER_ID_IN_TIUNIMANAGER__22
        type: string
      name:
        example: my_sync_name
        type: string
      rules:
        example:
        - '*.*'
        items:
          type: string
        type: array
      startTS:
        example: "415241823337054209"
        type: string
      startUnix:
        example: 1642402879000
        type: integer
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: Normal
        type: string
      unsteady:
        example: false
        type: boolean
      updateTime:
        type: string
      upstreamUpdateTs:
        example: "415241823337054209"
        type: string
      upstreamUpdateUnix:
        example: 1642402879000
        type: integer
    type: object
  cluster.Dispatcher:
    properties:
      dispatcher:
        example: ts
        type: string
      matcher:
        example: test1.*
        type: string
    type: object
  cluster.GetBackupStrategyResp:
    properties:
      strategy:
        $ref: '#/definitions/structs.BackupStrategy'
    type: object
  cluster.GetDashboardInfoResp:
    properties:
      clusterId:
        example: abc
        type: string
      token:
        type: string
      url:
        example: http://127.0.0.1:9093
        type: string
    type: object
  cluster.InspectParameterInfo:
    properties:
      category:
        example: log
        type: string
      description:
        example: binlog cache size
        type: string
      hasReboot:
        enum:
        - 0
        - 1
        example: 0
        type: integer
      inspectValue:
        type: object
      name:
        example: binlog_cache
        type: string
      note:
        example: binlog cache size
        type: string
      paramId:
        example: "1"
        type: string
      range:
        example:
        - "1"
        - ' 1000'
        items:
          type: string
        type: array
      rangeType:
        enum:
        - 0
        - 1
        - 2
        example: 1
        type: integer
      readOnly:
        enum:
        - 0
        - 1
        example: 0
        type: integer
      realValue:
        $ref: '#/definitions/structs.ParameterRealValue'
      systemVariable:
        example: log.log_level
        type: string
      type:
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        example: 0
        type: integer
      unit:
        example: MB
        type: string
      unitOptions:
        example:
        - KB
        - MB
        - GB
        items:
          type: string
        type: array
    type: object
  cluster.InspectParameters:
    properties:
      instanceId:
        type: string
      instanceType:
        type: string
      parameterInfos:
        items:
          $ref: '#/definitions/cluster.InspectParameterInfo'
        type: array
    type: object
  cluster.InspectParametersReq:
    properties:
      instanceId:
        type: string
    type: object
  cluster.InspectParametersResp:
    properties:
      params:
        items:
          $ref: '#/definitions/cluster.InspectParameters'
        type: array
    type: object
  cluster.KafkaDownstream:
    properties:
      clientId:
        example: "213"
        type: string
      dispatchers:
        items:
          $ref: '#/definitions/cluster.Dispatcher'
        type: array
      ip:
        example: 127.0.0.1
        type: string
      maxBatchSize:
        example: 5
        type: integer
      maxMessageBytes:
        example: 16
        type: integer
      partitions:
        example: 1
        type: integer
      port:
        example: 9001
        type: integer
      protocol:
        enum:
        - default
        - canal
        - avro
        - maxwell
        example: default
        type: string
      replicationFactor:
        example: 1
        type: integer
      tls:
        example: false
        type: boolean
      topicName:
        example: my_topic
        type: string
      version:
        example: 2.4.0
        type: string
    type: object
  cluster.MasterSlaveClusterSwitchoverReq:
    properties:
      checkMasterWritableFlag:
        type: boolean
      checkSlaveReadOnlyFlag:
        type: boolean
      checkStandaloneClusterFlag:
        description: |-
          check if cluster specified in `SourceClusterID` is standalone, i.e. no cluster relation and no cdc
          if this flag is true, always only check
        type: boolean
      force:
        type: boolean
      onlyCheck:
        description: only check if this flag is true
        type: boolean
      rollbackClearPreviousMaintenanceFlag:
        description: clear previous un-cleared "Switching" maintenance state
        type: boolean
      rollbackWorkFlowID:
        description: if this field is not empty, that means this is a rollback request
        type: string
      sourceClusterID:
        description: old master/new slave
        type: string
      targetClusterID:
        description: new master/old slave
        type: string
    required:
    - sourceClusterID
    - targetClusterID
    type: object
  cluster.MasterSlaveClusterSwitchoverResp:
    properties:
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.MysqlDownstream:
    properties:
      concurrentThreads:
        example: 7
        type: integer
      ip:
        example: 127.0.0.1
        type: string
      maxTxnRow:
        example: 5
        type: integer
      password:
        example: my_password
        type: string
      port:
        example: 8001
        type: integer
      tls:
        example: false
        type: boolean
      username:
        example: root
        type: string
      workerCount:
        example: 2
        type: integer
    type: object
  cluster.PauseChangeFeedTaskResp:
    properties:
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: Normal
        type: string
    type: object
  cluster.PreviewClusterResp:
    properties:
      capabilityIndexes:
        items:
          $ref: '#/definitions/structs.Index'
        type: array
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      cpuArchitecture:
        type: string
      region:
        type: string
      stockCheckResult:
        items:
          $ref: '#/definitions/structs.ResourceStockCheckResult'
        type: array
    type: object
  cluster.QueryBackupRecordsResp:
    properties:
      backupRecords:
        items:
          $ref: '#/definitions/structs.BackupRecord'
        type: array
    type: object
  cluster.QueryChangeFeedTaskResp:
    properties:
      clusterId:
        example: CLUSTER_ID_IN_TIUNIMANAGER__22
        type: string
      createTime:
        type: string
      downstream:
        type: object
      downstreamFetchTs:
        example: "415241823337054209"
        type: string
      downstreamFetchUnix:
        example: 1642402879000
        type: integer
      downstreamSyncTs:
        example: "415241823337054209"
        type: string
      downstreamSyncUnix:
        example: 1642402879000
        type: integer
      downstreamType:
        enum:
        - tidb
        - kafka
        - mysql
        example: tidb
        type: string
      id:
        example: CLUSTER_ID_IN_TIUNIMANAGER__22
        type: string
      name:
        example: my_sync_name
        type: string
      rules:
        example:
        - '*.*'
        items:
          type: string
        type: array
      startTS:
        example: "415241823337054209"
        type: string
      startUnix:
        example: 1642402879000
        type: integer
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: Normal
        type: string
      unsteady:
        example: false
        type: boolean
      updateTime:
        type: string
      upstreamUpdateTs:
        example: "415241823337054209"
        type: string
      upstreamUpdateUnix:
        example: 1642402879000
        type: integer
    type: object
  cluster.QueryClusterDetailResp:
    properties:
      info:
        $ref: '#/definitions/structs.ClusterInfo'
      instanceResource:
        items:
          $ref: '#/definitions/structs.ClusterResourceParameterCompute'
        type: array
      requestResourceMode:
        default: SpecificZone
        enum:
        - SpecificZone
        - SpecificHost
        type: string
      topology:
        items:
          $ref: '#/definitions/structs.ClusterInstanceInfo'
        type: array
    type: object
  cluster.QueryClusterLogResp:
    properties:
      results:
        items:
          $ref: '#/definitions/structs.ClusterLogItem'
        type: array
      took:
        example: 10
        type: integer
    type: object
  cluster.QueryClusterParametersResp:
    properties:
      paramGroupId:
        type: string
      params:
        items:
          $ref: '#/definitions/structs.ClusterParameterInfo'
        type: array
    type: object
  cluster.QueryClusterResp:
    properties:
      clusters:
        items:
          $ref: '#/definitions/structs.ClusterInfo'
        type: array
    type: object
  cluster.QueryMonitorInfoResp:
    properties:
      alertUrl:
        example: http://127.0.0.1:9093
        type: string
      clusterId:
        example: abc
        type: string
      grafanaUrl:
        example: http://127.0.0.1:3000
        type: string
    type: object
  cluster.QueryUpgradePathRsp:
    properties:
      paths:
        items:
          $ref: '#/definitions/structs.ProductUpgradePathItem'
        type: array
    type: object
  cluster.QueryUpgradeVersionDiffInfoResp:
    properties:
      configDiffInfos:
        items:
          $ref: '#/definitions/structs.ProductUpgradeVersionConfigDiffItem'
        type: array
    type: object
  cluster.RestartClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.RestoreNewClusterReq:
    properties:
      backupId:
        type: string
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      copies:
        description: The number of copies of the newly created cluster data, consistent
          with the number of copies set in PD
        type: integer
      cpuArchitecture:
        description: X86/X86_64/ARM
        type: string
      dbPassword:
        type: string
      dbUser:
        description: todo delete?
        type: string
      exclusive:
        description: Whether the newly created cluster is exclusive to physical resources,
          when exclusive, a host will only deploy instances of the same cluster, which
          may result in poor resource utilization
        type: boolean
      parameterGroupID:
        type: string
      region:
        description: The Region where the cluster is located
        type: string
      resourceParameters:
        $ref: '#/definitions/structs.ClusterResourceInfo'
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
      vendor:
        type: string
    required:
    - backupId
    - clusterName
    - clusterType
    - clusterVersion
    - cpuArchitecture
    - dbPassword
    - region
    type: object
  cluster.RestoreNewClusterResp:
    properties:
      clusterID:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.ResumeChangeFeedTaskResp:
    properties:
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: Normal
        type: string
    type: object
  cluster.SaveBackupStrategyReq:
    properties:
      strategy:
        $ref: '#/definitions/structs.BackupStrategy'
    type: object
  cluster.SaveBackupStrategyResp:
    type: object
  cluster.ScaleInClusterReq:
    properties:
      instanceId:
        type: string
    type: object
  cluster.ScaleInClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.ScaleOutClusterReq:
    properties:
      instanceResource:
        items:
          $ref: '#/definitions/structs.ClusterResourceParameterCompute'
        type: array
      requestResourceMode:
        default: SpecificZone
        enum:
        - SpecificZone
        - SpecificHost
        type: string
    type: object
  cluster.ScaleOutClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.StopClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.TakeoverClusterReq:
    properties:
      TiUPIp:
        example: 172.16.4.147
        type: string
      TiUPPath:
        example: .tiup/
        type: string
      TiUPPort:
        example: 22
        type: integer
      TiUPUserName:
        example: root
        type: string
      TiUPUserPassword:
        example: password
        type: string
      clusterName:
        example: myClusterName
        type: string
      dbPassword:
        example: myPassword
        type: string
    required:
    - TiUPIp
    - TiUPPath
    - TiUPPort
    - TiUPUserName
    - TiUPUserPassword
    - clusterName
    - dbPassword
    type: object
  cluster.TakeoverClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.TiDBDownstream:
    properties:
      concurrentThreads:
        example: 5
        type: integer
      ip:
        example: 127.0.0.1
        type: string
      maxTxnRow:
        example: 4
        type: integer
      password:
        example: my_password
        type: string
      port:
        example: 4534
        type: integer
      targetClusterId:
        example: CLUSTER_ID_IN_TIUNIMANAGER__22
        type: string
      tls:
        example: false
        type: boolean
      username:
        example: tidb
        type: string
      workerCount:
        example: 2
        type: integer
    type: object
  cluster.UpdateChangeFeedTaskReq:
    properties:
      downstream:
        type: object
      downstreamType:
        enum:
        - tidb
        - kafka
        - mysql
        example: tidb
        type: string
      name:
        example: my_sync_name
        type: string
      rules:
        example:
        - '*.*'
        items:
          type: string
        type: array
    required:
    - name
    type: object
  cluster.UpdateChangeFeedTaskResp:
    properties:
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: Normal
        type: string
    type: object
  cluster.UpdateClusterParametersReq:
    properties:
      params:
        items:
          $ref: '#/definitions/structs.ClusterParameterSampleInfo'
        type: array
      reboot:
        type: boolean
    required:
    - params
    type: object
  cluster.UpdateClusterParametersResp:
    properties:
      clusterId:
        example: "1"
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.UpgradeClusterReq:
    properties:
      configs:
        items:
          $ref: '#/definitions/structs.ClusterUpgradeVersionConfigItem'
        type: array
      targetVersion:
        example: v5.0.0
        type: string
      upgradeType:
        enum:
        - in-place
        - migration
        type: string
      upgradeWay:
        enum:
        - offline
        - online
        type: string
    required:
    - targetVersion
    - upgradeType
    type: object
  cluster.UpgradeClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  controller.CommonResult:
    properties:
      code:
        type: integer
      data:
        type: object
      message:
        type: string
    type: object
  controller.Page:
    properties:
      page:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
    type: object
  controller.ResultWithPage:
    properties:
      code:
        type: integer
      data:
        type: object
      message:
        type: string
      page:
        $ref: '#/definitions/controller.Page'
    type: object
  message.AddPermissionsForRoleReq:
    properties:
      permissions:
        items:
          $ref: '#/definitions/structs.RbacPermission'
        type: array
      role:
        type: string
    type: object
  message.AddPermissionsForRoleResp:
    type: object
  message.ApplyParameterGroupReq:
    properties:
      clusterId:
        example: "123"
        type: string
      reboot:
        type: boolean
    required:
    - clusterId
    type: object
  message.ApplyParameterGroupResp:
    properties:
      clusterId:
        example: "123"
        type: string
      paramGroupId:
        example: "123"
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  message.BindRolesForUserReq:
    properties:
      roles:
        items:
          type: string
        type: array
      userId:
        type: string
    type: object
  message.BindRolesForUserResp:
    type: object
  message.CheckClusterRsp:
    properties:
      checkId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  message.CheckPermissionForUserReq:
    properties:
      permissions:
        items:
          $ref: '#/definitions/structs.RbacPermission'
        type: array
      userId:
        type: string
    type: object
  message.CheckPermissionForUserResp:
    properties:
      result:
        type: boolean
    type: object
  message.CheckPlatformReq:
    properties:
      displayMode:
        type: string
    type: object
  message.CheckPlatformRsp:
    properties:
      checkId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  message.CopyParameterGroupReq:
    properties:
      name:
        example: 8C16GV4_copy
        type: string
      note:
        example: copy param group
        type: string
    required:
    - name
    type: object
  message.CopyParameterGroupResp:
    properties:
      paramGroupId:
        example: "1"
        type: string
    type: object
  message.CreateDisksReq:
    properties:
      disks:
        items:
          $ref: '#/definitions/structs.DiskInfo'
        type: array
      hostId:
        type: string
    type: object
  message.CreateDisksResp:
    properties:
      diskIds:
        items:
          type: string
        type: array
    type: object
  message.CreateParameterGroupReq:
    properties:
      addParams:
        items:
          $ref: '#/definitions/message.ParameterInfo'
        type: array
      clusterSpec:
        example: 8C16G
        type: string
      clusterVersion:
        example: v5.0
        type: string
      dbType:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      groupType:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      name:
        example: 8C16GV4_default
        type: string
      note:
        example: default param group
        type: string
      params:
        items:
          $ref: '#/definitions/structs.ParameterGroupParameterSampleInfo'
        type: array
    required:
    - clusterSpec
    - clusterVersion
    - dbType
    - groupType
    - name
    - params
    type: object
  message.CreateParameterGroupResp:
    properties:
      paramGroupId:
        example: "1"
        type: string
    type: object
  message.CreateRoleReq:
    properties:
      role:
        type: string
    type: object
  message.CreateRoleResp:
    type: object
  message.CreateTenantReq:
    properties:
      id:
        type: string
      maxCluster:
        type: integer
      maxCpu:
        type: integer
      maxMemory:
        type: integer
      maxStorage:
        type: integer
      name:
        type: string
      onBoardingStatus:
        type: string
      status:
        type: string
    required:
    - id
    type: object
  message.CreateTenantResp:
    type: object
  message.CreateUserReq:
    properties:
      email:
        type: string
      name:
        type: string
      nickname:
        type: string
      password:
        type: string
      phone:
        type: string
      tenantId:
        type: string
    required:
    - email
    - name
    - password
    type: object
  message.CreateUserResp:
    type: object
  message.DataExportReq:
    properties:
      accessKey:
        type: string
      bucketUrl:
        type: string
      clusterId:
        type: string
      comment:
        type: string
      endpointUrl:
        type: string
      fileType:
        type: string
      filter:
        type: string
      password:
        type: string
      secretAccessKey:
        type: string
      sql:
        type: string
      storageType:
        type: string
      userName:
        type: string
      zipName:
        type: string
    type: object
  message.DataExportResp:
    properties:
      recordId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  message.DataImportReq:
    properties:
      accessKey:
        type: string
      bucketUrl:
        type: string
      clusterId:
        type: string
      comment:
        type: string
      endpointUrl:
        type: string
      password:
        type: string
      recordId:
        type: string
      secretAccessKey:
        type: string
      storageType:
        type: string
      userName:
        type: string
    type: object
  message.DataImportResp:
    properties:
      recordId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  message.DeleteDisksReq:
    properties:
      diskIds:
        items:
          type: string
        type: array
    type: object
  message.DeleteDisksResp:
    type: object
  message.DeleteHostsReq:
    properties:
      force:
        type: boolean
      hostIds:
        items:
          type: string
        type: array
    type: object
  message.DeleteHostsResp:
    properties:
      flowInfo:
        items:
          $ref: '#/definitions/structs.AsyncTaskWorkFlowInfo'
        type: array
    type: object
  message.DeleteImportExportRecordReq:
    type: object
  message.DeleteImportExportRecordResp:
    properties:
      recordId:
        type: string
    type: object
  message.DeleteParameterGroupResp:
    properties:
      paramGroupId:
        example: "1"
        type: string
    type: object
  message.DeletePermissionsForRoleReq:
    properties:
      permissions:
        items:
          $ref: '#/definitions/structs.RbacPermission'
        type: array
      role:
        type: string
    type: object
  message.DeletePermissionsForRoleResp:
    type: object
  message.DeleteRoleResp:
    type: object
  message.DeleteTenantReq:
    properties:
      id:
        type: string
    type: object
  message.DeleteTenantResp:
    type: object
  message.DeleteUserReq:
    type: object
  message.DeleteUserResp:
    type: object
  message.DetailParameterGroupResp:
    properties:
      clusterSpec:
        example: 8C16G
        type: string
      clusterVersion:
        example: v5.0
        type: string
      createTime:
        example: 1636698675
        type: integer
      dbType:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      groupType:
        enum:
        - 1
        - 2
        example: 0
        type: integer
      hasDefault:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      name:
        example: default
        type: string
      note:
        example: default param group
        type: string
      paramGroupId:
        example: "1"
        type: string
      params:
        items:
          $ref: '#/definitions/structs.ParameterGroupParameterInfo'
        type: array
      updateTime:
        example: 1636698675
        type: integer
    type: object
  message.GetCheckReportRsp:
    properties:
      reportInfo:
        type: object
    type: object
  message.GetHierarchyResp:
    properties:
      root:
        $ref: '#/definitions/structs.HierarchyTreeNode'
    type: object
  message.GetStocksResp:
    properties:
      stocks:
        additionalProperties:
          $ref: '#/definitions/structs.Stocks'
        description: map[zone] -> stocks
        type: object
    type: object
  message.GetSystemConfigResp:
    properties:
      configKey:
        type: string
      configValue:
        type: string
    type: object
  message.GetSystemInfoResp:
    properties:
      currentVersion:
        $ref: '#/definitions/structs.SystemVersionInfo'
      info:
        $ref: '#/definitions/structs.SystemInfo'
      lastVersion:
        $ref: '#/definitions/structs.SystemVersionInfo'
    type: object
  message.GetTenantReq:
    properties:
      id:
        type: string
    type: object
  message.GetTenantResp:
    properties:
      info:
        $ref: '#/definitions/structs.TenantInfo'
    type: object
  message.GetUserResp:
    properties:
      user:
        $ref: '#/definitions/structs.UserInfo'
    type: object
  message.ImportHostsResp:
    properties:
      flowInfo:
        items:
          $ref: '#/definitions/structs.AsyncTaskWorkFlowInfo'
        type: array
      hostIds:
        items:
          type: string
        type: array
    type: object
  message.LoginReq:
    properties:
      userName:
        type: string
      userPassword:
        type: string
    required:
    - userName
    - userPassword
    type: object
  message.LoginResp:
    properties:
      passwordExpired:
        type: boolean
      tenantId:
        type: string
      token:
        type: string
      userId:
        type: string
    type: object
  message.LogoutResp:
    properties:
      userId:
        type: string
    type: object
  message.ParameterInfo:
    properties:
      category:
        example: log
        type: string
      defaultValue:
        example: "1024"
        type: string
      description:
        example: binlog size
        type: string
      hasApply:
        enum:
        - 0
        - 1
        example: 1
        type: integer
      hasReboot:
        enum:
        - 0
        - 1
        example: 0
        type: integer
      instanceType:
        example: TiDB
        type: string
      name:
        example: binlog_size
        type: string
      note:
        type: string
      range:
        items:
          type: string
        type: array
      rangeType:
        enum:
        - 0
        - 1
        - 2
        example: 1
        type: integer
      readOnly:
        enum:
        - 0
        - 1
        example: 0
        type: integer
      systemVariable:
        example: log.binlog_size
        type: string
      type:
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        example: 0
        type: integer
      unit:
        example: MB
        type: string
      unitOptions:
        example:
        - KB
        - MB
        - GB
        items:
          type: string
        type: array
      updateSource:
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        example: 0
        type: integer
    type: object
  message.PlatformLogItem:
    properties:
      id:
        example: zvadfwf
        type: string
      index:
        example: em-system-logs-2021.12.30
        type: string
      level:
        example: warn
        type: string
      message:
        example: some do something
        type: string
      microMethod:
        example: em.cluster.ClusterService.GetSystemInfo
        type: string
      timestamp:
        example: "2021-09-23 14:23:10"
        type: string
      traceId:
        example: UNe7K1uERa-2fwSxGJ6CFQ
        type: string
    type: object
  message.QueryAvailableProductsResp:
    properties:
      products:
        additionalProperties:
          additionalProperties:
            additionalProperties:
              additionalProperties:
                $ref: '#/definitions/structs.Product'
              type: object
            type: object
          type: object
        description: arch version
        type: object
    type: object
  message.QueryAvailableVendorsResp:
    properties:
      vendors:
        additionalProperties:
          $ref: '#/definitions/structs.VendorWithRegion'
        type: object
    type: object
  message.QueryCheckReportsRsp:
    properties:
      reportMetas:
        additionalProperties:
          $ref: '#/definitions/structs.CheckReportMeta'
        type: object
    type: object
  message.QueryDataImportExportRecordsResp:
    properties:
      transportRecords:
        items:
          $ref: '#/definitions/structs.DataImportExportRecordInfo'
        type: array
    type: object
  message.QueryHostsResp:
    properties:
      hosts:
        items:
          $ref: '#/definitions/structs.HostInfo'
        type: array
    type: object
  message.QueryParameterGroupResp:
    properties:
      clusterSpec:
        example: 8C16G
        type: string
      clusterVersion:
        example: v5.0
        type: string
      createTime:
        example: 1636698675
        type: integer
      dbType:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      groupType:
        enum:
        - 1
        - 2
        example: 0
        type: integer
      hasDefault:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      name:
        example: default
        type: string
      note:
        example: default param group
        type: string
      paramGroupId:
        example: "1"
        type: string
      params:
        items:
          $ref: '#/definitions/structs.ParameterGroupParameterInfo'
        type: array
      updateTime:
        example: 1636698675
        type: integer
    type: object
  message.QueryPermissionsForUserResp:
    properties:
      permissions:
        items:
          $ref: '#/definitions/structs.RbacPermission'
        type: array
      userId:
        type: string
    type: object
  message.QueryPlatformLogResp:
    properties:
      results:
        items:
          $ref: '#/definitions/message.PlatformLogItem'
        type: array
      took:
        example: 10
        type: integer
    type: object
  message.QueryProductDetailResp:
    properties:
      products:
        additionalProperties:
          $ref: '#/definitions/structs.ProductDetail'
        type: object
    type: object
  message.QueryProductsInfoResp:
    properties:
      products:
        items:
          $ref: '#/definitions/structs.ProductConfigInfo'
        type: array
    type: object
  message.QueryRolesResp:
    properties:
      roles:
        items:
          type: string
        type: array
    type: object
  message.QueryTenantReq:
    properties:
      page:
        description: Current page location
        type: integer
      pageSize:
        description: Number of this request
        type: integer
    type: object
  message.QueryTenantResp:
    properties:
      tenants:
        additionalProperties:
          $ref: '#/definitions/structs.TenantInfo'
        type: object
    type: object
  message.QueryUserReq:
    properties:
      page:
        description: Current page location
        type: integer
      pageSize:
        description: Number of this request
        type: integer
    type: object
  message.QueryUserResp:
    properties:
      users:
        additionalProperties:
          $ref: '#/definitions/structs.UserInfo'
        type: object
    type: object
  message.QueryVendorInfoResp:
    properties:
      vendors:
        items:
          $ref: '#/definitions/structs.VendorConfigInfo'
        type: array
    type: object
  message.QueryWorkFlowDetailResp:
    properties:
      info:
        $ref: '#/definitions/structs.WorkFlowInfo'
      nodeNames:
        items:
          type: string
        type: array
      nodes:
        items:
          $ref: '#/definitions/structs.WorkFlowNodeInfo'
        type: array
    type: object
  message.QueryWorkFlowsResp:
    properties:
      workFlows:
        items:
          $ref: '#/definitions/structs.WorkFlowInfo'
        type: array
    type: object
  message.StartWorkFlowReq:
    properties:
      workFlowId:
        type: string
    type: object
  message.StartWorkFlowResp:
    type: object
  message.StopWorkFlowReq:
    properties:
      workFlowId:
        type: string
    type: object
  message.StopWorkFlowResp:
    type: object
  message.UnbindRoleForUserReq:
    properties:
      role:
        type: string
      userId:
        type: string
    type: object
  message.UnbindRoleForUserResp:
    type: object
  message.UpdateDiskReq:
    properties:
      newDiskInfo:
        $ref: '#/definitions/structs.DiskInfo'
    type: object
  message.UpdateDiskResp:
    type: object
  message.UpdateHostInfoReq:
    properties:
      newHostInfo:
        $ref: '#/definitions/structs.HostInfo'
    type: object
  message.UpdateHostInfoResp:
    type: object
  message.UpdateHostReservedReq:
    properties:
      hostIds:
        items:
          type: string
        type: array
      reserved:
        type: boolean
    type: object
  message.UpdateHostReservedResp:
    type: object
  message.UpdateHostStatusReq:
    properties:
      hostIds:
        items:
          type: string
        type: array
      status:
        type: string
    type: object
  message.UpdateHostStatusResp:
    type: object
  message.UpdateParameterGroupReq:
    properties:
      addParams:
        items:
          $ref: '#/definitions/message.ParameterInfo'
        type: array
      clusterSpec:
        example: 8C16G
        type: string
      clusterVersion:
        example: v5.0
        type: string
      delParams:
        example:
        - "1"
        items:
          type: string
        type: array
      name:
        example: 8C16GV4_new
        type: string
      note:
        example: update param group
        type: string
      params:
        items:
          $ref: '#/definitions/structs.ParameterGroupParameterSampleInfo'
        type: array
    required:
    - params
    type: object
  message.UpdateParameterGroupResp:
    properties:
      paramGroupId:
        example: "1"
        type: string
    type: object
  message.UpdateProductsInfoReq:
    properties:
      products:
        items:
          $ref: '#/definitions/structs.ProductConfigInfo'
        type: array
    required:
    - products
    type: object
  message.UpdateProductsInfoResp:
    type: object
  message.UpdateSystemConfigReq:
    properties:
      configKey:
        type: string
      configValue:
        type: string
    type: object
  message.UpdateSystemConfigResp:
    type: object
  message.UpdateTenantOnBoardingStatusReq:
    properties:
      id:
        type: string
      onBoardingStatus:
        type: string
    type: object
  message.UpdateTenantOnBoardingStatusResp:
    type: object
  message.UpdateTenantProfileReq:
    properties:
      id:
        type: string
      maxCluster:
        type: integer
      maxCpu:
        type: integer
      maxMemory:
        type: integer
      maxStorage:
        type: integer
      name:
        type: string
    type: object
  message.UpdateTenantProfileResp:
    type: object
  message.UpdateUserPasswordReq:
    properties:
      id:
        type: string
      password:
        type: string
    required:
    - password
    type: object
  message.UpdateUserPasswordResp:
    type: object
  message.UpdateUserProfileReq:
    properties:
      email:
        type: string
      nickname:
        type: string
      phone:
        type: string
    type: object
  message.UpdateUserProfileResp:
    type: object
  message.UpdateVendorInfoReq:
    properties:
      vendors:
        items:
          $ref: '#/definitions/structs.VendorConfigInfo'
        type: array
    type: object
  structs.AsyncTaskWorkFlowInfo:
    properties:
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  structs.BackupRecord:
    properties:
      backupMethod:
        type: string
      backupMode:
        type: string
      backupTso:
        type: string
      backupType:
        type: string
      clusterId:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      endTime:
        type: string
      filePath:
        type: string
      id:
        type: string
      size:
        type: number
      startTime:
        type: string
      status:
        type: string
      updateTime:
        type: string
    type: object
  structs.BackupStrategy:
    properties:
      backupDate:
        type: string
      clusterId:
        type: string
      period:
        type: string
    type: object
  structs.CheckReportMeta:
    properties:
      checkID:
        type: string
      createAt:
        type: string
      creator:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  structs.ClusterInfo:
    properties:
      alertUrl:
        example: http://127.0.0.1:9093
        type: string
      backupFileUsage:
        $ref: '#/definitions/structs.Usage'
      clusterId:
        type: string
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      copies:
        description: The number of copies of the newly created cluster data, consistent
          with the number of copies set in PD
        type: integer
      cpuArchitecture:
        description: X86/X86_64/ARM
        type: string
      cpuUsage:
        $ref: '#/definitions/structs.Usage'
      createTime:
        type: string
      deleteTime:
        type: string
      exclusive:
        description: Whether the newly created cluster is exclusive to physical resources,
          when exclusive, a host will only deploy instances of the same cluster, which
          may result in poor resource utilization
        type: boolean
      extranetConnectAddresses:
        items:
          type: string
        type: array
      grafanaUrl:
        example: http://127.0.0.1:3000
        type: string
      intranetConnectAddresses:
        items:
          type: string
        type: array
      maintainStatus:
        type: string
      maintainWindow:
        type: string
      memoryUsage:
        $ref: '#/definitions/structs.Usage'
      region:
        type: string
      relations:
        $ref: '#/definitions/structs.ClusterRelations'
      role:
        type: string
      status:
        type: string
      storageUsage:
        $ref: '#/definitions/structs.Usage'
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
      updateTime:
        type: string
      userId:
        type: string
      vendor:
        description: DBUser                   string    `json:"dbUser"` //The username
          and password for the newly created database cluster, default is the root
          user, which is not valid for Data Migration clusters
        type: string
      whitelist:
        items:
          type: string
        type: array
    type: object
  structs.ClusterInstanceInfo:
    properties:
      addresses:
        items:
          type: string
        type: array
      cpuUsage:
        $ref: '#/definitions/structs.Usage'
      diskId:
        type: string
      hostID:
        type: string
      id:
        type: string
      ioUtil:
        type: number
      iops:
        items:
          type: number
        type: array
      memoryUsage:
        $ref: '#/definitions/structs.Usage'
      ports:
        items:
          type: integer
        type: array
      role:
        type: string
      spec:
        $ref: '#/definitions/structs.ProductSpecInfo'
        description: ??
      status:
        type: string
      storageUsage:
        $ref: '#/definitions/structs.Usage'
      type:
        type: string
      version:
        type: string
      zone:
        $ref: '#/definitions/structs.ZoneFullInfo'
        description: ??
    type: object
  structs.ClusterInstanceParameterValue:
    properties:
      instanceId:
        type: string
      value:
        type: string
    type: object
  structs.ClusterLogItem:
    properties:
      clusterId:
        example: abc
        type: string
      ext:
        additionalProperties: true
        type: object
      id:
        example: zvadfwf
        type: string
      index:
        example: em-tidb-cluster-2021.09.23
        type: string
      ip:
        example: 127.0.0.1
        type: string
      level:
        example: warn
        type: string
      message:
        example: tidb log
        type: string
      module:
        example: tidb
        type: string
      sourceLine:
        example: main.go:210
        type: string
      timestamp:
        example: "2021-09-23 14:23:10"
        type: string
    type: object
  structs.ClusterParameterInfo:
    properties:
      category:
        example: basic
        type: string
      createTime:
        example: 1636698675
        type: integer
      defaultValue:
        example: "1"
        type: string
      description:
        example: binlog cache size
        type: string
      hasApply:
        enum:
        - 0
        - 1
        example: 1
        type: integer
      hasReboot:
        enum:
        - 0
        - 1
        example: 0
        type: integer
      instanceType:
        example: tidb
        type: string
      name:
        example: binlog_size
        type: string
      note:
        example: binlog cache size
        type: string
      paramId:
        example: "1"
        type: string
      range:
        example:
        - "1"
        - ' 1000'
        items:
          type: string
        type: array
      rangeType:
        enum:
        - 0
        - 1
        - 2
        example: 1
        type: integer
      readOnly:
        enum:
        - 0
        - 1
        example: 0
        type: integer
      realValue:
        $ref: '#/definitions/structs.ParameterRealValue'
      systemVariable:
        example: log.log_level
        type: string
      type:
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        example: 0
        type: integer
      unit:
        example: MB
        type: string
      unitOptions:
        example:
        - KB
        - MB
        - GB
        items:
          type: string
        type: array
      updateSource:
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        example: 0
        type: integer
      updateTime:
        example: 1636698675
        type: integer
    type: object
  structs.ClusterParameterSampleInfo:
    properties:
      paramId:
        example: "1"
        type: string
      realValue:
        $ref: '#/definitions/structs.ParameterRealValue'
    required:
    - paramId
    - realValue
    type: object
  structs.ClusterRelations:
    properties:
      masters:
        items:
          type: string
        type: array
      slaves:
        items:
          type: string
        type: array
    type: object
  structs.ClusterResourceInfo:
    properties:
      instanceResource:
        items:
          $ref: '#/definitions/structs.ClusterResourceParameterCompute'
        type: array
      requestResourceMode:
        default: SpecificZone
        enum:
        - SpecificZone
        - SpecificHost
        type: string
    type: object
  structs.ClusterResourceParameterCompute:
    properties:
      componentType:
        description: TiDB/TiKV/PD/TiFlash/CDC/DM-Master/DM-Worker
        type: string
      resource:
        items:
          $ref: '#/definitions/structs.ClusterResourceParameterComputeResource'
        type: array
      totalNodeCount:
        type: integer
    type: object
  structs.ClusterResourceParameterComputeResource:
    properties:
      count:
        type: integer
      diskCapacity:
        type: integer
      diskId:
        type: string
      diskType:
        description: NVMeSSD/SSD/SATA
        type: string
      hostIp:
        type: string
      specCode:
        description: 4C8G/8C16G ?
        type: string
      zoneCode:
        type: string
    type: object
  structs.ClusterUpgradeVersionConfigItem:
    properties:
      instanceType:
        example: pd-server
        type: string
      name:
        example: max-merge-region-size
        type: string
      paramId:
        example: "1"
        type: string
      value:
        example: "20"
        type: string
    required:
    - instanceType
    - name
    - paramId
    - value
    type: object
  structs.ComponentInstanceResourceSpec:
    properties:
      cpu:
        type: integer
      diskType:
        description: 'eg: NVMeSSD/SSD/SATA'
        type: string
      id:
        description: ID of the instance resource specification
        type: string
      memory:
        description: The amount of memory occupied by the instance, in GiB
        type: integer
      name:
        description: 'Name of the instance resource specification,eg: TiDB.c1.large'
        type: string
      zoneId:
        type: string
      zoneName:
        type: string
    type: object
  structs.ComponentInstanceZoneWithSpecs:
    properties:
      specs:
        items:
          $ref: '#/definitions/structs.ComponentInstanceResourceSpec'
        type: array
      zoneId:
        type: string
      zoneName:
        type: string
    type: object
  structs.DataImportExportRecordInfo:
    properties:
      clusterId:
        type: string
      comment:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      endTime:
        type: string
      filePath:
        type: string
      recordId:
        type: string
      startTime:
        type: string
      status:
        type: string
      storageType:
        type: string
      transportType:
        type: string
      updateTime:
        type: string
      zipName:
        type: string
    type: object
  structs.DiskInfo:
    properties:
      capacity:
        description: 'Disk size, Unit: GB'
        type: integer
      diskId:
        type: string
      hostId:
        type: string
      name:
        description: '[sda/sdb/nvmep0...]'
        type: string
      path:
        description: 'Disk mount path: [/data1]'
        type: string
      status:
        description: Disk Status, 0 for available, 1 for inused
        type: string
      type:
        description: 'Disk type: [nvme-ssd/ssd/sata]'
        type: string
    type: object
  structs.HierarchyTreeNode:
    properties:
      code:
        type: string
      name:
        type: string
      prefix:
        type: string
      subNodes:
        items:
          $ref: '#/definitions/structs.HierarchyTreeNode'
        type: array
    type: object
  structs.HostInfo:
    properties:
      arch:
        description: x86 or arm64
        type: string
      availableDiskCount:
        description: available disk count which could be used for allocation
        type: integer
      az:
        type: string
      clusterType:
        description: What cluster is the host used for? [database/data migration]
        type: string
      cpuCores:
        description: Host cpu cores spec, init while importing
        type: integer
      createTime:
        type: integer
      diskType:
        description: Disk type of this host [SATA/SSD/NVMeSSD]
        type: string
      disks:
        items:
          $ref: '#/definitions/structs.DiskInfo'
        type: array
      hostId:
        type: string
      hostName:
        type: string
      instances:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      ip:
        type: string
      kernel:
        type: string
      loadStat:
        description: Host load stat, Loadless, Inused, Exhaust, etc
        type: string
      memory:
        description: Host memory, init while importing
        type: integer
      nic:
        description: 'Host network type: 1GE or 10GE'
        type: string
      os:
        type: string
      passwd:
        type: string
      purpose:
        description: What Purpose is the host used for? [compute/storage/schedule]
        type: string
      rack:
        type: string
      region:
        type: string
      reserved:
        description: Whether this host is reserved - will not be allocated
        type: boolean
      spec:
        description: Host Spec, init while importing
        type: string
      sshPort:
        type: integer
      status:
        description: Host status, Online, Offline, Failed, Deleted, etc
        type: string
      sysLabels:
        items:
          type: string
        type: array
      traits:
        description: Traits of labels
        type: integer
      updateTime:
        type: integer
      usedCpuCores:
        description: Unused CpuCore, used for allocation
        type: integer
      usedMemory:
        description: Unused memory size, Unit:GiB, used for allocation
        type: integer
      userName:
        type: string
      vendor:
        type: string
    type: object
  structs.Index:
    properties:
      description:
        type: string
      name:
        type: string
      unit:
        type: string
      value:
        type: object
    type: object
  structs.ParameterGroupParameterInfo:
    properties:
      category:
        example: basic
        type: string
      createTime:
        example: 1636698675
        type: integer
      defaultValue:
        example: "1"
        type: string
      description:
        example: binlog cache size
        type: string
      hasApply:
        enum:
        - 0
        - 1
        example: 1
        type: integer
      hasReboot:
        enum:
        - 0
        - 1
        example: 0
        type: integer
      instanceType:
        example: tidb
        type: string
      name:
        example: binlog_size
        type: string
      note:
        example: binlog cache size
        type: string
      paramId:
        example: "1"
        type: string
      range:
        example:
        - "1"
        - ' 1000'
        items:
          type: string
        type: array
      rangeType:
        enum:
        - 0
        - 1
        - 2
        example: 1
        type: integer
      readOnly:
        enum:
        - 0
        - 1
        example: 0
        type: integer
      systemVariable:
        example: log.log_level
        type: string
      type:
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        example: 0
        type: integer
      unit:
        example: MB
        type: string
      unitOptions:
        example:
        - KB
        - MB
        - GB
        items:
          type: string
        type: array
      updateSource:
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        example: 0
        type: integer
      updateTime:
        example: 1636698675
        type: integer
    type: object
  structs.ParameterGroupParameterSampleInfo:
    properties:
      defaultValue:
        example: "1"
        type: string
      note:
        example: binlog cache size
        type: string
      paramId:
        example: "123"
        type: string
    required:
    - defaultValue
    - paramId
    type: object
  structs.ParameterRealValue:
    properties:
      clusterValue:
        type: string
      instanceValue:
        items:
          $ref: '#/definitions/structs.ClusterInstanceParameterValue'
        type: array
    type: object
  structs.Product:
    properties:
      arch:
        type: string
      id:
        description: The ID of the product
        type: string
      internal:
        type: integer
      name:
        description: the Name of the product
        type: string
      regionId:
        type: string
      regionName:
        type: string
      status:
        type: string
      vendorId:
        description: the vendor ID of the vendor, e.go AWS
        type: string
      vendorName:
        description: the Vendor name of the vendor, e.g AWS/Aliyun
        type: string
      version:
        type: string
    type: object
  structs.ProductComponentPropertyWithZones:
    properties:
      availableZones:
        description: Information on the specifications of the resources online for
          the running of product components,organized by different Zone
        items:
          $ref: '#/definitions/structs.ComponentInstanceZoneWithSpecs'
        type: array
      endPort:
        type: integer
      id:
        description: ID of the product component, globally unique
        type: string
      maxInstance:
        description: Maximum number of instances when the product component is running,
          e.g. PD can run up to 7 instances, other components have no upper limit
        type: integer
      maxPort:
        type: integer
      minInstance:
        description: Minimum number of instances of product components at runtime,
          e.g. at least 1 instance of PD, at least 3 instances of TiKV
        type: integer
      name:
        description: Name of the product component, globally unique
        type: string
      purposeType:
        description: The type of resources required by the product component at runtime,
          e.g. storage class
        type: string
      startPort:
        type: integer
      suggestedInstancesCount:
        items:
          type: integer
        type: array
    type: object
  structs.ProductConfigInfo:
    properties:
      components:
        items:
          $ref: '#/definitions/structs.ProductComponentPropertyWithZones'
        type: array
      productId:
        type: string
      productName:
        type: string
      versions:
        items:
          $ref: '#/definitions/structs.SpecificVersionProduct'
        type: array
    type: object
  structs.ProductDetail:
    properties:
      id:
        description: The ID of the product consists of the product ID
        type: string
      name:
        description: The name of the product consists of the product name and the
          version
        type: string
      versions:
        additionalProperties:
          $ref: '#/definitions/structs.ProductVersion'
        description: Organize product information by version
        type: object
    type: object
  structs.ProductSpecInfo:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  structs.ProductUpgradePathItem:
    properties:
      upgradeType:
        enum:
        - in-place
        - migration
        type: string
      upgradeWays:
        example:
        - offline
        - online
        items:
          type: string
        type: array
      versions:
        example:
        - v5.3.0
        - v5.4.0
        items:
          type: string
        type: array
    required:
    - upgradeType
    - versions
    type: object
  structs.ProductUpgradeVersionConfigDiffItem:
    properties:
      category:
        example: basic
        type: string
      currentValue:
        example: "20"
        type: string
      description:
        example: desc for max-merge-region-size
        type: string
      instanceType:
        example: pd-server
        type: string
      name:
        example: max-merge-region-size
        type: string
      paramId:
        example: "1"
        type: string
      range:
        example:
        - "1"
        - ' 1000'
        items:
          type: string
        type: array
      rangeType:
        enum:
        - 0
        - 1
        - 2
        example: 1
        type: integer
      suggestValue:
        example: "30"
        type: string
      type:
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        example: 0
        type: integer
      unit:
        example: MB
        type: string
      unitOptions:
        example:
        - KB
        - MB
        - GB
        items:
          type: string
        type: array
    required:
    - category
    - currentValue
    - instanceType
    - name
    - paramId
    - range
    - rangeType
    - suggestValue
    - type
    - unit
    - unitOptions
    type: object
  structs.ProductVersion:
    properties:
      arch:
        additionalProperties:
          items:
            $ref: '#/definitions/structs.ProductComponentPropertyWithZones'
          type: array
        description: Arch information of the product, e.g. X86/X86_64
        type: object
      version:
        description: Version information of the product, e.g. v5.0.0
        type: string
    type: object
  structs.ProductWithVersions:
    properties:
      productId:
        type: string
      productName:
        type: string
      versions:
        items:
          $ref: '#/definitions/structs.SpecificVersionProduct'
        type: array
    type: object
  structs.RbacPermission:
    properties:
      action:
        type: string
      resource:
        type: string
    type: object
  structs.RegionConfigInfo:
    properties:
      id:
        type: string
      name:
        type: string
      zones:
        items:
          $ref: '#/definitions/structs.ZoneInfo'
        type: array
    type: object
  structs.RegionInfo:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  structs.ResourceStockCheckResult:
    properties:
      componentName:
        type: string
      componentType:
        type: string
      count:
        type: integer
      diskCapacity:
        type: integer
      diskId:
        type: string
      diskType:
        description: NVMeSSD/SSD/SATA
        type: string
      enough:
        type: boolean
      hostIp:
        type: string
      specCode:
        description: 4C8G/8C16G ?
        type: string
      zoneCode:
        type: string
    type: object
  structs.SpecInfo:
    properties:
      cpu:
        type: integer
      diskType:
        description: 'eg: NVMeSSD/SSD/SATA'
        type: string
      id:
        description: ID of the resource specification
        type: string
      memory:
        description: The amount of memory occupied by the instance, in GiB
        type: integer
      name:
        description: 'Name of the resource specification,eg: TiDB.c1.large'
        type: string
      purposeType:
        description: eg:Compute/Storage/Schedule
        type: string
    type: object
  structs.SpecificVersionProduct:
    properties:
      arch:
        type: string
      productId:
        type: string
      version:
        type: string
    type: object
  structs.Stocks:
    properties:
      freeCpuCores:
        type: integer
      freeDiskCapacity:
        type: integer
      freeDiskCount:
        type: integer
      freeHostCount:
        type: integer
      freeMemory:
        type: integer
      zone:
        type: string
    type: object
  structs.SystemInfo:
    properties:
      currentVersionId:
        type: string
      lastVersionId:
        type: string
      productComponentsInitialized:
        type: boolean
      productVersionsInitialized:
        type: boolean
      state:
        type: string
      supportedProducts:
        items:
          $ref: '#/definitions/structs.ProductWithVersions'
        type: array
      supportedVendors:
        items:
          $ref: '#/definitions/structs.VendorInfo'
        type: array
      systemLogo:
        type: string
      systemName:
        type: string
      vendorSpecsInitialized:
        type: boolean
      vendorZonesInitialized:
        type: boolean
    type: object
  structs.SystemVersionInfo:
    properties:
      desc:
        type: string
      releaseNote:
        type: string
      versionId:
        type: string
    type: object
  structs.TenantInfo:
    properties:
      createAt:
        type: string
      creator:
        type: string
      id:
        type: string
      maxCluster:
        type: integer
      maxCpu:
        type: integer
      maxMemory:
        type: integer
      maxStorage:
        type: integer
      name:
        type: string
      onBoardingStatus:
        type: string
      status:
        type: string
      updateAt:
        type: string
    type: object
  structs.Usage:
    properties:
      total:
        type: number
      usageRate:
        type: number
      used:
        type: number
    type: object
  structs.UserInfo:
    properties:
      createAt:
        type: string
      creator:
        type: string
      defaultTenantId:
        type: string
      email:
        type: string
      id:
        type: string
      names:
        items:
          type: string
        type: array
      nickname:
        type: string
      phone:
        type: string
      status:
        type: string
      tenantIds:
        items:
          type: string
        type: array
      updateAt:
        type: string
    type: object
  structs.VendorConfigInfo:
    properties:
      id:
        description: The value of the VendorID is similar to AWS
        type: string
      name:
        description: The value of the Name is similar to AWS
        type: string
      regions:
        items:
          $ref: '#/definitions/structs.RegionConfigInfo'
        type: array
      specs:
        items:
          $ref: '#/definitions/structs.SpecInfo'
        type: array
    type: object
  structs.VendorInfo:
    properties:
      id:
        description: The value of the VendorID is similar to AWS
        type: string
      name:
        description: The value of the Name is similar to AWS
        type: string
    type: object
  structs.VendorWithRegion:
    properties:
      id:
        description: The value of the VendorID is similar to AWS
        type: string
      name:
        description: The value of the Name is similar to AWS
        type: string
      regions:
        additionalProperties:
          $ref: '#/definitions/structs.RegionInfo'
        type: object
    type: object
  structs.WorkFlowInfo:
    properties:
      bizId:
        type: string
      bizType:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        enum:
        - Initializing
        - Processing
        - Finished
        - Error
        - Canceled
        type: string
      updateTime:
        type: string
    type: object
  structs.WorkFlowNodeInfo:
    properties:
      endTime:
        type: string
      id:
        type: string
      name:
        type: string
      parameters:
        type: string
      result:
        type: string
      startTime:
        type: string
      status:
        enum:
        - Initializing
        - Processing
        - Finished
        - Error
        - Canceled
        type: string
    type: object
  structs.ZoneFullInfo:
    properties:
      comment:
        type: string
      regionId:
        description: The value of the RegionID is similar to CN-HANGZHOU
        type: string
      regionName:
        description: The value of the Name is similar to East China(Hangzhou)
        type: string
      vendorId:
        description: The value of the VendorID is similar to AWS
        type: string
      vendorName:
        description: The value of the Name is similar to AWS
        type: string
      zoneId:
        description: The value of the ZoneID is similar to CN-HANGZHOU-H
        type: string
      zoneName:
        description: The value of the Name is similar to Hangzhou(H)
        type: string
    type: object
  structs.ZoneInfo:
    properties:
      comment:
        type: string
      zoneId:
        description: The value of the ZoneID is similar to CN-HANGZHOU-H
        type: string
      zoneName:
        description: The value of the Name is similar to Hangzhou(H)
        type: string
    type: object
host: localhost:4116
info:
  contact:
    email: zhangpeijin@pingcap.com
    name: zhangpeijin
  description: EM UI API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: EM UI API
  version: "1.0"
paths:
  /backups/:
    get:
      consumes:
      - application/json
      description: query backup records of a cluster
      parameters:
      - in: query
        name: backupId
        type: string
      - in: query
        name: clusterId
        type: string
      - in: query
        name: endTime
        type: integer
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - in: query
        name: startTime
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryBackupRecordsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query backup records of a cluster
      tags:
      - cluster backup
    post:
      consumes:
      - application/json
      description: backup
      parameters:
      - description: backup request
        in: body
        name: backupReq
        required: true
        schema:
          $ref: '#/definitions/cluster.BackupClusterDataReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.BackupClusterDataResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: backup
      tags:
      - cluster backup
  /backups/{backupId}:
    delete:
      consumes:
      - application/json
      description: delete backup record
      parameters:
      - description: backup record id
        in: path
        name: backupId
        required: true
        type: integer
      - description: backup delete request
        in: body
        name: backupDeleteReq
        required: true
        schema:
          $ref: '#/definitions/cluster.DeleteBackupDataReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.DeleteBackupDataResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete backup record
      tags:
      - cluster backup
  /backups/cancel:
    post:
      consumes:
      - application/json
      description: cancel backup
      parameters:
      - description: cancel backup request
        in: body
        name: backupReq
        required: true
        schema:
          $ref: '#/definitions/cluster.CancelBackupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.CancelBackupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: cancel backup
      tags:
      - cancel cluster backup
  /changefeeds/:
    get:
      consumes:
      - application/json
      description: query change feed tasks of a cluster
      parameters:
      - example: CLUSTER_ID_IN_TIUNIMANAGER__22
        in: query
        name: clusterId
        required: true
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/cluster.QueryChangeFeedTaskResp'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query change feed tasks of a cluster
      tags:
      - change feed
    post:
      consumes:
      - application/json
      description: create a change feed task
      parameters:
      - description: change feed task request
        in: body
        name: changeFeedTask
        required: true
        schema:
          $ref: '#/definitions/cluster.CreateChangeFeedTaskReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.CreateChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: create a change feed task
      tags:
      - change feed
  /changefeeds/{changeFeedTaskId}:
    delete:
      consumes:
      - application/json
      description: delete a change feed task
      parameters:
      - description: changeFeedTaskId
        in: path
        name: changeFeedTaskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.DeleteChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete a change feed task
      tags:
      - change feed
  /changefeeds/{changeFeedTaskId}/:
    get:
      consumes:
      - application/json
      description: get change feed detail
      parameters:
      - description: changeFeedTaskId
        in: path
        name: changeFeedTaskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.DetailChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: get change feed detail
      tags:
      - change feed
  /changefeeds/{changeFeedTaskId}/pause:
    post:
      consumes:
      - application/json
      description: pause a change feed task
      parameters:
      - description: changeFeedTaskId
        in: path
        name: changeFeedTaskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.PauseChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: pause a change feed task
      tags:
      - change feed
  /changefeeds/{changeFeedTaskId}/resume:
    post:
      consumes:
      - application/json
      description: resume a change feed task
      parameters:
      - description: changeFeedTaskId
        in: path
        name: changeFeedTaskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.ResumeChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: resume a change feed task
      tags:
      - change feed
  /changefeeds/{changeFeedTaskId}/update:
    post:
      consumes:
      - application/json
      description: resume a change feed
      parameters:
      - description: changeFeedTaskId
        in: path
        name: changeFeedTaskId
        required: true
        type: string
      - description: change feed task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/cluster.UpdateChangeFeedTaskReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.UpdateChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: resume a change feed
      tags:
      - change feed
  /clusters/:
    get:
      consumes:
      - application/json
      description: query clusters
      parameters:
      - in: query
        name: clusterId
        type: string
      - in: query
        name: clusterName
        type: string
      - in: query
        name: clusterStatus
        type: string
      - in: query
        name: clusterTag
        type: string
      - in: query
        name: clusterType
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query clusters
      tags:
      - cluster
    post:
      consumes:
      - application/json
      description: create a cluster
      parameters:
      - description: create request
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/cluster.CreateClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.CreateClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: create a cluster
      tags:
      - cluster
  /clusters/{clusterId}:
    delete:
      consumes:
      - application/json
      description: delete cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      - description: delete request
        in: body
        name: deleteReq
        schema:
          $ref: '#/definitions/cluster.DeleteClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.DeleteClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete cluster
      tags:
      - cluster
    get:
      consumes:
      - application/json
      description: show details of a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryClusterDetailResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show details of a cluster
      tags:
      - cluster
  /clusters/{clusterId}/dashboard:
    get:
      consumes:
      - application/json
      description: dashboard
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.GetDashboardInfoResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: dashboard
      tags:
      - cluster
  /clusters/{clusterId}/log:
    get:
      consumes:
      - application/json
      description: query cluster log
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      - example: 1638331200
        in: query
        name: endTime
        type: integer
      - example: 127.0.0.1
        in: query
        name: ip
        type: string
      - example: warn
        in: query
        name: level
        type: string
      - example: tidb log
        in: query
        name: message
        type: string
      - example: tidb
        in: query
        name: module
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - example: 1630468800
        in: query
        name: startTime
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryClusterLogResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query cluster log
      tags:
      - cluster log
  /clusters/{clusterId}/monitor:
    get:
      consumes:
      - application/json
      description: describe monitoring link
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryMonitorInfoResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: describe monitoring link
      tags:
      - cluster
  /clusters/{clusterId}/params:
    get:
      consumes:
      - application/json
      description: query parameters of a cluster
      parameters:
      - in: query
        name: instanceType
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - in: query
        name: paramName
        type: string
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryClusterParametersResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query parameters of a cluster
      tags:
      - cluster parameters
    put:
      consumes:
      - application/json
      description: submit parameters
      parameters:
      - description: update params request
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/cluster.UpdateClusterParametersReq'
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.UpdateClusterParametersResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: submit parameters
      tags:
      - cluster parameters
  /clusters/{clusterId}/params/inspect:
    post:
      consumes:
      - application/json
      description: inspect parameters
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      - description: inspect params request
        in: body
        name: inspectReq
        required: true
        schema:
          $ref: '#/definitions/cluster.InspectParametersReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.InspectParametersResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: inspect parameters
      tags:
      - cluster parameters
  /clusters/{clusterId}/preview-scale-out:
    post:
      consumes:
      - application/json
      description: preview cluster topology and capability
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      - description: scale out request
        in: body
        name: scaleOutReq
        required: true
        schema:
          $ref: '#/definitions/cluster.ScaleOutClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.PreviewClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: preview cluster topology and capability
      tags:
      - cluster
  /clusters/{clusterId}/restart:
    post:
      consumes:
      - application/json
      description: restart a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.RestartClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: restart a cluster
      tags:
      - cluster
  /clusters/{clusterId}/scale-in:
    post:
      consumes:
      - application/json
      description: scale in a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      - description: scale in request
        in: body
        name: scaleInReq
        required: true
        schema:
          $ref: '#/definitions/cluster.ScaleInClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.ScaleInClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: scale in a cluster
      tags:
      - cluster
  /clusters/{clusterId}/scale-out:
    post:
      consumes:
      - application/json
      description: scale out a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      - description: scale out request
        in: body
        name: scaleOutReq
        required: true
        schema:
          $ref: '#/definitions/cluster.ScaleOutClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.ScaleOutClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: scale out a cluster
      tags:
      - cluster
  /clusters/{clusterId}/stop:
    post:
      consumes:
      - application/json
      description: stop a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.StopClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: stop a cluster
      tags:
      - cluster
  /clusters/{clusterId}/strategy:
    get:
      consumes:
      - application/json
      description: show the backup strategy of a cluster
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.GetBackupStrategyResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show the backup strategy of a cluster
      tags:
      - cluster backup
    put:
      consumes:
      - application/json
      description: save the backup strategy of a cluster
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      - description: backup strategy request
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/cluster.SaveBackupStrategyReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.SaveBackupStrategyResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: save the backup strategy of a cluster
      tags:
      - cluster backup
  /clusters/{clusterId}/upgrade:
    post:
      consumes:
      - application/json
      description: request for upgrade TiDB cluster
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      - description: upgrade request
        in: body
        name: upgradeReq
        required: true
        schema:
          $ref: '#/definitions/cluster.UpgradeClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.UpgradeClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: request for upgrade TiDB cluster
      tags:
      - cluster upgrade
  /clusters/{clusterId}/upgrade/diff:
    get:
      consumes:
      - application/json
      description: query config diff between current cluster and target upgrade version
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      - example: v5.0.0
        in: query
        name: targetVersion
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryUpgradeVersionDiffInfoResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query config diff between current cluster and target upgrade version
      tags:
      - cluster upgrade
  /clusters/{clusterId}/upgrade/path:
    get:
      consumes:
      - application/json
      description: query upgrade path for given cluster id
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryUpgradePathRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query upgrade path for given cluster id
      tags:
      - cluster upgrade
  /clusters/clone:
    post:
      consumes:
      - application/json
      description: clone a cluster
      parameters:
      - description: clone cluster request
        in: body
        name: cloneClusterReq
        required: true
        schema:
          $ref: '#/definitions/cluster.CloneClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.CloneClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: clone a cluster
      tags:
      - cluster
  /clusters/export:
    post:
      consumes:
      - application/json
      description: export
      parameters:
      - description: cluster info for data export
        in: body
        name: dataExport
        required: true
        schema:
          $ref: '#/definitions/message.DataExportReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DataExportResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: export data from tidb cluster
      tags:
      - cluster export
  /clusters/import:
    post:
      consumes:
      - application/json
      description: import
      parameters:
      - description: cluster info for import data
        in: body
        name: dataImport
        required: true
        schema:
          $ref: '#/definitions/message.DataImportReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DataImportResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: import data to tidb cluster
      tags:
      - cluster import
  /clusters/preview:
    post:
      consumes:
      - application/json
      description: preview cluster topology and capability
      parameters:
      - description: preview request
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/cluster.CreateClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.PreviewClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: preview cluster topology and capability
      tags:
      - cluster
  /clusters/restore:
    post:
      consumes:
      - application/json
      description: restore a new cluster by backup record
      parameters:
      - description: restore request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/cluster.RestoreNewClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.RestoreNewClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: restore a new cluster by backup record
      tags:
      - cluster
  /clusters/switchover:
    post:
      consumes:
      - application/json
      description: master/slave switchover
      parameters:
      - description: switchover request
        in: body
        name: masterSlaveClusterSwitchoverReq
        required: true
        schema:
          $ref: '#/definitions/cluster.MasterSlaveClusterSwitchoverReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.MasterSlaveClusterSwitchoverResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: master/slave switchover
      tags:
      - switchover
  /clusters/takeover:
    post:
      consumes:
      - application/json
      description: takeover a cluster
      parameters:
      - description: takeover request
        in: body
        name: takeoverReq
        required: true
        schema:
          $ref: '#/definitions/cluster.TakeoverClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.TakeoverClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: takeover a cluster
      tags:
      - cluster
  /clusters/transport:
    get:
      consumes:
      - application/json
      description: query records of import and export
      parameters:
      - in: query
        name: clusterId
        type: string
      - in: query
        name: endTime
        type: integer
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - in: query
        name: reImport
        type: boolean
      - in: query
        name: recordId
        type: string
      - in: query
        name: startTime
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryDataImportExportRecordsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query records of import and export
      tags:
      - cluster data transport
  /clusters/transport/{recordId}:
    delete:
      consumes:
      - application/json
      description: delete data transport record
      parameters:
      - description: data transport recordId
        in: path
        name: recordId
        required: true
        type: integer
      - description: data transport record delete request
        in: body
        name: DataTransportDeleteReq
        required: true
        schema:
          $ref: '#/definitions/message.DeleteImportExportRecordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DeleteImportExportRecordResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete data transport record
      tags:
      - cluster data transport
  /config/:
    get:
      consumes:
      - application/json
      description: get system config
      parameters:
      - in: query
        name: configKey
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.GetSystemConfigResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: get system config
      tags:
      - get system config
  /config/update:
    post:
      consumes:
      - application/json
      description: UpdateSystemConfig
      parameters:
      - description: system config for update
        in: body
        name: systemConfig
        required: true
        schema:
          $ref: '#/definitions/message.UpdateSystemConfigReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UpdateSystemConfigResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: update system config
      tags:
      - UpdateSystemConfig
  /downstream/:
    delete:
      consumes:
      - application/json
      description: show display config
      parameters:
      - description: tidb
        in: body
        name: tidb
        required: true
        schema:
          $ref: '#/definitions/cluster.TiDBDownstream'
      - description: mysql
        in: body
        name: mysql
        required: true
        schema:
          $ref: '#/definitions/cluster.MysqlDownstream'
      - description: kafka
        in: body
        name: kafka
        required: true
        schema:
          $ref: '#/definitions/cluster.KafkaDownstream'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: unused, just display downstream config
      tags:
      - change feed
  /metadata/{clusterId}/:
    delete:
      consumes:
      - application/json
      description: for handling exceptions only
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      - description: delete request
        in: body
        name: deleteReq
        schema:
          $ref: '#/definitions/cluster.DeleteMetadataPhysicallyReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.DeleteMetadataPhysicallyResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete cluster metadata in this system physically, but keep the real
        cluster alive
      tags:
      - cluster
  /param-groups/:
    get:
      consumes:
      - application/json
      description: query parameter group
      parameters:
      - example: 8C16G
        in: query
        name: clusterSpec
        type: string
      - example: v5.0
        in: query
        name: clusterVersion
        type: string
      - enum:
        - 0
        - 1
        - 2
        example: 0
        in: query
        name: dbType
        type: integer
      - enum:
        - 0
        - 1
        - 2
        example: 0
        in: query
        name: hasDefault
        type: integer
      - example: false
        in: query
        name: hasDetail
        type: boolean
      - example: default
        in: query
        name: name
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/message.QueryParameterGroupResp'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query parameter group
      tags:
      - parameter group
    post:
      consumes:
      - application/json
      description: create a parameter group
      parameters:
      - description: create request
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/message.CreateParameterGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.CreateParameterGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: create a parameter group
      tags:
      - parameter group
  /param-groups/{paramGroupId}:
    delete:
      consumes:
      - application/json
      description: delete a parameter group
      parameters:
      - description: parameter group id
        in: path
        name: paramGroupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DeleteParameterGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete a parameter group
      tags:
      - parameter group
    get:
      consumes:
      - application/json
      description: show details of a parameter group
      parameters:
      - description: parameter group id
        in: path
        name: paramGroupId
        required: true
        type: string
      - in: query
        name: instanceType
        type: string
      - in: query
        name: paramName
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DetailParameterGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show details of a parameter group
      tags:
      - parameter group
    put:
      consumes:
      - application/json
      description: update a parameter group
      parameters:
      - description: parameter group id
        in: path
        name: paramGroupId
        required: true
        type: string
      - description: update parameter group request
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/message.UpdateParameterGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UpdateParameterGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: update a parameter group
      tags:
      - parameter group
  /param-groups/{paramGroupId}/apply:
    post:
      consumes:
      - application/json
      description: apply a parameter group
      parameters:
      - description: parameter group id
        in: path
        name: paramGroupId
        required: true
        type: string
      - description: apply parameter group request
        in: body
        name: applyReq
        required: true
        schema:
          $ref: '#/definitions/message.ApplyParameterGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.ApplyParameterGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: apply a parameter group
      tags:
      - parameter group
  /param-groups/{paramGroupId}/copy:
    post:
      consumes:
      - application/json
      description: copy a parameter group
      parameters:
      - description: parameter group id
        in: path
        name: paramGroupId
        required: true
        type: string
      - description: copy parameter group request
        in: body
        name: copyReq
        required: true
        schema:
          $ref: '#/definitions/message.CopyParameterGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.CopyParameterGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: copy a parameter group
      tags:
      - parameter group
  /platform/check:
    post:
      consumes:
      - application/json
      description: platform check
      parameters:
      - description: check platform
        in: body
        name: checkPlatformReq
        schema:
          $ref: '#/definitions/message.CheckPlatformReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/message.CheckPlatformRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: platform check
      tags:
      - platform
  /platform/check/{clusterId}:
    post:
      consumes:
      - application/json
      description: platform check cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/message.CheckClusterRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: platform check cluster
      tags:
      - platform
  /platform/log:
    get:
      consumes:
      - application/json
      description: query platform log
      parameters:
      - example: 1638331200
        in: query
        name: endTime
        type: integer
      - example: warn
        in: query
        name: level
        type: string
      - example: some do something
        in: query
        name: message
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - example: 1630468800
        in: query
        name: startTime
        type: integer
      - example: UNe7K1uERa-2fwSxGJ6CFQ
        in: query
        name: traceId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryPlatformLogResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query platform log
      tags:
      - platform log
  /platform/report/{checkId}:
    get:
      consumes:
      - application/json
      description: get check report based on checkId
      parameters:
      - description: check id
        in: path
        name: checkId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/message.GetCheckReportRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: get check report based on checkId
      tags:
      - platform
  /platform/reports:
    get:
      consumes:
      - application/json
      description: get query check reports
      parameters:
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryCheckReportsRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query check reports
      tags:
      - platform
  /products/:
    get:
      consumes:
      - application/json
      description: query products
      parameters:
      - collectionFormat: multi
        description: product id collection
        in: query
        items:
          type: string
        name: productIDs
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryProductsInfoResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query products
      tags:
      - product
    post:
      consumes:
      - application/json
      description: update products
      parameters:
      - description: update products info request parameter
        in: body
        name: UpdateProductsInfoReq
        required: true
        schema:
          $ref: '#/definitions/message.UpdateProductsInfoReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UpdateProductsInfoResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: update products
      tags:
      - product
  /products/available:
    get:
      consumes:
      - application/json
      description: queries all products' information
      parameters:
      - in: query
        name: internalProduct
        type: integer
      - in: query
        name: status
        type: string
      - in: query
        name: vendorId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryAvailableProductsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: queries all products' information
      tags:
      - product
  /products/detail:
    get:
      consumes:
      - application/json
      description: query all product detail
      parameters:
      - in: query
        name: internalProduct
        type: integer
      - in: query
        name: productId
        type: string
      - in: query
        name: regionId
        type: string
      - in: query
        name: status
        type: string
      - in: query
        name: vendorId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryProductDetailResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query all product detail
      tags:
      - product
  /rbac/permission/{userId}:
    get:
      consumes:
      - application/json
      description: QueryPermissionsForUser
      parameters:
      - description: rbac userId
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryPermissionsForUserResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query permissions of user
      tags:
      - rbac QueryPermissionsForUser
  /rbac/permission/add:
    post:
      consumes:
      - application/json
      description: AddPermissionsForRole
      parameters:
      - description: AddPermissionsForRole request
        in: body
        name: addPermissionsForRoleReq
        required: true
        schema:
          $ref: '#/definitions/message.AddPermissionsForRoleReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.AddPermissionsForRoleResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: add permissions for role
      tags:
      - rbac AddPermissionsForRole
  /rbac/permission/check:
    post:
      consumes:
      - application/json
      description: CheckPermissionForUser
      parameters:
      - description: CheckPermissionForUser request
        in: body
        name: checkPermissionForUserReq
        required: true
        schema:
          $ref: '#/definitions/message.CheckPermissionForUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.CheckPermissionForUserResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: check permissions of user
      tags:
      - rbac CheckPermissionForUser
  /rbac/permission/delete:
    delete:
      consumes:
      - application/json
      description: DeletePermissionsForRole
      parameters:
      - description: DeleteRoleForUser request
        in: body
        name: deletePermissionsForRoleReq
        required: true
        schema:
          $ref: '#/definitions/message.DeletePermissionsForRoleReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DeletePermissionsForRoleResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete permissions for role
      tags:
      - rbac DeletePermissionsForRole
  /rbac/role/:
    get:
      consumes:
      - application/json
      description: QueryRoles
      parameters:
      - description: rbac role
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryRolesResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query rbac roles
      tags:
      - rbac QueryRoles
    post:
      consumes:
      - application/json
      description: CreateRbacRole
      parameters:
      - description: CreateRole request
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/message.CreateRoleReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.CreateRoleResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: create rbac role
      tags:
      - rbac CreateRbacRole
  /rbac/role/{role}:
    delete:
      consumes:
      - application/json
      description: DeleteRbacRole
      parameters:
      - description: rbac role
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DeleteRoleResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete rbac role
      tags:
      - rbac DeleteRbacRole
  /rbac/role/bind:
    post:
      consumes:
      - application/json
      description: BindRolesForUser
      parameters:
      - description: BindRolesForUser request
        in: body
        name: bindReq
        required: true
        schema:
          $ref: '#/definitions/message.BindRolesForUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.BindRolesForUserResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: bind user with roles
      tags:
      - rbac BindRolesForUser
  /rbac/user_role/delete:
    delete:
      consumes:
      - application/json
      description: UnbindRoleForUser
      parameters:
      - description: UnbindRoleForUser request
        in: body
        name: deleteRoleForUserReq
        required: true
        schema:
          $ref: '#/definitions/message.UnbindRoleForUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UnbindRoleForUserResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: unbind rbac role from user
      tags:
      - rbac UnbindRoleForUser
  /resources/disk:
    put:
      consumes:
      - application/json
      description: update disk information
      parameters:
      - description: update disk information
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/message.UpdateDiskReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UpdateDiskResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Update disk info
      tags:
      - resource
  /resources/disks:
    delete:
      consumes:
      - application/json
      description: remove disks by a list
      parameters:
      - description: list of disk IDs
        in: body
        name: diskIds
        required: true
        schema:
          $ref: '#/definitions/message.DeleteDisksReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DeleteDisksResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Remove a batch of disks
      tags:
      - resource
    post:
      consumes:
      - application/json
      description: add disks to the specified host
      parameters:
      - description: specify the hostId and disks
        in: body
        name: createDisksReq
        required: true
        schema:
          $ref: '#/definitions/message.CreateDisksReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.CreateDisksResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Add disks to the specified host
      tags:
      - resource
  /resources/hierarchy:
    get:
      consumes:
      - application/json
      description: get resource hierarchy-tree
      parameters:
      - in: query
        name: Depth
        type: integer
      - description: '[1:Region, 2:Zone, 3:Rack, 4:Host]'
        in: query
        name: Level
        type: integer
      - in: query
        name: arch
        type: string
      - in: query
        name: clusterType
        type: string
      - in: query
        name: hostDiskType
        type: string
      - in: query
        name: hostId
        type: string
      - in: query
        name: hostName
        type: string
      - in: query
        name: loadStat
        type: string
      - in: query
        name: purpose
        type: string
      - in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.GetHierarchyResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show the resources hierarchy
      tags:
      - resource
  /resources/host:
    put:
      consumes:
      - application/json
      description: update host information
      parameters:
      - description: update host information
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/message.UpdateHostInfoReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UpdateHostInfoResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Update host info
      tags:
      - resource
  /resources/host-reserved:
    put:
      consumes:
      - application/json
      description: update host reserved by a list
      parameters:
      - description: do update in host list
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/message.UpdateHostReservedReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UpdateHostReservedResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Update host reserved
      tags:
      - resource
  /resources/host-status:
    put:
      consumes:
      - application/json
      description: update host status by a list
      parameters:
      - description: do update in host list
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/message.UpdateHostStatusReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UpdateHostStatusResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Update host status
      tags:
      - resource
  /resources/hosts:
    delete:
      consumes:
      - application/json
      description: remove hosts by a list
      parameters:
      - description: list of host IDs
        in: body
        name: hostIds
        required: true
        schema:
          $ref: '#/definitions/message.DeleteHostsReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DeleteHostsResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Remove a batch of hosts
      tags:
      - resource
    get:
      consumes:
      - application/json
      description: get hosts list
      parameters:
      - in: query
        name: arch
        type: string
      - in: query
        name: clusterType
        type: string
      - in: query
        name: hostDiskType
        type: string
      - in: query
        name: hostId
        type: string
      - in: query
        name: hostIp
        type: string
      - in: query
        name: hostName
        type: string
      - in: query
        name: loadStat
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - in: query
        name: purpose
        type: string
      - in: query
        name: rack
        type: string
      - in: query
        name: region
        type: string
      - in: query
        name: status
        type: string
      - in: query
        name: zone
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryHostsResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show all hosts list in EM
      tags:
      - resource
    post:
      consumes:
      - multipart/form-data
      description: import hosts by xlsx file
      parameters:
      - default: "false"
        description: whether hosts are reserved(won't be allocated) after import
        in: formData
        name: hostReserved
        type: string
      - default: "false"
        description: whether to skip host init steps
        in: formData
        name: skipHostInit
        type: string
      - default: "false"
        description: whether to ignore warings in init steps
        in: formData
        name: ignorewarns
        type: string
      - description: hosts information in a xlsx file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.ImportHostsResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Import a batch of hosts to EM
      tags:
      - resource
  /resources/hosts-template:
    get:
      consumes:
      - application/json
      description: get host template xlsx file
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
      security:
      - ApiKeyAuth: []
      summary: Download the host information template file for importing
      tags:
      - resource
  /resources/stocks:
    get:
      consumes:
      - application/json
      description: get resource stocks in specified conditions
      parameters:
      - in: query
        name: arch
        type: string
      - in: query
        name: capacity
        type: integer
      - in: query
        name: clusterType
        type: string
      - in: query
        name: diskStatus
        type: string
      - in: query
        name: diskType
        type: string
      - in: query
        name: hostDiskType
        type: string
      - in: query
        name: hostId
        type: string
      - in: query
        name: hostIp
        type: string
      - in: query
        name: hostName
        type: string
      - in: query
        name: loadStat
        type: string
      - in: query
        name: purpose
        type: string
      - in: query
        name: rack
        type: string
      - in: query
        name: region
        type: string
      - in: query
        name: status
        type: string
      - in: query
        name: zone
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.GetStocksResp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show the resources stocks
      tags:
      - resource
  /system/info:
    get:
      consumes:
      - application/json
      description: get system info
      parameters:
      - in: query
        name: withVersionDetail
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.GetSystemInfoResp'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      summary: get system info
      tags:
      - platform
  /tenant:
    get:
      consumes:
      - application/json
      description: query all tenant profile
      parameters:
      - description: query tenant profile request parameter
        in: body
        name: QueryTenantReq
        required: true
        schema:
          $ref: '#/definitions/message.QueryTenantReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryTenantResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: queries all tenant profile
      tags:
      - user
    post:
      consumes:
      - application/json
      description: update tenant onboarding status
      parameters:
      - description: tenant id
        in: path
        name: tenantId
        required: true
        type: string
      - description: query tenant profile request parameter
        in: body
        name: UpdateTenantOnBoardingStatusReq
        required: true
        schema:
          $ref: '#/definitions/message.UpdateTenantOnBoardingStatusReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UpdateTenantOnBoardingStatusResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: update tenant onboarding status
      tags:
      - user
  /tenant/{tenantId}:
    get:
      consumes:
      - application/json
      description: get tenant profile
      parameters:
      - description: tenant id
        in: path
        name: tenantId
        required: true
        type: string
      - description: get tenant profile request parameter
        in: body
        name: GetTenantReq
        required: true
        schema:
          $ref: '#/definitions/message.GetTenantReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.GetTenantResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: get tenant profile
      tags:
      - user
  /tenants/:
    post:
      consumes:
      - application/json
      description: created tenant
      parameters:
      - description: create tenant request parameter
        in: body
        name: CreateTenantReq
        required: true
        schema:
          $ref: '#/definitions/message.CreateTenantReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.CreateTenantResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: created  tenant
      tags:
      - user
  /tenants/{tenantId}:
    delete:
      consumes:
      - application/json
      description: delete tenant
      parameters:
      - description: tenant id
        in: path
        name: tenantId
        required: true
        type: string
      - description: delete tenant request parameter
        in: body
        name: DeleteTenantReq
        required: true
        schema:
          $ref: '#/definitions/message.DeleteTenantReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DeleteTenantResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete tenant
      tags:
      - user
  /tenants/{tenantId}/update_profile:
    post:
      consumes:
      - application/json
      description: update tenant profile
      parameters:
      - description: tenant id
        in: path
        name: tenantId
        required: true
        type: string
      - description: query tenant profile request parameter
        in: body
        name: UpdateTenantProfileReq
        required: true
        schema:
          $ref: '#/definitions/message.UpdateTenantProfileReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UpdateTenantProfileResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: update tenant profile
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: login info
        in: body
        name: loginInfo
        required: true
        schema:
          $ref: '#/definitions/message.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.LoginResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      summary: login
      tags:
      - platform
  /user/logout:
    post:
      consumes:
      - application/json
      description: logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.LogoutResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: logout
      tags:
      - platform
  /users/:
    get:
      consumes:
      - application/json
      description: query all user profile
      parameters:
      - description: query user profile request parameter
        in: body
        name: queryUserRequest
        required: true
        schema:
          $ref: '#/definitions/message.QueryUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryUserResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: queries all user profile
      tags:
      - platform
    post:
      consumes:
      - application/json
      description: created user
      parameters:
      - description: create user request parameter
        in: body
        name: createUserReq
        required: true
        schema:
          $ref: '#/definitions/message.CreateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.CreateUserResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: created  user
      tags:
      - platform
  /users/{userId}:
    delete:
      consumes:
      - application/json
      description: delete user
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      - description: delete user request parameter
        in: body
        name: deleteUserReq
        required: true
        schema:
          $ref: '#/definitions/message.DeleteUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DeleteUserResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete user
      tags:
      - platform
    get:
      consumes:
      - application/json
      description: get user profile
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.GetUserResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: get user profile
      tags:
      - platform
  /users/{userId}/password:
    post:
      consumes:
      - application/json
      description: update user password
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      - description: query user password request parameter
        in: body
        name: UpdateUserPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/message.UpdateUserPasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UpdateUserPasswordResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: update user password
      tags:
      - platform
  /users/{userId}/update_profile:
    post:
      consumes:
      - application/json
      description: update user profile
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      - description: query user profile request parameter
        in: body
        name: updateUserProfileRequest
        required: true
        schema:
          $ref: '#/definitions/message.UpdateUserProfileReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UpdateUserProfileResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: update user profile
      tags:
      - platform
  /vendors/:
    get:
      consumes:
      - application/json
      description: query vendors
      parameters:
      - collectionFormat: multi
        description: vendor id collection
        in: query
        items:
          type: string
        name: vendorIDs
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryVendorInfoResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query vendors
      tags:
      - vendor
    post:
      consumes:
      - application/json
      description: update vendors
      parameters:
      - description: update vendor info request parameter
        in: body
        name: UpdateVendorInfoReq
        required: true
        schema:
          $ref: '#/definitions/message.UpdateVendorInfoReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.UpdateVendorInfoReq'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: update vendors
      tags:
      - vendor
  /vendors/available:
    get:
      consumes:
      - application/json
      description: query available vendors and regions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryAvailableVendorsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query available vendors and regions
      tags:
      - vendor
  /workflow/:
    get:
      consumes:
      - application/json
      description: query flow works
      parameters:
      - in: query
        name: bizId
        type: string
      - in: query
        name: bizType
        type: string
      - in: query
        name: flowName
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryWorkFlowsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query flow works
      tags:
      - task
  /workflow/{workFlowId}:
    get:
      consumes:
      - application/json
      description: show details of a flow work
      parameters:
      - description: flow work id
        in: path
        name: workFlowId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryWorkFlowDetailResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show details of a flow work
      tags:
      - task
  /workflow/start:
    post:
      consumes:
      - application/json
      description: start workflow
      parameters:
      - description: start workflow
        in: body
        name: startReq
        required: true
        schema:
          $ref: '#/definitions/message.StartWorkFlowReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.StartWorkFlowResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: start workflow
      tags:
      - start workflow
  /workflow/stop:
    post:
      consumes:
      - application/json
      description: stop workflow
      parameters:
      - description: stop workflow
        in: body
        name: stopReq
        required: true
        schema:
          $ref: '#/definitions/message.StopWorkFlowReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.StopWorkFlowResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: stop workflow
      tags:
      - stop workflow
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
