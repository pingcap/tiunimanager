basePath: /api/v1/
definitions:
  account.UserProfile:
    properties:
      tenantId:
        type: string
      userName:
        type: string
    type: object
  backuprestore.BackupDeleteReq:
    properties:
      clusterId:
        type: string
    type: object
  backuprestore.BackupRecord:
    properties:
      backupMethod:
        description: 物理/逻辑
        type: string
      backupMode:
        description: 手动/自动
        type: string
      backupType:
        description: 全量/增量
        type: string
      clusterId:
        type: string
      endTime:
        type: string
      filePath:
        type: string
      id:
        type: integer
      operator:
        $ref: '#/definitions/controller.Operator'
      size:
        type: number
      startTime:
        type: string
      status:
        $ref: '#/definitions/controller.StatusInfo'
    type: object
  backuprestore.BackupReq:
    properties:
      backupMethod:
        type: string
      backupType:
        type: string
      clusterId:
        type: string
      filePath:
        type: string
    type: object
  backuprestore.BackupStrategy:
    properties:
      backupDate:
        type: string
      clusterId:
        type: string
      nextBackupTime:
        type: string
      period:
        type: string
    type: object
  backuprestore.BackupStrategyUpdateReq:
    properties:
      strategy:
        $ref: '#/definitions/backuprestore.BackupStrategy'
    type: object
  backuprestore.RestoreReq:
    properties:
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      dbPassword:
        type: string
      nodeDemandList:
        items:
          $ref: '#/definitions/management.ClusterNodeDemand'
        type: array
      recoverInfo:
        $ref: '#/definitions/management.RecoverInfo'
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
    type: object
  controller.CommonResult:
    properties:
      code:
        type: integer
      data:
        type: object
      message:
        type: string
    type: object
  controller.Operator:
    properties:
      manualOperator:
        type: boolean
      operatorId:
        type: string
      operatorName:
        type: string
      tenantId:
        type: string
    type: object
  controller.Page:
    properties:
      page:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
    type: object
  controller.ResultWithPage:
    properties:
      code:
        type: integer
      data:
        type: object
      message:
        type: string
      page:
        $ref: '#/definitions/controller.Page'
    type: object
  controller.StatusInfo:
    properties:
      createTime:
        type: string
      deleteTime:
        type: string
      inProcessFlowId:
        type: integer
      statusCode:
        type: string
      statusName:
        type: string
      updateTime:
        type: string
    type: object
  controller.Usage:
    properties:
      total:
        type: number
      usageRate:
        type: number
      used:
        type: number
    type: object
  flowtask.FlowWorkDetailInfo:
    properties:
      clusterId:
        type: string
      clusterName:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      flowWorkName:
        type: string
      id:
        type: integer
      inProcessFlowId:
        type: integer
      manualOperator:
        type: boolean
      operatorId:
        type: string
      operatorName:
        type: string
      statusCode:
        type: string
      statusName:
        type: string
      taskName:
        items:
          type: string
        type: array
      tasks:
        items:
          $ref: '#/definitions/flowtask.FlowWorkTaskInfo'
        type: array
      tenantId:
        type: string
      updateTime:
        type: string
    type: object
  flowtask.FlowWorkDisplayInfo:
    properties:
      clusterId:
        type: string
      clusterName:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      flowWorkName:
        type: string
      id:
        type: integer
      inProcessFlowId:
        type: integer
      manualOperator:
        type: boolean
      operatorId:
        type: string
      operatorName:
        type: string
      statusCode:
        type: string
      statusName:
        type: string
      tenantId:
        type: string
      updateTime:
        type: string
    type: object
  flowtask.FlowWorkTaskInfo:
    properties:
      endTime:
        type: string
      id:
        type: integer
      result:
        type: string
      startTime:
        type: string
      taskName:
        type: string
      taskParameters:
        type: string
      taskStatus:
        type: integer
    type: object
  hostresource.AllocHostsReq:
    properties:
      pdReq:
        items:
          $ref: '#/definitions/hostresource.Allocation'
        type: array
      tidbReq:
        items:
          $ref: '#/definitions/hostresource.Allocation'
        type: array
      tikvReq:
        items:
          $ref: '#/definitions/hostresource.Allocation'
        type: array
    type: object
  hostresource.AllocHostsRsp:
    properties:
      pdHosts:
        items:
          $ref: '#/definitions/hostresource.AllocateRsp'
        type: array
      tidbHosts:
        items:
          $ref: '#/definitions/hostresource.AllocateRsp'
        type: array
      tikvHosts:
        items:
          $ref: '#/definitions/hostresource.AllocateRsp'
        type: array
    type: object
  hostresource.AllocateRsp:
    properties:
      cpuCore:
        type: integer
      disk:
        $ref: '#/definitions/hostresource.DiskInfo'
      hostName:
        type: string
      ip:
        type: string
      memory:
        type: integer
      passwd:
        type: string
      userName:
        type: string
    type: object
  hostresource.Allocation:
    properties:
      count:
        type: integer
      cpuCores:
        type: integer
      failureDomain:
        type: string
      memory:
        type: integer
    type: object
  hostresource.DiskInfo:
    properties:
      capacity:
        description: 'Disk size, Unit: GB'
        type: integer
      diskId:
        type: string
      hostId:
        type: string
      name:
        description: '[sda/sdb/nvmep0...]'
        type: string
      path:
        description: 'Disk mount path: [/data1]'
        type: string
      status:
        description: Disk Status, 0 for available, 1 for inused
        type: integer
      type:
        description: 'Disk type: [nvme-ssd/ssd/sata]'
        type: string
      usedBy:
        type: string
    type: object
  hostresource.HostInfo:
    properties:
      arch:
        description: x86 or arm64
        type: string
      az:
        type: string
      cpuCores:
        description: Host cpu cores spec, init while importing
        type: integer
      createTime:
        type: integer
      diskType:
        description: Disk type of this host [sata/ssd/nvme_ssd]
        type: string
      disks:
        items:
          $ref: '#/definitions/hostresource.DiskInfo'
        type: array
      freeCpuCores:
        description: Unused CpuCore, used for allocation
        type: integer
      freeMemory:
        description: Unused memory size, Unit:GB, used for allocation
        type: integer
      hostId:
        type: string
      hostName:
        type: string
      ip:
        type: string
      kernel:
        type: string
      loadStat:
        description: Host Resource Stat, 0 for loadless, 1 for inused, 2 for exhaust
        type: integer
      memory:
        description: Host memroy, init while importing
        type: integer
      nic:
        description: 'Host network type: 1GE or 10GE'
        type: string
      os:
        type: string
      passwd:
        type: string
      purpose:
        description: What Purpose is the host used for? [compute/storage/general]
        type: string
      rack:
        type: string
      region:
        type: string
      reserved:
        description: Whether this host is reserved - will not be allocated
        type: boolean
      spec:
        description: Host Spec, init while importing
        type: string
      status:
        description: Host Status, 0 for Online, 1 for offline
        type: integer
      updateTime:
        type: integer
      userName:
        type: string
    type: object
  hostresource.UpdateHostReq:
    properties:
      reserved:
        type: boolean
      status:
        type: integer
    type: object
  identification.LoginInfo:
    properties:
      userName:
        type: string
      userPassword:
        type: string
    type: object
  identification.UserIdentity:
    properties:
      tenantId:
        type: string
      token:
        type: string
      userName:
        type: string
    type: object
  importexport.DataExportReq:
    properties:
      accessKey:
        type: string
      bucketRegion:
        type: string
      bucketUrl:
        type: string
      clusterId:
        type: string
      comment:
        type: string
      endpointUrl:
        type: string
      fileType:
        type: string
      filter:
        type: string
      password:
        type: string
      secretAccessKey:
        type: string
      sql:
        type: string
      storageType:
        type: string
      userName:
        type: string
      zipName:
        type: string
    type: object
  importexport.DataExportResp:
    properties:
      recordId:
        type: integer
    type: object
  importexport.DataImportReq:
    properties:
      accessKey:
        type: string
      bucketUrl:
        type: string
      clusterId:
        type: string
      comment:
        type: string
      endpointUrl:
        type: string
      password:
        type: string
      recordId:
        type: integer
      secretAccessKey:
        type: string
      storageType:
        type: string
      userName:
        type: string
    type: object
  importexport.DataImportResp:
    properties:
      recordId:
        type: integer
    type: object
  importexport.DataTransportDeleteReq:
    properties:
      clusterId:
        type: string
    type: object
  importexport.DataTransportInfo:
    properties:
      clusterId:
        type: string
      endTime:
        type: string
      filePath:
        type: string
      recordId:
        type: integer
      startTime:
        type: string
      status:
        $ref: '#/definitions/controller.StatusInfo'
      storageType:
        type: string
      transportType:
        type: string
    type: object
  importexport.DataTransportRecordQueryResp:
    properties:
      transportRecords:
        items:
          $ref: '#/definitions/importexport.DataTransportInfo'
        type: array
    type: object
  knowledge.ClusterComponent:
    properties:
      componentName:
        type: string
      componentType:
        type: string
    type: object
  knowledge.ClusterComponentSpec:
    properties:
      clusterComponent:
        $ref: '#/definitions/knowledge.ClusterComponent'
      compentPortConstraint:
        $ref: '#/definitions/knowledge.ComponentPortConstraint'
      componentConstraint:
        $ref: '#/definitions/knowledge.ComponentConstraint'
    type: object
  knowledge.ClusterType:
    properties:
      code:
        type: string
      name:
        type: string
    type: object
  knowledge.ClusterTypeSpec:
    properties:
      clusterType:
        $ref: '#/definitions/knowledge.ClusterType'
      versionSpecs:
        items:
          $ref: '#/definitions/knowledge.ClusterVersionSpec'
        type: array
    type: object
  knowledge.ClusterVersion:
    properties:
      code:
        type: string
      name:
        type: string
    type: object
  knowledge.ClusterVersionSpec:
    properties:
      clusterVersion:
        $ref: '#/definitions/knowledge.ClusterVersion'
      componentSpecs:
        items:
          $ref: '#/definitions/knowledge.ClusterComponentSpec'
        type: array
    type: object
  knowledge.ComponentConstraint:
    properties:
      availableSpecCodes:
        items:
          type: string
        type: array
      componentRequired:
        type: boolean
      minZoneQuantity:
        type: integer
      suggestedNodeQuantities:
        items:
          type: integer
        type: array
    type: object
  knowledge.ComponentPortConstraint:
    properties:
      portCount:
        type: integer
      portRangeEnd:
        type: integer
      portRangeStart:
        type: integer
    type: object
  knowledge.ParamValueConstraint:
    properties:
      contrastValue:
        type: object
      type:
        type: string
    type: object
  knowledge.Parameter:
    properties:
      constraints:
        items:
          $ref: '#/definitions/knowledge.ParamValueConstraint'
        type: array
      defaultValue:
        type: object
      desc:
        type: string
      name:
        type: string
      needRestart:
        type: boolean
      type:
        type: integer
      unit:
        type: string
    type: object
  log.SearchTiDBLogDetail:
    properties:
      clusterId:
        example: abc
        type: string
      ext:
        additionalProperties: true
        type: object
      id:
        example: zvadfwf
        type: string
      index:
        example: tiem-tidb-cluster-2021.09.23
        type: string
      ip:
        example: 127.0.0.1
        type: string
      level:
        example: warn
        type: string
      message:
        example: tidb log
        type: string
      module:
        example: tidb
        type: string
      sourceLine:
        example: main.go:210
        type: string
      timestamp:
        example: "2021-09-23 14:23:10"
        type: string
    type: object
  log.SearchTiDBLogRsp:
    properties:
      results:
        items:
          $ref: '#/definitions/log.SearchTiDBLogDetail'
        type: array
      took:
        example: 10
        type: integer
    type: object
  management.ClusterDisplayInfo:
    properties:
      backupFileUsage:
        $ref: '#/definitions/controller.Usage'
      clusterId:
        type: string
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      cpuUsage:
        $ref: '#/definitions/controller.Usage'
      createTime:
        type: string
      dbPassword:
        type: string
      deleteTime:
        type: string
      diskUsage:
        $ref: '#/definitions/controller.Usage'
      extranetConnectAddresses:
        items:
          type: string
        type: array
      inProcessFlowId:
        type: integer
      intranetConnectAddresses:
        items:
          type: string
        type: array
      memoryUsage:
        $ref: '#/definitions/controller.Usage'
      portList:
        items:
          type: integer
        type: array
      recoverInfo:
        $ref: '#/definitions/management.RecoverInfo'
      statusCode:
        type: string
      statusName:
        type: string
      storageUsage:
        $ref: '#/definitions/controller.Usage'
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
      updateTime:
        type: string
      whitelist:
        items:
          type: string
        type: array
    type: object
  management.ClusterNodeDemand:
    properties:
      componentType:
        type: string
      distributionItems:
        items:
          $ref: '#/definitions/management.DistributionItem'
        type: array
      totalNodeCount:
        type: integer
    type: object
  management.ComponentInstance:
    properties:
      componentName:
        type: string
      componentType:
        type: string
      nodes:
        items:
          $ref: '#/definitions/management.ComponentNodeDisplayInfo'
        type: array
    type: object
  management.ComponentNodeDisplayInfo:
    properties:
      cpuUsage:
        $ref: '#/definitions/controller.Usage'
      hostId:
        type: string
      ioUtil:
        type: number
      iops:
        items:
          type: number
        type: array
      memoryUsage:
        $ref: '#/definitions/controller.Usage'
      nodeId:
        type: string
      port:
        type: integer
      role:
        $ref: '#/definitions/management.ComponentNodeRole'
      spec:
        $ref: '#/definitions/warehouse.SpecBaseInfo'
      status:
        type: string
      storageUsage:
        $ref: '#/definitions/controller.Usage'
      version:
        type: string
      zone:
        $ref: '#/definitions/warehouse.ZoneBaseInfo'
    type: object
  management.ComponentNodeRole:
    properties:
      roleCode:
        type: string
      roleName:
        type: string
    type: object
  management.CreateClusterRsp:
    properties:
      clusterId:
        type: string
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      createTime:
        type: string
      dbPassword:
        type: string
      deleteTime:
        type: string
      inProcessFlowId:
        type: integer
      recoverInfo:
        $ref: '#/definitions/management.RecoverInfo'
      statusCode:
        type: string
      statusName:
        type: string
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
      updateTime:
        type: string
    type: object
  management.CreateReq:
    properties:
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      cpuArchitecture:
        type: string
      dbPassword:
        type: string
      exclusive:
        type: boolean
      nodeDemandList:
        items:
          $ref: '#/definitions/management.ClusterNodeDemand'
        type: array
      recoverInfo:
        $ref: '#/definitions/management.RecoverInfo'
      region:
        type: string
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
    type: object
  management.DeleteClusterRsp:
    properties:
      clusterId:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      inProcessFlowId:
        type: integer
      statusCode:
        type: string
      statusName:
        type: string
      updateTime:
        type: string
    type: object
  management.DescribeDashboardRsp:
    properties:
      clusterId:
        type: string
      token:
        type: string
      url:
        type: string
    type: object
  management.DescribeMonitorRsp:
    properties:
      alertUrl:
        example: http://127.0.0.1:9093
        type: string
      clusterId:
        example: abc
        type: string
      grafanaUrl:
        example: http://127.0.0.1:3000
        type: string
    type: object
  management.DetailClusterRsp:
    properties:
      backupFileUsage:
        $ref: '#/definitions/controller.Usage'
      clusterId:
        type: string
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      components:
        items:
          $ref: '#/definitions/management.ComponentInstance'
        type: array
      cpuUsage:
        $ref: '#/definitions/controller.Usage'
      createTime:
        type: string
      dbPassword:
        type: string
      deleteTime:
        type: string
      diskUsage:
        $ref: '#/definitions/controller.Usage'
      extranetConnectAddresses:
        items:
          type: string
        type: array
      inProcessFlowId:
        type: integer
      intranetConnectAddresses:
        items:
          type: string
        type: array
      maintainTaskCron:
        type: string
      memoryUsage:
        $ref: '#/definitions/controller.Usage'
      portList:
        items:
          type: integer
        type: array
      recoverInfo:
        $ref: '#/definitions/management.RecoverInfo'
      statusCode:
        type: string
      statusName:
        type: string
      storageUsage:
        $ref: '#/definitions/controller.Usage'
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
      updateTime:
        type: string
      whitelist:
        items:
          type: string
        type: array
    type: object
  management.DistributionItem:
    properties:
      count:
        type: integer
      specCode:
        type: string
      zoneCode:
        type: string
    type: object
  management.PreviewClusterRsp:
    properties:
      capabilityIndexes:
        items:
          $ref: '#/definitions/management.ServiceCapabilityIndex'
        type: array
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      dbPassword:
        type: string
      recoverInfo:
        $ref: '#/definitions/management.RecoverInfo'
      stockCheckResult:
        items:
          $ref: '#/definitions/management.StockCheckItem'
        type: array
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
    type: object
  management.RecoverInfo:
    properties:
      backupRecordId:
        type: integer
      sourceClusterId:
        type: string
    type: object
  management.RestartClusterRsp:
    properties:
      clusterId:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      inProcessFlowId:
        type: integer
      statusCode:
        type: string
      statusName:
        type: string
      updateTime:
        type: string
    type: object
  management.ServiceCapabilityIndex:
    properties:
      description:
        type: string
      name:
        type: string
      unit:
        type: string
      value:
        type: object
    type: object
  management.StockCheckItem:
    properties:
      componentType:
        type: string
      count:
        type: integer
      cpuArchitecture:
        type: string
      enough:
        type: boolean
      region:
        type: string
      specCode:
        type: string
      zoneCode:
        type: string
    type: object
  management.StopClusterRsp:
    properties:
      clusterId:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      inProcessFlowId:
        type: integer
      statusCode:
        type: string
      statusName:
        type: string
      updateTime:
        type: string
    type: object
  management.TakeoverReq:
    properties:
      clusterNames:
        items:
          type: string
        type: array
      tiupIp:
        example: 172.16.4.147
        type: string
      tiupPath:
        example: .tiup/
        type: string
      tiupPort:
        example: 22
        type: integer
      tiupUserName:
        example: root
        type: string
      tiupUserPassword:
        example: password
        type: string
    type: object
  parameter.ParamInstance:
    properties:
      name:
        type: string
      value:
        type: object
    type: object
  parameter.ParamItem:
    properties:
      currentValue:
        $ref: '#/definitions/parameter.ParamInstance'
      definition:
        $ref: '#/definitions/knowledge.Parameter'
    type: object
  parameter.ParamUpdateReq:
    properties:
      values:
        items:
          $ref: '#/definitions/parameter.ParamInstance'
        type: array
    type: object
  parameter.ParamUpdateRsp:
    properties:
      clusterId:
        type: string
      status:
        type: string
      taskId:
        type: integer
    type: object
  warehouse.DomainResource:
    properties:
      count:
        type: integer
      purpose:
        type: string
      specCode:
        type: string
      specName:
        type: string
      zoneCode:
        type: string
      zoneName:
        type: string
    type: object
  warehouse.Node:
    properties:
      Code:
        type: string
      Name:
        type: string
      Prefix:
        type: string
      SubNodes:
        items:
          $ref: '#/definitions/warehouse.Node'
        type: array
    type: object
  warehouse.SpecBaseInfo:
    properties:
      specCode:
        type: string
      specName:
        type: string
    type: object
  warehouse.Stocks:
    properties:
      freeCpuCores:
        type: integer
      freeDiskCapacity:
        type: integer
      freeDiskCount:
        type: integer
      freeHostCount:
        type: integer
      freeMemory:
        type: integer
    type: object
  warehouse.ZoneBaseInfo:
    properties:
      zoneCode:
        type: string
      zoneName:
        type: string
    type: object
host: localhost:4116
info:
  contact:
    email: zhangpeijin@pingcap.com
    name: zhangpeijin
  description: TiEM UI API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: TiEM UI API
  version: "1.0"
paths:
  /backups/:
    get:
      consumes:
      - application/json
      description: query backup records of a cluster
      parameters:
      - in: query
        name: clusterId
        type: string
      - in: query
        name: endTime
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: pageSize
        type: integer
      - in: query
        name: startTime
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/backuprestore.BackupRecord'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query backup records of a cluster
      tags:
      - cluster backup
    post:
      consumes:
      - application/json
      description: backup
      parameters:
      - description: backup request
        in: body
        name: backupReq
        required: true
        schema:
          $ref: '#/definitions/backuprestore.BackupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/backuprestore.BackupRecord'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: backup
      tags:
      - cluster backup
  /backups/{backupId}:
    delete:
      consumes:
      - application/json
      description: delete backup record
      parameters:
      - description: backup record id
        in: path
        name: backupId
        required: true
        type: integer
      - description: backup delete request
        in: body
        name: backupDeleteReq
        required: true
        schema:
          $ref: '#/definitions/backuprestore.BackupDeleteReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  type: integer
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete backup record
      tags:
      - cluster backup
  /clusters/:
    get:
      consumes:
      - application/json
      description: query clusters
      parameters:
      - in: query
        name: clusterId
        type: string
      - in: query
        name: clusterName
        type: string
      - in: query
        name: clusterStatus
        type: string
      - in: query
        name: clusterTag
        type: string
      - in: query
        name: clusterType
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/management.ClusterDisplayInfo'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query clusters
      tags:
      - cluster
    post:
      consumes:
      - application/json
      description: create a cluster
      parameters:
      - description: create request
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/management.CreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/management.CreateClusterRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: create a cluster
      tags:
      - cluster
  /clusters/{clusterId}:
    delete:
      consumes:
      - application/json
      description: delete cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/management.DeleteClusterRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete cluster
      tags:
      - cluster
    get:
      consumes:
      - application/json
      description: show details of a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/management.DetailClusterRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show details of a cluster
      tags:
      - cluster
  /clusters/{clusterId}/dashboard:
    get:
      consumes:
      - application/json
      description: dashboard
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/management.DescribeDashboardRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: dashboard
      tags:
      - cluster
  /clusters/{clusterId}/monitor:
    get:
      consumes:
      - application/json
      description: monitoring link
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/management.DescribeMonitorRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: monitoring link
      tags:
      - cluster
  /clusters/{clusterId}/params:
    get:
      consumes:
      - application/json
      description: query params of a cluster
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: pageSize
        type: integer
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/parameter.ParamItem'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query params of a cluster
      tags:
      - cluster params
    post:
      consumes:
      - application/json
      description: submit params
      parameters:
      - description: update params request
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/parameter.ParamUpdateReq'
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/parameter.ParamUpdateRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: submit params
      tags:
      - cluster params
  /clusters/{clusterId}/restart:
    post:
      consumes:
      - application/json
      description: restart a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/management.RestartClusterRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: restart a cluster
      tags:
      - cluster
  /clusters/{clusterId}/stop:
    post:
      consumes:
      - application/json
      description: stop a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/management.StopClusterRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: stop a cluster
      tags:
      - cluster
  /clusters/{clusterId}/strategy:
    put:
      consumes:
      - application/json
      description: save the backup strategy of a cluster
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      - description: 备份策略信息
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/backuprestore.BackupStrategyUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/backuprestore.BackupStrategy'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: save the backup strategy of a cluster
      tags:
      - cluster backup
  /clusters/{clusterId}/strategy/:
    get:
      consumes:
      - application/json
      description: show the backup strategy of a cluster
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/backuprestore.BackupStrategy'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show the backup strategy of a cluster
      tags:
      - cluster backup
  /clusters/export:
    post:
      consumes:
      - application/json
      description: export
      parameters:
      - description: cluster info for data export
        in: body
        name: dataExport
        required: true
        schema:
          $ref: '#/definitions/importexport.DataExportReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/importexport.DataExportResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: export data from tidb cluster
      tags:
      - cluster export
  /clusters/import:
    post:
      consumes:
      - application/json
      description: import
      parameters:
      - description: cluster info for import data
        in: body
        name: dataImport
        required: true
        schema:
          $ref: '#/definitions/importexport.DataImportReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/importexport.DataImportResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: import data to tidb cluster
      tags:
      - cluster import
  /clusters/preview:
    post:
      consumes:
      - application/json
      description: preview cluster topology and capability
      parameters:
      - description: preview request
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/management.CreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/management.PreviewClusterRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: preview cluster topology and capability
      tags:
      - cluster
  /clusters/restore:
    post:
      consumes:
      - application/json
      description: restore a new cluster by backup record
      parameters:
      - description: restore request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/backuprestore.RestoreReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/controller.StatusInfo'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: restore a new cluster by backup record
      tags:
      - cluster
  /clusters/takeover:
    post:
      consumes:
      - application/json
      description: takeover a cluster
      parameters:
      - description: takeover request
        in: body
        name: takeoverReq
        required: true
        schema:
          $ref: '#/definitions/management.TakeoverReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/management.ClusterDisplayInfo'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: takeover a cluster
      tags:
      - cluster
  /clusters/transport:
    get:
      consumes:
      - application/json
      description: query records of import and export
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      - in: query
        name: clusterId
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: pageSize
        type: integer
      - in: query
        name: reImport
        type: boolean
      - in: query
        name: recordId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/importexport.DataTransportRecordQueryResp'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query records of import and export
      tags:
      - cluster data transport
  /clusters/transport/{recordId}:
    delete:
      consumes:
      - application/json
      description: delete data transport record
      parameters:
      - description: data transport recordId
        in: path
        name: recordId
        required: true
        type: integer
      - description: data transport record delete request
        in: body
        name: DataTransportDeleteReq
        required: true
        schema:
          $ref: '#/definitions/importexport.DataTransportDeleteReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  type: integer
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete data transport record
      tags:
      - cluster data transport
  /flowworks/:
    get:
      consumes:
      - application/json
      description: query flow works
      parameters:
      - in: query
        name: clusterId
        type: string
      - in: query
        name: keyword
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: pageSize
        type: integer
      - in: query
        name: status
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/flowtask.FlowWorkDisplayInfo'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query flow works
      tags:
      - task
  /flowworks/{flowWorkId}:
    get:
      consumes:
      - application/json
      description: show details of a flow work
      parameters:
      - description: flow work id
        in: path
        name: flowWorkId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/flowtask.FlowWorkDetailInfo'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show details of a flow work
      tags:
      - task
  /knowledges/:
    get:
      consumes:
      - application/json
      description: show cluster knowledge
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/knowledge.ClusterTypeSpec'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show cluster knowledge
      tags:
      - knowledge
  /logs/tidb/{clusterId}:
    get:
      consumes:
      - application/json
      description: search tidb log
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      - example: "2021-12-01 12:00:00"
        in: query
        name: endTime
        type: string
      - example: 127.0.0.1
        in: query
        name: ip
        type: string
      - example: warn
        in: query
        name: level
        type: string
      - example: tidb log
        in: query
        name: message
        type: string
      - example: tidb
        in: query
        name: module
        type: string
      - example: 1
        in: query
        name: page
        type: integer
      - example: 10
        in: query
        name: pageSize
        type: integer
      - example: "2021-09-01 12:00:00"
        in: query
        name: startTime
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/log.SearchTiDBLogRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: search tidb log
      tags:
      - logs
  /resources/allochosts:
    post:
      consumes:
      - application/json
      description: should be used in testing env
      parameters:
      - description: location and spec of hosts
        in: body
        name: Alloc
        required: true
        schema:
          $ref: '#/definitions/hostresource.AllocHostsReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/hostresource.AllocHostsRsp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Alloc host/disk resources for creating tidb cluster
      tags:
      - resource
  /resources/failuredomains:
    get:
      consumes:
      - application/json
      description: get resource info in each failure domain
      parameters:
      - description: failure domain type of dc/zone/rack
        enum:
        - 1
        - 2
        - 3
        in: query
        name: failureDomainType
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/warehouse.DomainResource'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show the resources on failure domain view
      tags:
      - resource
  /resources/hierarchy:
    get:
      consumes:
      - application/json
      description: get resource hierarchy-tree
      parameters:
      - in: query
        name: Arch
        type: string
      - description: failure domain type of region/zone/rack/host
        enum:
        - 1
        - 2
        - 3
        - 4
        in: query
        name: level
        required: true
        type: integer
      - description: hierarchy depth
        in: query
        name: depth
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/warehouse.Node'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show the resources hierarchy
      tags:
      - resource
  /resources/host:
    post:
      consumes:
      - application/json
      description: import one host by json
      parameters:
      - description: Host information
        in: body
        name: host
        required: true
        schema:
          $ref: '#/definitions/hostresource.HostInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Import a host to TiEM System
      tags:
      - resource
  /resources/hosts:
    get:
      consumes:
      - application/json
      description: get hosts lit
      parameters:
      - in: query
        name: loadStat
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: pageSize
        type: integer
      - in: query
        name: purpose
        type: string
      - in: query
        name: status
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/hostresource.HostInfo'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show all hosts list in TiEM
      tags:
      - resource
    post:
      consumes:
      - multipart/form-data
      description: import hosts by xlsx file
      parameters:
      - default: "false"
        description: whether hosts are reserved(won't be allocated) after import
        in: formData
        name: hostReserved
        type: string
      - description: hosts information in a xlsx file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: Import a batch of hosts to TiEM
      tags:
      - resource
  /resources/hosts-template/:
    get:
      consumes:
      - application/json
      description: get host template xlsx file
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
      security:
      - ApiKeyAuth: []
      summary: Download the host information template file for importing
      tags:
      - resource
  /resources/hosts/:
    delete:
      consumes:
      - application/json
      description: remove hosts by a list
      parameters:
      - description: list of host IDs
        in: body
        name: hostIds
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Remove a batch of hosts
      tags:
      - resource
    put:
      consumes:
      - application/json
      description: update host status by a list
      parameters:
      - collectionFormat: multi
        description: host id array
        in: query
        items:
          type: string
        name: id
        required: true
        type: array
      - description: do update in host list
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/hostresource.UpdateHostReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Update host status
      tags:
      - resource
  /resources/hosts/{hostId}:
    delete:
      consumes:
      - application/json
      description: remove a host by id
      parameters:
      - description: host id
        in: path
        name: hostId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Remove a host
      tags:
      - resource
    get:
      consumes:
      - application/json
      description: get one host by id
      parameters:
      - description: host ID
        in: path
        name: hostId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/hostresource.HostInfo'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show a host
      tags:
      - resource
  /resources/stocks:
    get:
      consumes:
      - application/json
      description: get resource stocks in specified conditions
      parameters:
      - in: query
        name: Arch
        type: string
      - in: query
        name: Capacity
        type: integer
      - in: query
        name: DiskStatus
        type: integer
      - in: query
        name: DiskType
        type: string
      - in: query
        name: HostIp
        type: string
      - in: query
        name: HostStatus
        type: integer
      - in: query
        name: LoadStat
        type: integer
      - in: query
        name: Rack
        type: string
      - in: query
        name: Region
        type: string
      - in: query
        name: Zone
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/warehouse.Stocks'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show the resources stocks
      tags:
      - resource
  /user/login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: login info
        in: body
        name: loginInfo
        required: true
        schema:
          $ref: '#/definitions/identification.LoginInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/identification.UserIdentity'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      summary: login
      tags:
      - platform
  /user/logout:
    post:
      consumes:
      - application/json
      description: logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/identification.UserIdentity'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: logout
      tags:
      - platform
  /user/profile:
    get:
      consumes:
      - application/json
      description: profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/account.UserProfile'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: user profile
      tags:
      - platform
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
