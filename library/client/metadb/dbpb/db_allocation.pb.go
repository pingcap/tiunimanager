// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.1
// source: db_allocation.proto

package dbpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DBAllocResponseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DBAllocResponseStatus) Reset() {
	*x = DBAllocResponseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBAllocResponseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBAllocResponseStatus) ProtoMessage() {}

func (x *DBAllocResponseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBAllocResponseStatus.ProtoReflect.Descriptor instead.
func (*DBAllocResponseStatus) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{0}
}

func (x *DBAllocResponseStatus) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DBAllocResponseStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DBApplicant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HolderId  string `protobuf:"bytes,1,opt,name=holderId,proto3" json:"holderId,omitempty"`
	RequestId string `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
}

func (x *DBApplicant) Reset() {
	*x = DBApplicant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBApplicant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBApplicant) ProtoMessage() {}

func (x *DBApplicant) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBApplicant.ProtoReflect.Descriptor instead.
func (*DBApplicant) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{1}
}

func (x *DBApplicant) GetHolderId() string {
	if x != nil {
		return x.HolderId
	}
	return ""
}

func (x *DBApplicant) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type DBLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Zone   string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	Rack   string `protobuf:"bytes,3,opt,name=rack,proto3" json:"rack,omitempty"`
	Host   string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *DBLocation) Reset() {
	*x = DBLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBLocation) ProtoMessage() {}

func (x *DBLocation) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBLocation.ProtoReflect.Descriptor instead.
func (*DBLocation) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{2}
}

func (x *DBLocation) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *DBLocation) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *DBLocation) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

func (x *DBLocation) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type DBExcluded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hosts []string `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
}

func (x *DBExcluded) Reset() {
	*x = DBExcluded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBExcluded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBExcluded) ProtoMessage() {}

func (x *DBExcluded) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBExcluded.ProtoReflect.Descriptor instead.
func (*DBExcluded) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{3}
}

func (x *DBExcluded) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

type DBFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arch     string `protobuf:"bytes,1,opt,name=arch,proto3" json:"arch,omitempty"`
	Purpose  string `protobuf:"bytes,2,opt,name=purpose,proto3" json:"purpose,omitempty"`
	DiskType string `protobuf:"bytes,3,opt,name=diskType,proto3" json:"diskType,omitempty"`
}

func (x *DBFilter) Reset() {
	*x = DBFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBFilter) ProtoMessage() {}

func (x *DBFilter) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBFilter.ProtoReflect.Descriptor instead.
func (*DBFilter) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{4}
}

func (x *DBFilter) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *DBFilter) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *DBFilter) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

type DBComputeRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuCores int32 `protobuf:"varint,1,opt,name=cpuCores,proto3" json:"cpuCores,omitempty"`
	Memory   int32 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *DBComputeRequirement) Reset() {
	*x = DBComputeRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBComputeRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBComputeRequirement) ProtoMessage() {}

func (x *DBComputeRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBComputeRequirement.ProtoReflect.Descriptor instead.
func (*DBComputeRequirement) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{5}
}

func (x *DBComputeRequirement) GetCpuCores() int32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *DBComputeRequirement) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

type DBDiskRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedDisk bool   `protobuf:"varint,1,opt,name=needDisk,proto3" json:"needDisk,omitempty"`
	Capacity int32  `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"` // Reserved, not used by now
	DiskType string `protobuf:"bytes,3,opt,name=diskType,proto3" json:"diskType,omitempty"`  // Reserved, not used by now
}

func (x *DBDiskRequirement) Reset() {
	*x = DBDiskRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBDiskRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBDiskRequirement) ProtoMessage() {}

func (x *DBDiskRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBDiskRequirement.ProtoReflect.Descriptor instead.
func (*DBDiskRequirement) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{6}
}

func (x *DBDiskRequirement) GetNeedDisk() bool {
	if x != nil {
		return x.NeedDisk
	}
	return false
}

func (x *DBDiskRequirement) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *DBDiskRequirement) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

type DBPortRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start   int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End     int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	PortCnt int32 `protobuf:"varint,3,opt,name=portCnt,proto3" json:"portCnt,omitempty"`
}

func (x *DBPortRequirement) Reset() {
	*x = DBPortRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBPortRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBPortRequirement) ProtoMessage() {}

func (x *DBPortRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBPortRequirement.ProtoReflect.Descriptor instead.
func (*DBPortRequirement) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{7}
}

func (x *DBPortRequirement) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *DBPortRequirement) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *DBPortRequirement) GetPortCnt() int32 {
	if x != nil {
		return x.PortCnt
	}
	return 0
}

type DBRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exclusive  bool                  `protobuf:"varint,1,opt,name=exclusive,proto3" json:"exclusive,omitempty"`
	DiskReq    *DBDiskRequirement    `protobuf:"bytes,2,opt,name=diskReq,proto3" json:"diskReq,omitempty"`
	ComputeReq *DBComputeRequirement `protobuf:"bytes,3,opt,name=computeReq,proto3" json:"computeReq,omitempty"`
	PortReq    []*DBPortRequirement  `protobuf:"bytes,4,rep,name=portReq,proto3" json:"portReq,omitempty"`
}

func (x *DBRequirement) Reset() {
	*x = DBRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRequirement) ProtoMessage() {}

func (x *DBRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBRequirement.ProtoReflect.Descriptor instead.
func (*DBRequirement) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{8}
}

func (x *DBRequirement) GetExclusive() bool {
	if x != nil {
		return x.Exclusive
	}
	return false
}

func (x *DBRequirement) GetDiskReq() *DBDiskRequirement {
	if x != nil {
		return x.DiskReq
	}
	return nil
}

func (x *DBRequirement) GetComputeReq() *DBComputeRequirement {
	if x != nil {
		return x.ComputeReq
	}
	return nil
}

func (x *DBRequirement) GetPortReq() []*DBPortRequirement {
	if x != nil {
		return x.PortReq
	}
	return nil
}

type DBAllocRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location     *DBLocation    `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	HostExcluded *DBExcluded    `protobuf:"bytes,2,opt,name=hostExcluded,proto3" json:"hostExcluded,omitempty"`
	HostFilter   *DBFilter      `protobuf:"bytes,3,opt,name=hostFilter,proto3" json:"hostFilter,omitempty"`
	Require      *DBRequirement `protobuf:"bytes,4,opt,name=require,proto3" json:"require,omitempty"`
	Strategy     int32          `protobuf:"varint,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Count        int32          `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DBAllocRequirement) Reset() {
	*x = DBAllocRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBAllocRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBAllocRequirement) ProtoMessage() {}

func (x *DBAllocRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBAllocRequirement.ProtoReflect.Descriptor instead.
func (*DBAllocRequirement) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{9}
}

func (x *DBAllocRequirement) GetLocation() *DBLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DBAllocRequirement) GetHostExcluded() *DBExcluded {
	if x != nil {
		return x.HostExcluded
	}
	return nil
}

func (x *DBAllocRequirement) GetHostFilter() *DBFilter {
	if x != nil {
		return x.HostFilter
	}
	return nil
}

func (x *DBAllocRequirement) GetRequire() *DBRequirement {
	if x != nil {
		return x.Require
	}
	return nil
}

func (x *DBAllocRequirement) GetStrategy() int32 {
	if x != nil {
		return x.Strategy
	}
	return 0
}

func (x *DBAllocRequirement) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DBAllocRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Applicant *DBApplicant          `protobuf:"bytes,1,opt,name=applicant,proto3" json:"applicant,omitempty"`
	Requires  []*DBAllocRequirement `protobuf:"bytes,2,rep,name=requires,proto3" json:"requires,omitempty"`
}

func (x *DBAllocRequest) Reset() {
	*x = DBAllocRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBAllocRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBAllocRequest) ProtoMessage() {}

func (x *DBAllocRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBAllocRequest.ProtoReflect.Descriptor instead.
func (*DBAllocRequest) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{10}
}

func (x *DBAllocRequest) GetApplicant() *DBApplicant {
	if x != nil {
		return x.Applicant
	}
	return nil
}

func (x *DBAllocRequest) GetRequires() []*DBAllocRequirement {
	if x != nil {
		return x.Requires
	}
	return nil
}

type DBDiskResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId   string `protobuf:"bytes,1,opt,name=diskId,proto3" json:"diskId,omitempty"`
	DiskName string `protobuf:"bytes,2,opt,name=diskName,proto3" json:"diskName,omitempty"`
	Path     string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Type     string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Capacity int32  `protobuf:"varint,5,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *DBDiskResource) Reset() {
	*x = DBDiskResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBDiskResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBDiskResource) ProtoMessage() {}

func (x *DBDiskResource) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBDiskResource.ProtoReflect.Descriptor instead.
func (*DBDiskResource) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{11}
}

func (x *DBDiskResource) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *DBDiskResource) GetDiskName() string {
	if x != nil {
		return x.DiskName
	}
	return ""
}

func (x *DBDiskResource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DBDiskResource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DBDiskResource) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

type DBPortResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int32   `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int32   `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Ports []int32 `protobuf:"varint,3,rep,packed,name=ports,proto3" json:"ports,omitempty"`
}

func (x *DBPortResource) Reset() {
	*x = DBPortResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBPortResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBPortResource) ProtoMessage() {}

func (x *DBPortResource) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBPortResource.ProtoReflect.Descriptor instead.
func (*DBPortResource) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{12}
}

func (x *DBPortResource) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *DBPortResource) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *DBPortResource) GetPorts() []int32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

type DBHostResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reqseq     int32                 `protobuf:"varint,1,opt,name=reqseq,proto3" json:"reqseq,omitempty"`
	Location   *DBLocation           `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	HostId     string                `protobuf:"bytes,3,opt,name=hostId,proto3" json:"hostId,omitempty"`
	HostName   string                `protobuf:"bytes,4,opt,name=hostName,proto3" json:"hostName,omitempty"`
	HostIp     string                `protobuf:"bytes,5,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	UserName   string                `protobuf:"bytes,6,opt,name=userName,proto3" json:"userName,omitempty"`
	Passwd     string                `protobuf:"bytes,7,opt,name=passwd,proto3" json:"passwd,omitempty"`
	ComputeRes *DBComputeRequirement `protobuf:"bytes,8,opt,name=computeRes,proto3" json:"computeRes,omitempty"`
	DiskRes    *DBDiskResource       `protobuf:"bytes,9,opt,name=diskRes,proto3" json:"diskRes,omitempty"`
	PortRes    []*DBPortResource     `protobuf:"bytes,10,rep,name=portRes,proto3" json:"portRes,omitempty"`
}

func (x *DBHostResource) Reset() {
	*x = DBHostResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBHostResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBHostResource) ProtoMessage() {}

func (x *DBHostResource) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBHostResource.ProtoReflect.Descriptor instead.
func (*DBHostResource) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{13}
}

func (x *DBHostResource) GetReqseq() int32 {
	if x != nil {
		return x.Reqseq
	}
	return 0
}

func (x *DBHostResource) GetLocation() *DBLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DBHostResource) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *DBHostResource) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *DBHostResource) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *DBHostResource) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DBHostResource) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

func (x *DBHostResource) GetComputeRes() *DBComputeRequirement {
	if x != nil {
		return x.ComputeRes
	}
	return nil
}

func (x *DBHostResource) GetDiskRes() *DBDiskResource {
	if x != nil {
		return x.DiskRes
	}
	return nil
}

func (x *DBHostResource) GetPortRes() []*DBPortResource {
	if x != nil {
		return x.PortRes
	}
	return nil
}

type DBAllocResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rs      *DBAllocResponseStatus `protobuf:"bytes,1,opt,name=rs,proto3" json:"rs,omitempty"`
	Results []*DBHostResource      `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *DBAllocResponse) Reset() {
	*x = DBAllocResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBAllocResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBAllocResponse) ProtoMessage() {}

func (x *DBAllocResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBAllocResponse.ProtoReflect.Descriptor instead.
func (*DBAllocResponse) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{14}
}

func (x *DBAllocResponse) GetRs() *DBAllocResponseStatus {
	if x != nil {
		return x.Rs
	}
	return nil
}

func (x *DBAllocResponse) GetResults() []*DBHostResource {
	if x != nil {
		return x.Results
	}
	return nil
}

type DBBatchAllocRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchRequests []*DBAllocRequest `protobuf:"bytes,1,rep,name=batchRequests,proto3" json:"batchRequests,omitempty"`
}

func (x *DBBatchAllocRequest) Reset() {
	*x = DBBatchAllocRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBBatchAllocRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBBatchAllocRequest) ProtoMessage() {}

func (x *DBBatchAllocRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBBatchAllocRequest.ProtoReflect.Descriptor instead.
func (*DBBatchAllocRequest) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{15}
}

func (x *DBBatchAllocRequest) GetBatchRequests() []*DBAllocRequest {
	if x != nil {
		return x.BatchRequests
	}
	return nil
}

type DBBatchAllocResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rs           *DBAllocResponseStatus `protobuf:"bytes,1,opt,name=rs,proto3" json:"rs,omitempty"`
	BatchResults []*DBAllocResponse     `protobuf:"bytes,2,rep,name=batchResults,proto3" json:"batchResults,omitempty"`
}

func (x *DBBatchAllocResponse) Reset() {
	*x = DBBatchAllocResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBBatchAllocResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBBatchAllocResponse) ProtoMessage() {}

func (x *DBBatchAllocResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBBatchAllocResponse.ProtoReflect.Descriptor instead.
func (*DBBatchAllocResponse) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{16}
}

func (x *DBBatchAllocResponse) GetRs() *DBAllocResponseStatus {
	if x != nil {
		return x.Rs
	}
	return nil
}

func (x *DBBatchAllocResponse) GetBatchResults() []*DBAllocResponse {
	if x != nil {
		return x.BatchResults
	}
	return nil
}

type DBRecycleRequire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecycleType int32                 `protobuf:"varint,1,opt,name=recycleType,proto3" json:"recycleType,omitempty"`
	HolderId    string                `protobuf:"bytes,2,opt,name=holderId,proto3" json:"holderId,omitempty"`
	RequestId   string                `protobuf:"bytes,3,opt,name=requestId,proto3" json:"requestId,omitempty"`
	HostId      string                `protobuf:"bytes,4,opt,name=hostId,proto3" json:"hostId,omitempty"`
	HostIp      string                `protobuf:"bytes,5,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	ComputeReq  *DBComputeRequirement `protobuf:"bytes,6,opt,name=computeReq,proto3" json:"computeReq,omitempty"`
	DiskReq     *DBDiskResource       `protobuf:"bytes,7,opt,name=diskReq,proto3" json:"diskReq,omitempty"`
	PortReq     []*DBPortResource     `protobuf:"bytes,8,rep,name=portReq,proto3" json:"portReq,omitempty"`
}

func (x *DBRecycleRequire) Reset() {
	*x = DBRecycleRequire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBRecycleRequire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRecycleRequire) ProtoMessage() {}

func (x *DBRecycleRequire) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBRecycleRequire.ProtoReflect.Descriptor instead.
func (*DBRecycleRequire) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{17}
}

func (x *DBRecycleRequire) GetRecycleType() int32 {
	if x != nil {
		return x.RecycleType
	}
	return 0
}

func (x *DBRecycleRequire) GetHolderId() string {
	if x != nil {
		return x.HolderId
	}
	return ""
}

func (x *DBRecycleRequire) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DBRecycleRequire) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *DBRecycleRequire) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *DBRecycleRequire) GetComputeReq() *DBComputeRequirement {
	if x != nil {
		return x.ComputeReq
	}
	return nil
}

func (x *DBRecycleRequire) GetDiskReq() *DBDiskResource {
	if x != nil {
		return x.DiskReq
	}
	return nil
}

func (x *DBRecycleRequire) GetPortReq() []*DBPortResource {
	if x != nil {
		return x.PortReq
	}
	return nil
}

type DBRecycleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecycleReqs []*DBRecycleRequire `protobuf:"bytes,1,rep,name=RecycleReqs,proto3" json:"RecycleReqs,omitempty"`
}

func (x *DBRecycleRequest) Reset() {
	*x = DBRecycleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBRecycleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRecycleRequest) ProtoMessage() {}

func (x *DBRecycleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBRecycleRequest.ProtoReflect.Descriptor instead.
func (*DBRecycleRequest) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{18}
}

func (x *DBRecycleRequest) GetRecycleReqs() []*DBRecycleRequire {
	if x != nil {
		return x.RecycleReqs
	}
	return nil
}

type DBRecycleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rs *DBAllocResponseStatus `protobuf:"bytes,1,opt,name=rs,proto3" json:"rs,omitempty"`
}

func (x *DBRecycleResponse) Reset() {
	*x = DBRecycleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_allocation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBRecycleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRecycleResponse) ProtoMessage() {}

func (x *DBRecycleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_allocation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBRecycleResponse.ProtoReflect.Descriptor instead.
func (*DBRecycleResponse) Descriptor() ([]byte, []int) {
	return file_db_allocation_proto_rawDescGZIP(), []int{19}
}

func (x *DBRecycleResponse) GetRs() *DBAllocResponseStatus {
	if x != nil {
		return x.Rs
	}
	return nil
}

var File_db_allocation_proto protoreflect.FileDescriptor

var file_db_allocation_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x62, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x15, 0x44, 0x42, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x47, 0x0a, 0x0b,
	0x44, 0x42, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x0a, 0x44, 0x42, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x0a, 0x44, 0x42, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x08, 0x44,
	0x42, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x4a, 0x0a, 0x14, 0x44, 0x42, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75,
	0x43, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75,
	0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x67, 0x0a,
	0x11, 0x44, 0x42, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x11, 0x44, 0x42, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6e, 0x74, 0x22, 0xc0, 0x01,
	0x0a, 0x0d, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x44, 0x42, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x44, 0x42, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x42, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x22, 0xf5, 0x01, 0x0a, 0x12, 0x44, 0x42, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x42, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x42, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x12, 0x29, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44, 0x42, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x0e, 0x44, 0x42, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x44, 0x42, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44, 0x42, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x44, 0x42, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x22, 0x4e, 0x0a, 0x0e, 0x44, 0x42, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x22, 0xde, 0x02, 0x0a, 0x0e, 0x44, 0x42, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x73, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x71, 0x73, 0x65, 0x71, 0x12, 0x27, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x44, 0x42, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x42, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x44, 0x42, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x07, 0x64, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x42, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x22, 0x64, 0x0a, 0x0f, 0x44, 0x42, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x02, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x42, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x02, 0x72, 0x73, 0x12, 0x29,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x44, 0x42, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x13, 0x44, 0x42, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x42, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x74, 0x0a, 0x14, 0x44, 0x42, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x02, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x42,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x02, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x44, 0x42, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xab, 0x02,
	0x0a, 0x10, 0x44, 0x42, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x35,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x42, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x42, 0x44, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x29, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x42, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x22, 0x47, 0x0a, 0x10, 0x44,
	0x42, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x42, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x73, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x02, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x42, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x02, 0x72,
	0x73, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x64, 0x62, 0x70, 0x62, 0x2f, 0x3b,
	0x64, 0x62, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_db_allocation_proto_rawDescOnce sync.Once
	file_db_allocation_proto_rawDescData = file_db_allocation_proto_rawDesc
)

func file_db_allocation_proto_rawDescGZIP() []byte {
	file_db_allocation_proto_rawDescOnce.Do(func() {
		file_db_allocation_proto_rawDescData = protoimpl.X.CompressGZIP(file_db_allocation_proto_rawDescData)
	})
	return file_db_allocation_proto_rawDescData
}

var file_db_allocation_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_db_allocation_proto_goTypes = []interface{}{
	(*DBAllocResponseStatus)(nil), // 0: DBAllocResponseStatus
	(*DBApplicant)(nil),           // 1: DBApplicant
	(*DBLocation)(nil),            // 2: DBLocation
	(*DBExcluded)(nil),            // 3: DBExcluded
	(*DBFilter)(nil),              // 4: DBFilter
	(*DBComputeRequirement)(nil),  // 5: DBComputeRequirement
	(*DBDiskRequirement)(nil),     // 6: DBDiskRequirement
	(*DBPortRequirement)(nil),     // 7: DBPortRequirement
	(*DBRequirement)(nil),         // 8: DBRequirement
	(*DBAllocRequirement)(nil),    // 9: DBAllocRequirement
	(*DBAllocRequest)(nil),        // 10: DBAllocRequest
	(*DBDiskResource)(nil),        // 11: DBDiskResource
	(*DBPortResource)(nil),        // 12: DBPortResource
	(*DBHostResource)(nil),        // 13: DBHostResource
	(*DBAllocResponse)(nil),       // 14: DBAllocResponse
	(*DBBatchAllocRequest)(nil),   // 15: DBBatchAllocRequest
	(*DBBatchAllocResponse)(nil),  // 16: DBBatchAllocResponse
	(*DBRecycleRequire)(nil),      // 17: DBRecycleRequire
	(*DBRecycleRequest)(nil),      // 18: DBRecycleRequest
	(*DBRecycleResponse)(nil),     // 19: DBRecycleResponse
}
var file_db_allocation_proto_depIdxs = []int32{
	6,  // 0: DBRequirement.diskReq:type_name -> DBDiskRequirement
	5,  // 1: DBRequirement.computeReq:type_name -> DBComputeRequirement
	7,  // 2: DBRequirement.portReq:type_name -> DBPortRequirement
	2,  // 3: DBAllocRequirement.location:type_name -> DBLocation
	3,  // 4: DBAllocRequirement.hostExcluded:type_name -> DBExcluded
	4,  // 5: DBAllocRequirement.hostFilter:type_name -> DBFilter
	8,  // 6: DBAllocRequirement.require:type_name -> DBRequirement
	1,  // 7: DBAllocRequest.applicant:type_name -> DBApplicant
	9,  // 8: DBAllocRequest.requires:type_name -> DBAllocRequirement
	2,  // 9: DBHostResource.location:type_name -> DBLocation
	5,  // 10: DBHostResource.computeRes:type_name -> DBComputeRequirement
	11, // 11: DBHostResource.diskRes:type_name -> DBDiskResource
	12, // 12: DBHostResource.portRes:type_name -> DBPortResource
	0,  // 13: DBAllocResponse.rs:type_name -> DBAllocResponseStatus
	13, // 14: DBAllocResponse.results:type_name -> DBHostResource
	10, // 15: DBBatchAllocRequest.batchRequests:type_name -> DBAllocRequest
	0,  // 16: DBBatchAllocResponse.rs:type_name -> DBAllocResponseStatus
	14, // 17: DBBatchAllocResponse.batchResults:type_name -> DBAllocResponse
	5,  // 18: DBRecycleRequire.computeReq:type_name -> DBComputeRequirement
	11, // 19: DBRecycleRequire.diskReq:type_name -> DBDiskResource
	12, // 20: DBRecycleRequire.portReq:type_name -> DBPortResource
	17, // 21: DBRecycleRequest.RecycleReqs:type_name -> DBRecycleRequire
	0,  // 22: DBRecycleResponse.rs:type_name -> DBAllocResponseStatus
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_db_allocation_proto_init() }
func file_db_allocation_proto_init() {
	if File_db_allocation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_db_allocation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBAllocResponseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBApplicant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBExcluded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBComputeRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBDiskRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBPortRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBAllocRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBAllocRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBDiskResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBPortResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBHostResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBAllocResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBBatchAllocRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBBatchAllocResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBRecycleRequire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBRecycleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_allocation_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBRecycleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_db_allocation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_db_allocation_proto_goTypes,
		DependencyIndexes: file_db_allocation_proto_depIdxs,
		MessageInfos:      file_db_allocation_proto_msgTypes,
	}.Build()
	File_db_allocation_proto = out.File
	file_db_allocation_proto_rawDesc = nil
	file_db_allocation_proto_goTypes = nil
	file_db_allocation_proto_depIdxs = nil
}
