syntax = "proto3";

import "common.proto";
option go_package = "./;cluster";

message ResponseStatus {
    int32 code = 1;
    string message = 2;
}

message Disk {
    string diskId = 1;
    string name = 2;            // [sda/sdb/nvmep0...]
    int32 capacity = 3;         // Disk size, Unit: GB
    string path = 4;            // Disk mount path: [/data1]
    string type = 5;
    string usedBy = 6;
    int32 status = 7;
}

message HostInfo {
    string hostId = 1;
    string hostName = 2;
    string dc = 3;
    string az = 4;
    string rack = 5;
    string ip = 6;
    string userName = 7;
    string passwd = 8;
    int32 status = 9;
    string os = 10;             // Host os
    string kernel = 11;
    string spec = 12;           // Host Spec ["4C8G/16C32g"]
    int32 cpuCores = 13;        // Host cpu remains
    int32 memory = 14;          // Host memory remains, Unit:GB
    string nic = 15;            // Host network type: 1GE or 10GE
    string purpose = 16;        // What Purpose is the host used for? [compute/storage or general]
    string performance = 17;
    int64 createAt = 18;
    repeated Disk disks = 19;
}

// The request means "Get 3 '4C8G' Hosts in Zone3"
message AllocationReq {
    string failureDomain = 1;
    int32 cpuCores = 2;
    int32 memory = 3;
    int32 count = 4;
    string purpose = 5;
}

message AllocHost {
    string hostName = 1;
    string ip = 2;
    string userName = 3;
    string passwd = 4;
    int32 cpuCores = 5;
    int32 memory = 6;
    Disk disk = 7;
}

message FailureDomainResource {
    string failureDomain = 1;
    string purpose = 2;
    string spec = 3;
    int32 count = 4;
}

message ImportHostRequest {
    HostInfo host = 1;
}

message ImportHostResponse {
    ResponseStatus rs = 1;
    string HostId = 2;
}

message ImportHostsInBatchRequest {
    repeated HostInfo hosts = 1;
}

message ImportHostsInBatchResponse {
    ResponseStatus rs = 1;
    repeated string HostIds = 2;
}

message RemoveHostRequest {
    string hostId = 1;
}

message RemoveHostResponse {
    ResponseStatus rs = 1;
}

message RemoveHostsInBatchRequest {
    repeated string hostIds = 1;
}

message RemoveHostsInBatchResponse {
    ResponseStatus rs = 1;
}

message ListHostsRequest {
    int32 status = 1;
    string purpose = 2;
    PageDTO pageReq = 3;
}

message ListHostsResponse {
    ResponseStatus rs = 1;
    repeated HostInfo hostList = 2;
    PageDTO pageReq = 3;
}

message CheckDetailsRequest {
    string hostId = 1;
}

message CheckDetailsResponse {
    ResponseStatus rs = 1;
    HostInfo details = 2;
}

message AllocHostsRequest {
    repeated AllocationReq pdReq = 1;
    repeated AllocationReq tidbReq = 2;
    repeated AllocationReq tikvReq = 3;
}

message AllocHostResponse {
    ResponseStatus rs = 1;
    repeated AllocHost pdHosts = 2;
    repeated AllocHost tidbHosts = 3;
    repeated AllocHost tikvHosts = 4;
}

message GetFailureDomainRequest {
    int32 failureDomainType = 1;
}

message GetFailureDomainResponse {
    ResponseStatus rs = 1;
    repeated FailureDomainResource fdList = 2;
}

