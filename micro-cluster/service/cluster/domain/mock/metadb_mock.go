// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/chencheng/Documents/project/tiem/src/github.com/pingcap-inc/tiem/micro-metadb/proto/db.pb.micro.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	"github.com/pingcap-inc/tiem/library/client/metadb/dbpb"
	reflect "reflect"

	client "github.com/asim/go-micro/v3/client"
	gomock "github.com/golang/mock/gomock"
)

// MockTiEMDBService is a mock of TiEMDBService interface.
type MockTiEMDBService struct {
	ctrl     *gomock.Controller
	recorder *MockTiEMDBServiceMockRecorder
}

// MockTiEMDBServiceMockRecorder is the mock recorder for MockTiEMDBService.
type MockTiEMDBServiceMockRecorder struct {
	mock *MockTiEMDBService
}

// NewMockTiEMDBService creates a new mock instance.
func NewMockTiEMDBService(ctrl *gomock.Controller) *MockTiEMDBService {
	mock := &MockTiEMDBService{ctrl: ctrl}
	mock.recorder = &MockTiEMDBServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTiEMDBService) EXPECT() *MockTiEMDBServiceMockRecorder {
	return m.recorder
}

// AddHost mocks base method.
func (m *MockTiEMDBService) AddHost(ctx context.Context, in *dbpb.DBAddHostRequest, opts ...client.CallOption) (*dbpb.DBAddHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddHost", varargs...)
	ret0, _ := ret[0].(*dbpb.DBAddHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHost indicates an expected call of AddHost.
func (mr *MockTiEMDBServiceMockRecorder) AddHost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHost", reflect.TypeOf((*MockTiEMDBService)(nil).AddHost), varargs...)
}

// AddHostsInBatch mocks base method.
func (m *MockTiEMDBService) AddHostsInBatch(ctx context.Context, in *dbpb.DBAddHostsInBatchRequest, opts ...client.CallOption) (*dbpb.DBAddHostsInBatchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddHostsInBatch", varargs...)
	ret0, _ := ret[0].(*dbpb.DBAddHostsInBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHostsInBatch indicates an expected call of AddHostsInBatch.
func (mr *MockTiEMDBServiceMockRecorder) AddHostsInBatch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHostsInBatch", reflect.TypeOf((*MockTiEMDBService)(nil).AddHostsInBatch), varargs...)
}

// AllocHosts mocks base method.
func (m *MockTiEMDBService) AllocHosts(ctx context.Context, in *dbpb.DBAllocHostsRequest, opts ...client.CallOption) (*dbpb.DBAllocHostsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllocHosts", varargs...)
	ret0, _ := ret[0].(*dbpb.DBAllocHostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocHosts indicates an expected call of AllocHosts.
func (mr *MockTiEMDBServiceMockRecorder) AllocHosts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocHosts", reflect.TypeOf((*MockTiEMDBService)(nil).AllocHosts), varargs...)
}

// AllocResources mocks base method.
func (m *MockTiEMDBService) AllocResources(ctx context.Context, in *dbpb.DBAllocRequest, opts ...client.CallOption) (*dbpb.DBAllocResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllocResources", varargs...)
	ret0, _ := ret[0].(*dbpb.DBAllocResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocResources indicates an expected call of AllocResources.
func (mr *MockTiEMDBServiceMockRecorder) AllocResources(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocResources", reflect.TypeOf((*MockTiEMDBService)(nil).AllocResources), varargs...)
}

// AllocResourcesInBatch mocks base method.
func (m *MockTiEMDBService) AllocResourcesInBatch(ctx context.Context, in *dbpb.DBBatchAllocRequest, opts ...client.CallOption) (*dbpb.DBBatchAllocResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllocResourcesInBatch", varargs...)
	ret0, _ := ret[0].(*dbpb.DBBatchAllocResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocResourcesInBatch indicates an expected call of AllocResourcesInBatch.
func (mr *MockTiEMDBServiceMockRecorder) AllocResourcesInBatch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocResourcesInBatch", reflect.TypeOf((*MockTiEMDBService)(nil).AllocResourcesInBatch), varargs...)
}

// CheckDetails mocks base method.
func (m *MockTiEMDBService) CheckDetails(ctx context.Context, in *dbpb.DBCheckDetailsRequest, opts ...client.CallOption) (*dbpb.DBCheckDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckDetails", varargs...)
	ret0, _ := ret[0].(*dbpb.DBCheckDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDetails indicates an expected call of CheckDetails.
func (mr *MockTiEMDBServiceMockRecorder) CheckDetails(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDetails", reflect.TypeOf((*MockTiEMDBService)(nil).CheckDetails), varargs...)
}

// CreateCluster mocks base method.
func (m *MockTiEMDBService) CreateCluster(ctx context.Context, in *dbpb.DBCreateClusterRequest, opts ...client.CallOption) (*dbpb.DBCreateClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCluster", varargs...)
	ret0, _ := ret[0].(*dbpb.DBCreateClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockTiEMDBServiceMockRecorder) CreateCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockTiEMDBService)(nil).CreateCluster), varargs...)
}

// CreateFlow mocks base method.
func (m *MockTiEMDBService) CreateFlow(ctx context.Context, in *dbpb.DBCreateFlowRequest, opts ...client.CallOption) (*dbpb.DBCreateFlowResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFlow", varargs...)
	ret0, _ := ret[0].(*dbpb.DBCreateFlowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlow indicates an expected call of CreateFlow.
func (mr *MockTiEMDBServiceMockRecorder) CreateFlow(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlow", reflect.TypeOf((*MockTiEMDBService)(nil).CreateFlow), varargs...)
}

// CreateInstance mocks base method.
func (m *MockTiEMDBService) CreateInstance(ctx context.Context, in *dbpb.DBCreateInstanceRequest, opts ...client.CallOption) (*dbpb.DBCreateInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInstance", varargs...)
	ret0, _ := ret[0].(*dbpb.DBCreateInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockTiEMDBServiceMockRecorder) CreateInstance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockTiEMDBService)(nil).CreateInstance), varargs...)
}

// CreateTask mocks base method.
func (m *MockTiEMDBService) CreateTask(ctx context.Context, in *dbpb.DBCreateTaskRequest, opts ...client.CallOption) (*dbpb.DBCreateTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTask", varargs...)
	ret0, _ := ret[0].(*dbpb.DBCreateTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTiEMDBServiceMockRecorder) CreateTask(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTiEMDBService)(nil).CreateTask), varargs...)
}

// CreateTiupTask mocks base method.
func (m *MockTiEMDBService) CreateTiupTask(ctx context.Context, in *dbpb.CreateTiupTaskRequest, opts ...client.CallOption) (*dbpb.CreateTiupTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTiupTask", varargs...)
	ret0, _ := ret[0].(*dbpb.CreateTiupTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTiupTask indicates an expected call of CreateTiupTask.
func (mr *MockTiEMDBServiceMockRecorder) CreateTiupTask(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTiupTask", reflect.TypeOf((*MockTiEMDBService)(nil).CreateTiupTask), varargs...)
}

// CreateTransportRecord mocks base method.
func (m *MockTiEMDBService) CreateTransportRecord(ctx context.Context, in *dbpb.DBCreateTransportRecordRequest, opts ...client.CallOption) (*dbpb.DBCreateTransportRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTransportRecord", varargs...)
	ret0, _ := ret[0].(*dbpb.DBCreateTransportRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransportRecord indicates an expected call of CreateTransportRecord.
func (mr *MockTiEMDBServiceMockRecorder) CreateTransportRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransportRecord", reflect.TypeOf((*MockTiEMDBService)(nil).CreateTransportRecord), varargs...)
}

// DeleteBackupRecord mocks base method.
func (m *MockTiEMDBService) DeleteBackupRecord(ctx context.Context, in *dbpb.DBDeleteBackupRecordRequest, opts ...client.CallOption) (*dbpb.DBDeleteBackupRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackupRecord", varargs...)
	ret0, _ := ret[0].(*dbpb.DBDeleteBackupRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupRecord indicates an expected call of DeleteBackupRecord.
func (mr *MockTiEMDBServiceMockRecorder) DeleteBackupRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupRecord", reflect.TypeOf((*MockTiEMDBService)(nil).DeleteBackupRecord), varargs...)
}

// DeleteCluster mocks base method.
func (m *MockTiEMDBService) DeleteCluster(ctx context.Context, in *dbpb.DBDeleteClusterRequest, opts ...client.CallOption) (*dbpb.DBDeleteClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCluster", varargs...)
	ret0, _ := ret[0].(*dbpb.DBDeleteClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockTiEMDBServiceMockRecorder) DeleteCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockTiEMDBService)(nil).DeleteCluster), varargs...)
}

// FindAccount mocks base method.
func (m *MockTiEMDBService) FindAccount(ctx context.Context, in *dbpb.DBFindAccountRequest, opts ...client.CallOption) (*dbpb.DBFindAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAccount", varargs...)
	ret0, _ := ret[0].(*dbpb.DBFindAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccount indicates an expected call of FindAccount.
func (mr *MockTiEMDBServiceMockRecorder) FindAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccount", reflect.TypeOf((*MockTiEMDBService)(nil).FindAccount), varargs...)
}

// FindAccountById mocks base method.
func (m *MockTiEMDBService) FindAccountById(ctx context.Context, in *dbpb.DBFindAccountByIdRequest, opts ...client.CallOption) (*dbpb.DBFindAccountByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAccountById", varargs...)
	ret0, _ := ret[0].(*dbpb.DBFindAccountByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccountById indicates an expected call of FindAccountById.
func (mr *MockTiEMDBServiceMockRecorder) FindAccountById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccountById", reflect.TypeOf((*MockTiEMDBService)(nil).FindAccountById), varargs...)
}

// FindRolesByPermission mocks base method.
func (m *MockTiEMDBService) FindRolesByPermission(ctx context.Context, in *dbpb.DBFindRolesByPermissionRequest, opts ...client.CallOption) (*dbpb.DBFindRolesByPermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRolesByPermission", varargs...)
	ret0, _ := ret[0].(*dbpb.DBFindRolesByPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRolesByPermission indicates an expected call of FindRolesByPermission.
func (mr *MockTiEMDBServiceMockRecorder) FindRolesByPermission(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRolesByPermission", reflect.TypeOf((*MockTiEMDBService)(nil).FindRolesByPermission), varargs...)
}

// FindTenant mocks base method.
func (m *MockTiEMDBService) FindTenant(ctx context.Context, in *dbpb.DBFindTenantRequest, opts ...client.CallOption) (*dbpb.DBFindTenantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindTenant", varargs...)
	ret0, _ := ret[0].(*dbpb.DBFindTenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTenant indicates an expected call of FindTenant.
func (mr *MockTiEMDBServiceMockRecorder) FindTenant(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTenant", reflect.TypeOf((*MockTiEMDBService)(nil).FindTenant), varargs...)
}

// FindTiupTaskByID mocks base method.
func (m *MockTiEMDBService) FindTiupTaskByID(ctx context.Context, in *dbpb.FindTiupTaskByIDRequest, opts ...client.CallOption) (*dbpb.FindTiupTaskByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindTiupTaskByID", varargs...)
	ret0, _ := ret[0].(*dbpb.FindTiupTaskByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTiupTaskByID indicates an expected call of FindTiupTaskByID.
func (mr *MockTiEMDBServiceMockRecorder) FindTiupTaskByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTiupTaskByID", reflect.TypeOf((*MockTiEMDBService)(nil).FindTiupTaskByID), varargs...)
}

// FindToken mocks base method.
func (m *MockTiEMDBService) FindToken(ctx context.Context, in *dbpb.DBFindTokenRequest, opts ...client.CallOption) (*dbpb.DBFindTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindToken", varargs...)
	ret0, _ := ret[0].(*dbpb.DBFindTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindToken indicates an expected call of FindToken.
func (mr *MockTiEMDBServiceMockRecorder) FindToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindToken", reflect.TypeOf((*MockTiEMDBService)(nil).FindToken), varargs...)
}

// FindTrasnportRecordByID mocks base method.
func (m *MockTiEMDBService) FindTrasnportRecordByID(ctx context.Context, in *dbpb.DBFindTransportRecordByIDRequest, opts ...client.CallOption) (*dbpb.DBFindTransportRecordByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindTrasnportRecordByID", varargs...)
	ret0, _ := ret[0].(*dbpb.DBFindTransportRecordByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTrasnportRecordByID indicates an expected call of FindTrasnportRecordByID.
func (mr *MockTiEMDBServiceMockRecorder) FindTrasnportRecordByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTrasnportRecordByID", reflect.TypeOf((*MockTiEMDBService)(nil).FindTrasnportRecordByID), varargs...)
}

// GetCurrentParametersRecord mocks base method.
func (m *MockTiEMDBService) GetCurrentParametersRecord(ctx context.Context, in *dbpb.DBGetCurrentParametersRequest, opts ...client.CallOption) (*dbpb.DBGetCurrentParametersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentParametersRecord", varargs...)
	ret0, _ := ret[0].(*dbpb.DBGetCurrentParametersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentParametersRecord indicates an expected call of GetCurrentParametersRecord.
func (mr *MockTiEMDBServiceMockRecorder) GetCurrentParametersRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentParametersRecord", reflect.TypeOf((*MockTiEMDBService)(nil).GetCurrentParametersRecord), varargs...)
}

// GetFailureDomain mocks base method.
func (m *MockTiEMDBService) GetFailureDomain(ctx context.Context, in *dbpb.DBGetFailureDomainRequest, opts ...client.CallOption) (*dbpb.DBGetFailureDomainResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFailureDomain", varargs...)
	ret0, _ := ret[0].(*dbpb.DBGetFailureDomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailureDomain indicates an expected call of GetFailureDomain.
func (mr *MockTiEMDBServiceMockRecorder) GetFailureDomain(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailureDomain", reflect.TypeOf((*MockTiEMDBService)(nil).GetFailureDomain), varargs...)
}

// GetTiupTaskStatusByBizID mocks base method.
func (m *MockTiEMDBService) GetTiupTaskStatusByBizID(ctx context.Context, in *dbpb.GetTiupTaskStatusByBizIDRequest, opts ...client.CallOption) (*dbpb.GetTiupTaskStatusByBizIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTiupTaskStatusByBizID", varargs...)
	ret0, _ := ret[0].(*dbpb.GetTiupTaskStatusByBizIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTiupTaskStatusByBizID indicates an expected call of GetTiupTaskStatusByBizID.
func (mr *MockTiEMDBServiceMockRecorder) GetTiupTaskStatusByBizID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTiupTaskStatusByBizID", reflect.TypeOf((*MockTiEMDBService)(nil).GetTiupTaskStatusByBizID), varargs...)
}

// ListBackupRecords mocks base method.
func (m *MockTiEMDBService) ListBackupRecords(ctx context.Context, in *dbpb.DBListBackupRecordsRequest, opts ...client.CallOption) (*dbpb.DBListBackupRecordsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupRecords", varargs...)
	ret0, _ := ret[0].(*dbpb.DBListBackupRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupRecords indicates an expected call of ListBackupRecords.
func (mr *MockTiEMDBServiceMockRecorder) ListBackupRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupRecords", reflect.TypeOf((*MockTiEMDBService)(nil).ListBackupRecords), varargs...)
}

// ListCluster mocks base method.
func (m *MockTiEMDBService) ListCluster(ctx context.Context, in *dbpb.DBListClusterRequest, opts ...client.CallOption) (*dbpb.DBListClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCluster", varargs...)
	ret0, _ := ret[0].(*dbpb.DBListClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCluster indicates an expected call of ListCluster.
func (mr *MockTiEMDBServiceMockRecorder) ListCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCluster", reflect.TypeOf((*MockTiEMDBService)(nil).ListCluster), varargs...)
}

// ListFlows mocks base method.
func (m *MockTiEMDBService) ListFlows(ctx context.Context, in *dbpb.DBListFlowsRequest, opts ...client.CallOption) (*dbpb.DBListFlowsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFlows", varargs...)
	ret0, _ := ret[0].(*dbpb.DBListFlowsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlows indicates an expected call of ListFlows.
func (mr *MockTiEMDBServiceMockRecorder) ListFlows(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlows", reflect.TypeOf((*MockTiEMDBService)(nil).ListFlows), varargs...)
}

// ListHost mocks base method.
func (m *MockTiEMDBService) ListHost(ctx context.Context, in *dbpb.DBListHostsRequest, opts ...client.CallOption) (*dbpb.DBListHostsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHost", varargs...)
	ret0, _ := ret[0].(*dbpb.DBListHostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHost indicates an expected call of ListHost.
func (mr *MockTiEMDBServiceMockRecorder) ListHost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHost", reflect.TypeOf((*MockTiEMDBService)(nil).ListHost), varargs...)
}

// ListTrasnportRecord mocks base method.
func (m *MockTiEMDBService) ListTrasnportRecord(ctx context.Context, in *dbpb.DBListTransportRecordRequest, opts ...client.CallOption) (*dbpb.DBListTransportRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrasnportRecord", varargs...)
	ret0, _ := ret[0].(*dbpb.DBListTransportRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrasnportRecord indicates an expected call of ListTrasnportRecord.
func (mr *MockTiEMDBServiceMockRecorder) ListTrasnportRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrasnportRecord", reflect.TypeOf((*MockTiEMDBService)(nil).ListTrasnportRecord), varargs...)
}

// LoadCluster mocks base method.
func (m *MockTiEMDBService) LoadCluster(ctx context.Context, in *dbpb.DBLoadClusterRequest, opts ...client.CallOption) (*dbpb.DBLoadClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadCluster", varargs...)
	ret0, _ := ret[0].(*dbpb.DBLoadClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCluster indicates an expected call of LoadCluster.
func (mr *MockTiEMDBServiceMockRecorder) LoadCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCluster", reflect.TypeOf((*MockTiEMDBService)(nil).LoadCluster), varargs...)
}

// LoadFlow mocks base method.
func (m *MockTiEMDBService) LoadFlow(ctx context.Context, in *dbpb.DBLoadFlowRequest, opts ...client.CallOption) (*dbpb.DBLoadFlowResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadFlow", varargs...)
	ret0, _ := ret[0].(*dbpb.DBLoadFlowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadFlow indicates an expected call of LoadFlow.
func (mr *MockTiEMDBServiceMockRecorder) LoadFlow(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFlow", reflect.TypeOf((*MockTiEMDBService)(nil).LoadFlow), varargs...)
}

// LoadTask mocks base method.
func (m *MockTiEMDBService) LoadTask(ctx context.Context, in *dbpb.DBLoadTaskRequest, opts ...client.CallOption) (*dbpb.DBLoadTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadTask", varargs...)
	ret0, _ := ret[0].(*dbpb.DBLoadTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTask indicates an expected call of LoadTask.
func (mr *MockTiEMDBServiceMockRecorder) LoadTask(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTask", reflect.TypeOf((*MockTiEMDBService)(nil).LoadTask), varargs...)
}

// QueryBackupRecords mocks base method.
func (m *MockTiEMDBService) QueryBackupRecords(ctx context.Context, in *dbpb.DBQueryBackupRecordRequest, opts ...client.CallOption) (*dbpb.DBQueryBackupRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryBackupRecords", varargs...)
	ret0, _ := ret[0].(*dbpb.DBQueryBackupRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBackupRecords indicates an expected call of QueryBackupRecords.
func (mr *MockTiEMDBServiceMockRecorder) QueryBackupRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBackupRecords", reflect.TypeOf((*MockTiEMDBService)(nil).QueryBackupRecords), varargs...)
}

// QueryBackupStrategy mocks base method.
func (m *MockTiEMDBService) QueryBackupStrategy(ctx context.Context, in *dbpb.DBQueryBackupStrategyRequest, opts ...client.CallOption) (*dbpb.DBQueryBackupStrategyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryBackupStrategy", varargs...)
	ret0, _ := ret[0].(*dbpb.DBQueryBackupStrategyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBackupStrategy indicates an expected call of QueryBackupStrategy.
func (mr *MockTiEMDBServiceMockRecorder) QueryBackupStrategy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBackupStrategy", reflect.TypeOf((*MockTiEMDBService)(nil).QueryBackupStrategy), varargs...)
}

// QueryBackupStrategyByTime mocks base method.
func (m *MockTiEMDBService) QueryBackupStrategyByTime(ctx context.Context, in *dbpb.DBQueryBackupStrategyByTimeRequest, opts ...client.CallOption) (*dbpb.DBQueryBackupStrategyByTimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryBackupStrategyByTime", varargs...)
	ret0, _ := ret[0].(*dbpb.DBQueryBackupStrategyByTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBackupStrategyByTime indicates an expected call of QueryBackupStrategyByTime.
func (mr *MockTiEMDBServiceMockRecorder) QueryBackupStrategyByTime(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBackupStrategyByTime", reflect.TypeOf((*MockTiEMDBService)(nil).QueryBackupStrategyByTime), varargs...)
}

// RecycleResources mocks base method.
func (m *MockTiEMDBService) RecycleResources(ctx context.Context, in *dbpb.DBRecycleRequest, opts ...client.CallOption) (*dbpb.DBRecycleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RecycleResources", varargs...)
	ret0, _ := ret[0].(*dbpb.DBRecycleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecycleResources indicates an expected call of RecycleResources.
func (mr *MockTiEMDBServiceMockRecorder) RecycleResources(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecycleResources", reflect.TypeOf((*MockTiEMDBService)(nil).RecycleResources), varargs...)
}

// RemoveHost mocks base method.
func (m *MockTiEMDBService) RemoveHost(ctx context.Context, in *dbpb.DBRemoveHostRequest, opts ...client.CallOption) (*dbpb.DBRemoveHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveHost", varargs...)
	ret0, _ := ret[0].(*dbpb.DBRemoveHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHost indicates an expected call of RemoveHost.
func (mr *MockTiEMDBServiceMockRecorder) RemoveHost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHost", reflect.TypeOf((*MockTiEMDBService)(nil).RemoveHost), varargs...)
}

// RemoveHostsInBatch mocks base method.
func (m *MockTiEMDBService) RemoveHostsInBatch(ctx context.Context, in *dbpb.DBRemoveHostsInBatchRequest, opts ...client.CallOption) (*dbpb.DBRemoveHostsInBatchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveHostsInBatch", varargs...)
	ret0, _ := ret[0].(*dbpb.DBRemoveHostsInBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHostsInBatch indicates an expected call of RemoveHostsInBatch.
func (mr *MockTiEMDBServiceMockRecorder) RemoveHostsInBatch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHostsInBatch", reflect.TypeOf((*MockTiEMDBService)(nil).RemoveHostsInBatch), varargs...)
}

// SaveBackupRecord mocks base method.
func (m *MockTiEMDBService) SaveBackupRecord(ctx context.Context, in *dbpb.DBSaveBackupRecordRequest, opts ...client.CallOption) (*dbpb.DBSaveBackupRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBackupRecord", varargs...)
	ret0, _ := ret[0].(*dbpb.DBSaveBackupRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBackupRecord indicates an expected call of SaveBackupRecord.
func (mr *MockTiEMDBServiceMockRecorder) SaveBackupRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBackupRecord", reflect.TypeOf((*MockTiEMDBService)(nil).SaveBackupRecord), varargs...)
}

// SaveBackupStrategy mocks base method.
func (m *MockTiEMDBService) SaveBackupStrategy(ctx context.Context, in *dbpb.DBSaveBackupStrategyRequest, opts ...client.CallOption) (*dbpb.DBSaveBackupStrategyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBackupStrategy", varargs...)
	ret0, _ := ret[0].(*dbpb.DBSaveBackupStrategyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBackupStrategy indicates an expected call of SaveBackupStrategy.
func (mr *MockTiEMDBServiceMockRecorder) SaveBackupStrategy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBackupStrategy", reflect.TypeOf((*MockTiEMDBService)(nil).SaveBackupStrategy), varargs...)
}

// SaveParametersRecord mocks base method.
func (m *MockTiEMDBService) SaveParametersRecord(ctx context.Context, in *dbpb.DBSaveParametersRequest, opts ...client.CallOption) (*dbpb.DBSaveParametersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveParametersRecord", varargs...)
	ret0, _ := ret[0].(*dbpb.DBSaveParametersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveParametersRecord indicates an expected call of SaveParametersRecord.
func (mr *MockTiEMDBServiceMockRecorder) SaveParametersRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveParametersRecord", reflect.TypeOf((*MockTiEMDBService)(nil).SaveParametersRecord), varargs...)
}

// SaveRecoverRecord mocks base method.
func (m *MockTiEMDBService) SaveRecoverRecord(ctx context.Context, in *dbpb.DBSaveRecoverRecordRequest, opts ...client.CallOption) (*dbpb.DBSaveRecoverRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveRecoverRecord", varargs...)
	ret0, _ := ret[0].(*dbpb.DBSaveRecoverRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRecoverRecord indicates an expected call of SaveRecoverRecord.
func (mr *MockTiEMDBServiceMockRecorder) SaveRecoverRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRecoverRecord", reflect.TypeOf((*MockTiEMDBService)(nil).SaveRecoverRecord), varargs...)
}

// SaveToken mocks base method.
func (m *MockTiEMDBService) SaveToken(ctx context.Context, in *dbpb.DBSaveTokenRequest, opts ...client.CallOption) (*dbpb.DBSaveTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveToken", varargs...)
	ret0, _ := ret[0].(*dbpb.DBSaveTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveToken indicates an expected call of SaveToken.
func (mr *MockTiEMDBServiceMockRecorder) SaveToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToken", reflect.TypeOf((*MockTiEMDBService)(nil).SaveToken), varargs...)
}

// UpdateBackupRecord mocks base method.
func (m *MockTiEMDBService) UpdateBackupRecord(ctx context.Context, in *dbpb.DBUpdateBackupRecordRequest, opts ...client.CallOption) (*dbpb.DBUpdateBackupRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBackupRecord", varargs...)
	ret0, _ := ret[0].(*dbpb.DBUpdateBackupRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackupRecord indicates an expected call of UpdateBackupRecord.
func (mr *MockTiEMDBServiceMockRecorder) UpdateBackupRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackupRecord", reflect.TypeOf((*MockTiEMDBService)(nil).UpdateBackupRecord), varargs...)
}

// UpdateClusterStatus mocks base method.
func (m *MockTiEMDBService) UpdateClusterStatus(ctx context.Context, in *dbpb.DBUpdateClusterStatusRequest, opts ...client.CallOption) (*dbpb.DBUpdateClusterStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterStatus", varargs...)
	ret0, _ := ret[0].(*dbpb.DBUpdateClusterStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterStatus indicates an expected call of UpdateClusterStatus.
func (mr *MockTiEMDBServiceMockRecorder) UpdateClusterStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterStatus", reflect.TypeOf((*MockTiEMDBService)(nil).UpdateClusterStatus), varargs...)
}

// UpdateClusterTopologyConfig mocks base method.
func (m *MockTiEMDBService) UpdateClusterTopologyConfig(ctx context.Context, in *dbpb.DBUpdateTopologyConfigRequest, opts ...client.CallOption) (*dbpb.DBUpdateTopologyConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterTopologyConfig", varargs...)
	ret0, _ := ret[0].(*dbpb.DBUpdateTopologyConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterTopologyConfig indicates an expected call of UpdateClusterTopologyConfig.
func (mr *MockTiEMDBServiceMockRecorder) UpdateClusterTopologyConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterTopologyConfig", reflect.TypeOf((*MockTiEMDBService)(nil).UpdateClusterTopologyConfig), varargs...)
}

// UpdateFlow mocks base method.
func (m *MockTiEMDBService) UpdateFlow(ctx context.Context, in *dbpb.DBUpdateFlowRequest, opts ...client.CallOption) (*dbpb.DBUpdateFlowResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFlow", varargs...)
	ret0, _ := ret[0].(*dbpb.DBUpdateFlowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlow indicates an expected call of UpdateFlow.
func (mr *MockTiEMDBServiceMockRecorder) UpdateFlow(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlow", reflect.TypeOf((*MockTiEMDBService)(nil).UpdateFlow), varargs...)
}

// UpdateTask mocks base method.
func (m *MockTiEMDBService) UpdateTask(ctx context.Context, in *dbpb.DBUpdateTaskRequest, opts ...client.CallOption) (*dbpb.DBUpdateTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTask", varargs...)
	ret0, _ := ret[0].(*dbpb.DBUpdateTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTiEMDBServiceMockRecorder) UpdateTask(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTiEMDBService)(nil).UpdateTask), varargs...)
}

// UpdateTiupTask mocks base method.
func (m *MockTiEMDBService) UpdateTiupTask(ctx context.Context, in *dbpb.UpdateTiupTaskRequest, opts ...client.CallOption) (*dbpb.UpdateTiupTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTiupTask", varargs...)
	ret0, _ := ret[0].(*dbpb.UpdateTiupTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTiupTask indicates an expected call of UpdateTiupTask.
func (mr *MockTiEMDBServiceMockRecorder) UpdateTiupTask(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTiupTask", reflect.TypeOf((*MockTiEMDBService)(nil).UpdateTiupTask), varargs...)
}

// UpdateTransportRecord mocks base method.
func (m *MockTiEMDBService) UpdateTransportRecord(ctx context.Context, in *dbpb.DBUpdateTransportRecordRequest, opts ...client.CallOption) (*dbpb.DBUpdateTransportRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTransportRecord", varargs...)
	ret0, _ := ret[0].(*dbpb.DBUpdateTransportRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransportRecord indicates an expected call of UpdateTransportRecord.
func (mr *MockTiEMDBServiceMockRecorder) UpdateTransportRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransportRecord", reflect.TypeOf((*MockTiEMDBService)(nil).UpdateTransportRecord), varargs...)
}

// MockTiEMDBServiceHandler is a mock of TiEMDBServiceHandler interface.
type MockTiEMDBServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTiEMDBServiceHandlerMockRecorder
}

// MockTiEMDBServiceHandlerMockRecorder is the mock recorder for MockTiEMDBServiceHandler.
type MockTiEMDBServiceHandlerMockRecorder struct {
	mock *MockTiEMDBServiceHandler
}

// NewMockTiEMDBServiceHandler creates a new mock instance.
func NewMockTiEMDBServiceHandler(ctrl *gomock.Controller) *MockTiEMDBServiceHandler {
	mock := &MockTiEMDBServiceHandler{ctrl: ctrl}
	mock.recorder = &MockTiEMDBServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTiEMDBServiceHandler) EXPECT() *MockTiEMDBServiceHandlerMockRecorder {
	return m.recorder
}

// AddHost mocks base method.
func (m *MockTiEMDBServiceHandler) AddHost(arg0 context.Context, arg1 *dbpb.DBAddHostRequest, arg2 *dbpb.DBAddHostResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHost", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHost indicates an expected call of AddHost.
func (mr *MockTiEMDBServiceHandlerMockRecorder) AddHost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHost", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).AddHost), arg0, arg1, arg2)
}

// AddHostsInBatch mocks base method.
func (m *MockTiEMDBServiceHandler) AddHostsInBatch(arg0 context.Context, arg1 *dbpb.DBAddHostsInBatchRequest, arg2 *dbpb.DBAddHostsInBatchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHostsInBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHostsInBatch indicates an expected call of AddHostsInBatch.
func (mr *MockTiEMDBServiceHandlerMockRecorder) AddHostsInBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHostsInBatch", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).AddHostsInBatch), arg0, arg1, arg2)
}

// AllocHosts mocks base method.
func (m *MockTiEMDBServiceHandler) AllocHosts(arg0 context.Context, arg1 *dbpb.DBAllocHostsRequest, arg2 *dbpb.DBAllocHostsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocHosts", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllocHosts indicates an expected call of AllocHosts.
func (mr *MockTiEMDBServiceHandlerMockRecorder) AllocHosts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocHosts", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).AllocHosts), arg0, arg1, arg2)
}

// AllocResources mocks base method.
func (m *MockTiEMDBServiceHandler) AllocResources(arg0 context.Context, arg1 *dbpb.DBAllocRequest, arg2 *dbpb.DBAllocResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocResources", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllocResources indicates an expected call of AllocResources.
func (mr *MockTiEMDBServiceHandlerMockRecorder) AllocResources(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocResources", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).AllocResources), arg0, arg1, arg2)
}

// AllocResourcesInBatch mocks base method.
func (m *MockTiEMDBServiceHandler) AllocResourcesInBatch(arg0 context.Context, arg1 *dbpb.DBBatchAllocRequest, arg2 *dbpb.DBBatchAllocResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocResourcesInBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllocResourcesInBatch indicates an expected call of AllocResourcesInBatch.
func (mr *MockTiEMDBServiceHandlerMockRecorder) AllocResourcesInBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocResourcesInBatch", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).AllocResourcesInBatch), arg0, arg1, arg2)
}

// CheckDetails mocks base method.
func (m *MockTiEMDBServiceHandler) CheckDetails(arg0 context.Context, arg1 *dbpb.DBCheckDetailsRequest, arg2 *dbpb.DBCheckDetailsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDetails", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDetails indicates an expected call of CheckDetails.
func (mr *MockTiEMDBServiceHandlerMockRecorder) CheckDetails(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDetails", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).CheckDetails), arg0, arg1, arg2)
}

// CreateCluster mocks base method.
func (m *MockTiEMDBServiceHandler) CreateCluster(arg0 context.Context, arg1 *dbpb.DBCreateClusterRequest, arg2 *dbpb.DBCreateClusterResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockTiEMDBServiceHandlerMockRecorder) CreateCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).CreateCluster), arg0, arg1, arg2)
}

// CreateFlow mocks base method.
func (m *MockTiEMDBServiceHandler) CreateFlow(arg0 context.Context, arg1 *dbpb.DBCreateFlowRequest, arg2 *dbpb.DBCreateFlowResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlow", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFlow indicates an expected call of CreateFlow.
func (mr *MockTiEMDBServiceHandlerMockRecorder) CreateFlow(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlow", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).CreateFlow), arg0, arg1, arg2)
}

// CreateInstance mocks base method.
func (m *MockTiEMDBServiceHandler) CreateInstance(arg0 context.Context, arg1 *dbpb.DBCreateInstanceRequest, arg2 *dbpb.DBCreateInstanceResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockTiEMDBServiceHandlerMockRecorder) CreateInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).CreateInstance), arg0, arg1, arg2)
}

// CreateTask mocks base method.
func (m *MockTiEMDBServiceHandler) CreateTask(arg0 context.Context, arg1 *dbpb.DBCreateTaskRequest, arg2 *dbpb.DBCreateTaskResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTiEMDBServiceHandlerMockRecorder) CreateTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).CreateTask), arg0, arg1, arg2)
}

// CreateTiupTask mocks base method.
func (m *MockTiEMDBServiceHandler) CreateTiupTask(arg0 context.Context, arg1 *dbpb.CreateTiupTaskRequest, arg2 *dbpb.CreateTiupTaskResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTiupTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTiupTask indicates an expected call of CreateTiupTask.
func (mr *MockTiEMDBServiceHandlerMockRecorder) CreateTiupTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTiupTask", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).CreateTiupTask), arg0, arg1, arg2)
}

// CreateTransportRecord mocks base method.
func (m *MockTiEMDBServiceHandler) CreateTransportRecord(arg0 context.Context, arg1 *dbpb.DBCreateTransportRecordRequest, arg2 *dbpb.DBCreateTransportRecordResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransportRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransportRecord indicates an expected call of CreateTransportRecord.
func (mr *MockTiEMDBServiceHandlerMockRecorder) CreateTransportRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransportRecord", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).CreateTransportRecord), arg0, arg1, arg2)
}

// DeleteBackupRecord mocks base method.
func (m *MockTiEMDBServiceHandler) DeleteBackupRecord(arg0 context.Context, arg1 *dbpb.DBDeleteBackupRecordRequest, arg2 *dbpb.DBDeleteBackupRecordResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackupRecord indicates an expected call of DeleteBackupRecord.
func (mr *MockTiEMDBServiceHandlerMockRecorder) DeleteBackupRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupRecord", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).DeleteBackupRecord), arg0, arg1, arg2)
}

// DeleteCluster mocks base method.
func (m *MockTiEMDBServiceHandler) DeleteCluster(arg0 context.Context, arg1 *dbpb.DBDeleteClusterRequest, arg2 *dbpb.DBDeleteClusterResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockTiEMDBServiceHandlerMockRecorder) DeleteCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).DeleteCluster), arg0, arg1, arg2)
}

// FindAccount mocks base method.
func (m *MockTiEMDBServiceHandler) FindAccount(arg0 context.Context, arg1 *dbpb.DBFindAccountRequest, arg2 *dbpb.DBFindAccountResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindAccount indicates an expected call of FindAccount.
func (mr *MockTiEMDBServiceHandlerMockRecorder) FindAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccount", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).FindAccount), arg0, arg1, arg2)
}

// FindAccountById mocks base method.
func (m *MockTiEMDBServiceHandler) FindAccountById(arg0 context.Context, arg1 *dbpb.DBFindAccountByIdRequest, arg2 *dbpb.DBFindAccountByIdResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccountById", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindAccountById indicates an expected call of FindAccountById.
func (mr *MockTiEMDBServiceHandlerMockRecorder) FindAccountById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccountById", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).FindAccountById), arg0, arg1, arg2)
}

// FindRolesByPermission mocks base method.
func (m *MockTiEMDBServiceHandler) FindRolesByPermission(arg0 context.Context, arg1 *dbpb.DBFindRolesByPermissionRequest, arg2 *dbpb.DBFindRolesByPermissionResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRolesByPermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindRolesByPermission indicates an expected call of FindRolesByPermission.
func (mr *MockTiEMDBServiceHandlerMockRecorder) FindRolesByPermission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRolesByPermission", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).FindRolesByPermission), arg0, arg1, arg2)
}

// FindTenant mocks base method.
func (m *MockTiEMDBServiceHandler) FindTenant(arg0 context.Context, arg1 *dbpb.DBFindTenantRequest, arg2 *dbpb.DBFindTenantResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTenant", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindTenant indicates an expected call of FindTenant.
func (mr *MockTiEMDBServiceHandlerMockRecorder) FindTenant(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTenant", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).FindTenant), arg0, arg1, arg2)
}

// FindTiupTaskByID mocks base method.
func (m *MockTiEMDBServiceHandler) FindTiupTaskByID(arg0 context.Context, arg1 *dbpb.FindTiupTaskByIDRequest, arg2 *dbpb.FindTiupTaskByIDResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTiupTaskByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindTiupTaskByID indicates an expected call of FindTiupTaskByID.
func (mr *MockTiEMDBServiceHandlerMockRecorder) FindTiupTaskByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTiupTaskByID", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).FindTiupTaskByID), arg0, arg1, arg2)
}

// FindToken mocks base method.
func (m *MockTiEMDBServiceHandler) FindToken(arg0 context.Context, arg1 *dbpb.DBFindTokenRequest, arg2 *dbpb.DBFindTokenResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindToken indicates an expected call of FindToken.
func (mr *MockTiEMDBServiceHandlerMockRecorder) FindToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindToken", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).FindToken), arg0, arg1, arg2)
}

// FindTrasnportRecordByID mocks base method.
func (m *MockTiEMDBServiceHandler) FindTrasnportRecordByID(arg0 context.Context, arg1 *dbpb.DBFindTransportRecordByIDRequest, arg2 *dbpb.DBFindTransportRecordByIDResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTrasnportRecordByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindTrasnportRecordByID indicates an expected call of FindTrasnportRecordByID.
func (mr *MockTiEMDBServiceHandlerMockRecorder) FindTrasnportRecordByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTrasnportRecordByID", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).FindTrasnportRecordByID), arg0, arg1, arg2)
}

// GetCurrentParametersRecord mocks base method.
func (m *MockTiEMDBServiceHandler) GetCurrentParametersRecord(arg0 context.Context, arg1 *dbpb.DBGetCurrentParametersRequest, arg2 *dbpb.DBGetCurrentParametersResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentParametersRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCurrentParametersRecord indicates an expected call of GetCurrentParametersRecord.
func (mr *MockTiEMDBServiceHandlerMockRecorder) GetCurrentParametersRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentParametersRecord", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).GetCurrentParametersRecord), arg0, arg1, arg2)
}

// GetFailureDomain mocks base method.
func (m *MockTiEMDBServiceHandler) GetFailureDomain(arg0 context.Context, arg1 *dbpb.DBGetFailureDomainRequest, arg2 *dbpb.DBGetFailureDomainResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailureDomain", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFailureDomain indicates an expected call of GetFailureDomain.
func (mr *MockTiEMDBServiceHandlerMockRecorder) GetFailureDomain(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailureDomain", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).GetFailureDomain), arg0, arg1, arg2)
}

// GetTiupTaskStatusByBizID mocks base method.
func (m *MockTiEMDBServiceHandler) GetTiupTaskStatusByBizID(arg0 context.Context, arg1 *dbpb.GetTiupTaskStatusByBizIDRequest, arg2 *dbpb.GetTiupTaskStatusByBizIDResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTiupTaskStatusByBizID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTiupTaskStatusByBizID indicates an expected call of GetTiupTaskStatusByBizID.
func (mr *MockTiEMDBServiceHandlerMockRecorder) GetTiupTaskStatusByBizID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTiupTaskStatusByBizID", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).GetTiupTaskStatusByBizID), arg0, arg1, arg2)
}

// ListBackupRecords mocks base method.
func (m *MockTiEMDBServiceHandler) ListBackupRecords(arg0 context.Context, arg1 *dbpb.DBListBackupRecordsRequest, arg2 *dbpb.DBListBackupRecordsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupRecords", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackupRecords indicates an expected call of ListBackupRecords.
func (mr *MockTiEMDBServiceHandlerMockRecorder) ListBackupRecords(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupRecords", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).ListBackupRecords), arg0, arg1, arg2)
}

// ListCluster mocks base method.
func (m *MockTiEMDBServiceHandler) ListCluster(arg0 context.Context, arg1 *dbpb.DBListClusterRequest, arg2 *dbpb.DBListClusterResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCluster indicates an expected call of ListCluster.
func (mr *MockTiEMDBServiceHandlerMockRecorder) ListCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCluster", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).ListCluster), arg0, arg1, arg2)
}

// ListFlows mocks base method.
func (m *MockTiEMDBServiceHandler) ListFlows(arg0 context.Context, arg1 *dbpb.DBListFlowsRequest, arg2 *dbpb.DBListFlowsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlows", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFlows indicates an expected call of ListFlows.
func (mr *MockTiEMDBServiceHandlerMockRecorder) ListFlows(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlows", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).ListFlows), arg0, arg1, arg2)
}

// ListHost mocks base method.
func (m *MockTiEMDBServiceHandler) ListHost(arg0 context.Context, arg1 *dbpb.DBListHostsRequest, arg2 *dbpb.DBListHostsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHost", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHost indicates an expected call of ListHost.
func (mr *MockTiEMDBServiceHandlerMockRecorder) ListHost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHost", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).ListHost), arg0, arg1, arg2)
}

// ListTrasnportRecord mocks base method.
func (m *MockTiEMDBServiceHandler) ListTrasnportRecord(arg0 context.Context, arg1 *dbpb.DBListTransportRecordRequest, arg2 *dbpb.DBListTransportRecordResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrasnportRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrasnportRecord indicates an expected call of ListTrasnportRecord.
func (mr *MockTiEMDBServiceHandlerMockRecorder) ListTrasnportRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrasnportRecord", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).ListTrasnportRecord), arg0, arg1, arg2)
}

// LoadCluster mocks base method.
func (m *MockTiEMDBServiceHandler) LoadCluster(arg0 context.Context, arg1 *dbpb.DBLoadClusterRequest, arg2 *dbpb.DBLoadClusterResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadCluster indicates an expected call of LoadCluster.
func (mr *MockTiEMDBServiceHandlerMockRecorder) LoadCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCluster", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).LoadCluster), arg0, arg1, arg2)
}

// LoadFlow mocks base method.
func (m *MockTiEMDBServiceHandler) LoadFlow(arg0 context.Context, arg1 *dbpb.DBLoadFlowRequest, arg2 *dbpb.DBLoadFlowResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFlow", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadFlow indicates an expected call of LoadFlow.
func (mr *MockTiEMDBServiceHandlerMockRecorder) LoadFlow(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFlow", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).LoadFlow), arg0, arg1, arg2)
}

// LoadTask mocks base method.
func (m *MockTiEMDBServiceHandler) LoadTask(arg0 context.Context, arg1 *dbpb.DBLoadTaskRequest, arg2 *dbpb.DBLoadTaskResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadTask indicates an expected call of LoadTask.
func (mr *MockTiEMDBServiceHandlerMockRecorder) LoadTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTask", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).LoadTask), arg0, arg1, arg2)
}

// QueryBackupRecords mocks base method.
func (m *MockTiEMDBServiceHandler) QueryBackupRecords(arg0 context.Context, arg1 *dbpb.DBQueryBackupRecordRequest, arg2 *dbpb.DBQueryBackupRecordResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBackupRecords", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryBackupRecords indicates an expected call of QueryBackupRecords.
func (mr *MockTiEMDBServiceHandlerMockRecorder) QueryBackupRecords(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBackupRecords", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).QueryBackupRecords), arg0, arg1, arg2)
}

// QueryBackupStrategy mocks base method.
func (m *MockTiEMDBServiceHandler) QueryBackupStrategy(arg0 context.Context, arg1 *dbpb.DBQueryBackupStrategyRequest, arg2 *dbpb.DBQueryBackupStrategyResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBackupStrategy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryBackupStrategy indicates an expected call of QueryBackupStrategy.
func (mr *MockTiEMDBServiceHandlerMockRecorder) QueryBackupStrategy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBackupStrategy", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).QueryBackupStrategy), arg0, arg1, arg2)
}

// QueryBackupStrategyByTime mocks base method.
func (m *MockTiEMDBServiceHandler) QueryBackupStrategyByTime(arg0 context.Context, arg1 *dbpb.DBQueryBackupStrategyByTimeRequest, arg2 *dbpb.DBQueryBackupStrategyByTimeResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBackupStrategyByTime", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryBackupStrategyByTime indicates an expected call of QueryBackupStrategyByTime.
func (mr *MockTiEMDBServiceHandlerMockRecorder) QueryBackupStrategyByTime(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBackupStrategyByTime", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).QueryBackupStrategyByTime), arg0, arg1, arg2)
}

// RecycleResources mocks base method.
func (m *MockTiEMDBServiceHandler) RecycleResources(arg0 context.Context, arg1 *dbpb.DBRecycleRequest, arg2 *dbpb.DBRecycleResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecycleResources", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecycleResources indicates an expected call of RecycleResources.
func (mr *MockTiEMDBServiceHandlerMockRecorder) RecycleResources(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecycleResources", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).RecycleResources), arg0, arg1, arg2)
}

// RemoveHost mocks base method.
func (m *MockTiEMDBServiceHandler) RemoveHost(arg0 context.Context, arg1 *dbpb.DBRemoveHostRequest, arg2 *dbpb.DBRemoveHostResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHost", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHost indicates an expected call of RemoveHost.
func (mr *MockTiEMDBServiceHandlerMockRecorder) RemoveHost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHost", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).RemoveHost), arg0, arg1, arg2)
}

// RemoveHostsInBatch mocks base method.
func (m *MockTiEMDBServiceHandler) RemoveHostsInBatch(arg0 context.Context, arg1 *dbpb.DBRemoveHostsInBatchRequest, arg2 *dbpb.DBRemoveHostsInBatchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHostsInBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHostsInBatch indicates an expected call of RemoveHostsInBatch.
func (mr *MockTiEMDBServiceHandlerMockRecorder) RemoveHostsInBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHostsInBatch", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).RemoveHostsInBatch), arg0, arg1, arg2)
}

// SaveBackupRecord mocks base method.
func (m *MockTiEMDBServiceHandler) SaveBackupRecord(arg0 context.Context, arg1 *dbpb.DBSaveBackupRecordRequest, arg2 *dbpb.DBSaveBackupRecordResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBackupRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBackupRecord indicates an expected call of SaveBackupRecord.
func (mr *MockTiEMDBServiceHandlerMockRecorder) SaveBackupRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBackupRecord", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).SaveBackupRecord), arg0, arg1, arg2)
}

// SaveBackupStrategy mocks base method.
func (m *MockTiEMDBServiceHandler) SaveBackupStrategy(arg0 context.Context, arg1 *dbpb.DBSaveBackupStrategyRequest, arg2 *dbpb.DBSaveBackupStrategyResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBackupStrategy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBackupStrategy indicates an expected call of SaveBackupStrategy.
func (mr *MockTiEMDBServiceHandlerMockRecorder) SaveBackupStrategy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBackupStrategy", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).SaveBackupStrategy), arg0, arg1, arg2)
}

// SaveParametersRecord mocks base method.
func (m *MockTiEMDBServiceHandler) SaveParametersRecord(arg0 context.Context, arg1 *dbpb.DBSaveParametersRequest, arg2 *dbpb.DBSaveParametersResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveParametersRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveParametersRecord indicates an expected call of SaveParametersRecord.
func (mr *MockTiEMDBServiceHandlerMockRecorder) SaveParametersRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveParametersRecord", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).SaveParametersRecord), arg0, arg1, arg2)
}

// SaveRecoverRecord mocks base method.
func (m *MockTiEMDBServiceHandler) SaveRecoverRecord(arg0 context.Context, arg1 *dbpb.DBSaveRecoverRecordRequest, arg2 *dbpb.DBSaveRecoverRecordResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRecoverRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRecoverRecord indicates an expected call of SaveRecoverRecord.
func (mr *MockTiEMDBServiceHandlerMockRecorder) SaveRecoverRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRecoverRecord", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).SaveRecoverRecord), arg0, arg1, arg2)
}

// SaveToken mocks base method.
func (m *MockTiEMDBServiceHandler) SaveToken(arg0 context.Context, arg1 *dbpb.DBSaveTokenRequest, arg2 *dbpb.DBSaveTokenResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveToken indicates an expected call of SaveToken.
func (mr *MockTiEMDBServiceHandlerMockRecorder) SaveToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToken", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).SaveToken), arg0, arg1, arg2)
}

// UpdateBackupRecord mocks base method.
func (m *MockTiEMDBServiceHandler) UpdateBackupRecord(arg0 context.Context, arg1 *dbpb.DBUpdateBackupRecordRequest, arg2 *dbpb.DBUpdateBackupRecordResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackupRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBackupRecord indicates an expected call of UpdateBackupRecord.
func (mr *MockTiEMDBServiceHandlerMockRecorder) UpdateBackupRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackupRecord", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).UpdateBackupRecord), arg0, arg1, arg2)
}

// UpdateClusterStatus mocks base method.
func (m *MockTiEMDBServiceHandler) UpdateClusterStatus(arg0 context.Context, arg1 *dbpb.DBUpdateClusterStatusRequest, arg2 *dbpb.DBUpdateClusterStatusResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterStatus indicates an expected call of UpdateClusterStatus.
func (mr *MockTiEMDBServiceHandlerMockRecorder) UpdateClusterStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterStatus", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).UpdateClusterStatus), arg0, arg1, arg2)
}

// UpdateClusterTopologyConfig mocks base method.
func (m *MockTiEMDBServiceHandler) UpdateClusterTopologyConfig(arg0 context.Context, arg1 *dbpb.DBUpdateTopologyConfigRequest, arg2 *dbpb.DBUpdateTopologyConfigResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterTopologyConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterTopologyConfig indicates an expected call of UpdateClusterTopologyConfig.
func (mr *MockTiEMDBServiceHandlerMockRecorder) UpdateClusterTopologyConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterTopologyConfig", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).UpdateClusterTopologyConfig), arg0, arg1, arg2)
}

// UpdateFlow mocks base method.
func (m *MockTiEMDBServiceHandler) UpdateFlow(arg0 context.Context, arg1 *dbpb.DBUpdateFlowRequest, arg2 *dbpb.DBUpdateFlowResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlow", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFlow indicates an expected call of UpdateFlow.
func (mr *MockTiEMDBServiceHandlerMockRecorder) UpdateFlow(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlow", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).UpdateFlow), arg0, arg1, arg2)
}

// UpdateTask mocks base method.
func (m *MockTiEMDBServiceHandler) UpdateTask(arg0 context.Context, arg1 *dbpb.DBUpdateTaskRequest, arg2 *dbpb.DBUpdateTaskResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTiEMDBServiceHandlerMockRecorder) UpdateTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).UpdateTask), arg0, arg1, arg2)
}

// UpdateTiupTask mocks base method.
func (m *MockTiEMDBServiceHandler) UpdateTiupTask(arg0 context.Context, arg1 *dbpb.UpdateTiupTaskRequest, arg2 *dbpb.UpdateTiupTaskResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTiupTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTiupTask indicates an expected call of UpdateTiupTask.
func (mr *MockTiEMDBServiceHandlerMockRecorder) UpdateTiupTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTiupTask", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).UpdateTiupTask), arg0, arg1, arg2)
}

// UpdateTransportRecord mocks base method.
func (m *MockTiEMDBServiceHandler) UpdateTransportRecord(arg0 context.Context, arg1 *dbpb.DBUpdateTransportRecordRequest, arg2 *dbpb.DBUpdateTransportRecordResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransportRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransportRecord indicates an expected call of UpdateTransportRecord.
func (mr *MockTiEMDBServiceHandlerMockRecorder) UpdateTransportRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransportRecord", reflect.TypeOf((*MockTiEMDBServiceHandler)(nil).UpdateTransportRecord), arg0, arg1, arg2)
}
