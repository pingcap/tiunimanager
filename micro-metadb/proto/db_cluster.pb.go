// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: db_cluster.proto

package db

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DBClusterResponseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DBClusterResponseStatus) Reset() {
	*x = DBClusterResponseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBClusterResponseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBClusterResponseStatus) ProtoMessage() {}

func (x *DBClusterResponseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBClusterResponseStatus.ProtoReflect.Descriptor instead.
func (*DBClusterResponseStatus) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *DBClusterResponseStatus) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DBClusterResponseStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DBClusterDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code        string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TenantId    string `protobuf:"bytes,4,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	DbPassword  string `protobuf:"bytes,5,opt,name=dbPassword,proto3" json:"dbPassword,omitempty"`
	ClusterType string `protobuf:"bytes,6,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	VersionCode string `protobuf:"bytes,7,opt,name=versionCode,proto3" json:"versionCode,omitempty"`
	Status      int32  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	Tags        string `protobuf:"bytes,9,opt,name=tags,proto3" json:"tags,omitempty"`
	Tls         bool   `protobuf:"varint,10,opt,name=tls,proto3" json:"tls,omitempty"`
	Demands     string `protobuf:"bytes,11,opt,name=demands,proto3" json:"demands,omitempty"`
	WorkFlowId  int32  `protobuf:"varint,12,opt,name=workFlowId,proto3" json:"workFlowId,omitempty"`
	OwnerId     string `protobuf:"bytes,13,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	CreateTime  int64  `protobuf:"varint,14,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  int64  `protobuf:"varint,15,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	DeleteTime  int64  `protobuf:"varint,16,opt,name=deleteTime,proto3" json:"deleteTime,omitempty"`
}

func (x *DBClusterDTO) Reset() {
	*x = DBClusterDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBClusterDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBClusterDTO) ProtoMessage() {}

func (x *DBClusterDTO) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBClusterDTO.ProtoReflect.Descriptor instead.
func (*DBClusterDTO) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *DBClusterDTO) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DBClusterDTO) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DBClusterDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DBClusterDTO) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DBClusterDTO) GetDbPassword() string {
	if x != nil {
		return x.DbPassword
	}
	return ""
}

func (x *DBClusterDTO) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *DBClusterDTO) GetVersionCode() string {
	if x != nil {
		return x.VersionCode
	}
	return ""
}

func (x *DBClusterDTO) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DBClusterDTO) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *DBClusterDTO) GetTls() bool {
	if x != nil {
		return x.Tls
	}
	return false
}

func (x *DBClusterDTO) GetDemands() string {
	if x != nil {
		return x.Demands
	}
	return ""
}

func (x *DBClusterDTO) GetWorkFlowId() int32 {
	if x != nil {
		return x.WorkFlowId
	}
	return 0
}

func (x *DBClusterDTO) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *DBClusterDTO) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DBClusterDTO) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *DBClusterDTO) GetDeleteTime() int64 {
	if x != nil {
		return x.DeleteTime
	}
	return 0
}

type DBTiUPConfigDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TenantId   string `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	ClusterId  string `protobuf:"bytes,3,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Content    string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	CreateTime int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *DBTiUPConfigDTO) Reset() {
	*x = DBTiUPConfigDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBTiUPConfigDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBTiUPConfigDTO) ProtoMessage() {}

func (x *DBTiUPConfigDTO) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBTiUPConfigDTO.ProtoReflect.Descriptor instead.
func (*DBTiUPConfigDTO) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *DBTiUPConfigDTO) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DBTiUPConfigDTO) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DBTiUPConfigDTO) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DBTiUPConfigDTO) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *DBTiUPConfigDTO) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type DBCreateClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *DBClusterDTO `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *DBCreateClusterRequest) Reset() {
	*x = DBCreateClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBCreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBCreateClusterRequest) ProtoMessage() {}

func (x *DBCreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBCreateClusterRequest.ProtoReflect.Descriptor instead.
func (*DBCreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *DBCreateClusterRequest) GetCluster() *DBClusterDTO {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type DBCreateClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *DBClusterResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Cluster *DBClusterDTO            `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *DBCreateClusterResponse) Reset() {
	*x = DBCreateClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBCreateClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBCreateClusterResponse) ProtoMessage() {}

func (x *DBCreateClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBCreateClusterResponse.ProtoReflect.Descriptor instead.
func (*DBCreateClusterResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *DBCreateClusterResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DBCreateClusterResponse) GetCluster() *DBClusterDTO {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type DBLoadClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *DBLoadClusterRequest) Reset() {
	*x = DBLoadClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBLoadClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBLoadClusterRequest) ProtoMessage() {}

func (x *DBLoadClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBLoadClusterRequest.ProtoReflect.Descriptor instead.
func (*DBLoadClusterRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *DBLoadClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DBLoadClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *DBClusterResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ClusterDetail *DBClusterDetailDTO      `protobuf:"bytes,2,opt,name=clusterDetail,proto3" json:"clusterDetail,omitempty"`
}

func (x *DBLoadClusterResponse) Reset() {
	*x = DBLoadClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBLoadClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBLoadClusterResponse) ProtoMessage() {}

func (x *DBLoadClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBLoadClusterResponse.ProtoReflect.Descriptor instead.
func (*DBLoadClusterResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *DBLoadClusterResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DBLoadClusterResponse) GetClusterDetail() *DBClusterDetailDTO {
	if x != nil {
		return x.ClusterDetail
	}
	return nil
}

type DBClusterDisplayDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *DBClusterDTO `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Flow    *DBFlowDTO    `protobuf:"bytes,2,opt,name=flow,proto3" json:"flow,omitempty"`
}

func (x *DBClusterDisplayDTO) Reset() {
	*x = DBClusterDisplayDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBClusterDisplayDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBClusterDisplayDTO) ProtoMessage() {}

func (x *DBClusterDisplayDTO) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBClusterDisplayDTO.ProtoReflect.Descriptor instead.
func (*DBClusterDisplayDTO) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *DBClusterDisplayDTO) GetCluster() *DBClusterDTO {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *DBClusterDisplayDTO) GetFlow() *DBFlowDTO {
	if x != nil {
		return x.Flow
	}
	return nil
}

type DBClusterDetailDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster          *DBClusterDTO    `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	TiupConfigRecord *DBTiUPConfigDTO `protobuf:"bytes,2,opt,name=tiupConfigRecord,proto3" json:"tiupConfigRecord,omitempty"`
	Flow             *DBFlowDTO       `protobuf:"bytes,3,opt,name=flow,proto3" json:"flow,omitempty"`
}

func (x *DBClusterDetailDTO) Reset() {
	*x = DBClusterDetailDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBClusterDetailDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBClusterDetailDTO) ProtoMessage() {}

func (x *DBClusterDetailDTO) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBClusterDetailDTO.ProtoReflect.Descriptor instead.
func (*DBClusterDetailDTO) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{8}
}

func (x *DBClusterDetailDTO) GetCluster() *DBClusterDTO {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *DBClusterDetailDTO) GetTiupConfigRecord() *DBTiUPConfigDTO {
	if x != nil {
		return x.TiupConfigRecord
	}
	return nil
}

func (x *DBClusterDetailDTO) GetFlow() *DBFlowDTO {
	if x != nil {
		return x.Flow
	}
	return nil
}

type DBListClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageReq       *DBPageDTO `protobuf:"bytes,1,opt,name=pageReq,proto3" json:"pageReq,omitempty"`
	ClusterId     string     `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ClusterName   string     `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	ClusterType   string     `protobuf:"bytes,4,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	ClusterStatus string     `protobuf:"bytes,5,opt,name=clusterStatus,proto3" json:"clusterStatus,omitempty"`
	ClusterTag    string     `protobuf:"bytes,6,opt,name=clusterTag,proto3" json:"clusterTag,omitempty"`
}

func (x *DBListClusterRequest) Reset() {
	*x = DBListClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBListClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBListClusterRequest) ProtoMessage() {}

func (x *DBListClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBListClusterRequest.ProtoReflect.Descriptor instead.
func (*DBListClusterRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{9}
}

func (x *DBListClusterRequest) GetPageReq() *DBPageDTO {
	if x != nil {
		return x.PageReq
	}
	return nil
}

func (x *DBListClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DBListClusterRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DBListClusterRequest) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *DBListClusterRequest) GetClusterStatus() string {
	if x != nil {
		return x.ClusterStatus
	}
	return ""
}

func (x *DBListClusterRequest) GetClusterTag() string {
	if x != nil {
		return x.ClusterTag
	}
	return ""
}

type DBListClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *DBClusterResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Clusters []*DBClusterDetailDTO    `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
	Page     *DBPageDTO               `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *DBListClusterResponse) Reset() {
	*x = DBListClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBListClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBListClusterResponse) ProtoMessage() {}

func (x *DBListClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBListClusterResponse.ProtoReflect.Descriptor instead.
func (*DBListClusterResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{10}
}

func (x *DBListClusterResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DBListClusterResponse) GetClusters() []*DBClusterDetailDTO {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *DBListClusterResponse) GetPage() *DBPageDTO {
	if x != nil {
		return x.Page
	}
	return nil
}

type DBDeleteClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *DBDeleteClusterRequest) Reset() {
	*x = DBDeleteClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBDeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBDeleteClusterRequest) ProtoMessage() {}

func (x *DBDeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBDeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DBDeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{11}
}

func (x *DBDeleteClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DBDeleteClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *DBClusterResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Cluster *DBClusterDTO            `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *DBDeleteClusterResponse) Reset() {
	*x = DBDeleteClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBDeleteClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBDeleteClusterResponse) ProtoMessage() {}

func (x *DBDeleteClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBDeleteClusterResponse.ProtoReflect.Descriptor instead.
func (*DBDeleteClusterResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{12}
}

func (x *DBDeleteClusterResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DBDeleteClusterResponse) GetCluster() *DBClusterDTO {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type DBUpdateClusterStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Status       int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	UpdateStatus bool   `protobuf:"varint,3,opt,name=updateStatus,proto3" json:"updateStatus,omitempty"`
	FlowId       int64  `protobuf:"varint,4,opt,name=flowId,proto3" json:"flowId,omitempty"`
	UpdateFlow   bool   `protobuf:"varint,5,opt,name=updateFlow,proto3" json:"updateFlow,omitempty"`
}

func (x *DBUpdateClusterStatusRequest) Reset() {
	*x = DBUpdateClusterStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBUpdateClusterStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBUpdateClusterStatusRequest) ProtoMessage() {}

func (x *DBUpdateClusterStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBUpdateClusterStatusRequest.ProtoReflect.Descriptor instead.
func (*DBUpdateClusterStatusRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{13}
}

func (x *DBUpdateClusterStatusRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DBUpdateClusterStatusRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DBUpdateClusterStatusRequest) GetUpdateStatus() bool {
	if x != nil {
		return x.UpdateStatus
	}
	return false
}

func (x *DBUpdateClusterStatusRequest) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *DBUpdateClusterStatusRequest) GetUpdateFlow() bool {
	if x != nil {
		return x.UpdateFlow
	}
	return false
}

type DBUpdateClusterStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *DBClusterResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Cluster *DBClusterDTO            `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *DBUpdateClusterStatusResponse) Reset() {
	*x = DBUpdateClusterStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBUpdateClusterStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBUpdateClusterStatusResponse) ProtoMessage() {}

func (x *DBUpdateClusterStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBUpdateClusterStatusResponse.ProtoReflect.Descriptor instead.
func (*DBUpdateClusterStatusResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{14}
}

func (x *DBUpdateClusterStatusResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DBUpdateClusterStatusResponse) GetCluster() *DBClusterDTO {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type DBUpdateTiupConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Content   string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	TenantId  string `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *DBUpdateTiupConfigRequest) Reset() {
	*x = DBUpdateTiupConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBUpdateTiupConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBUpdateTiupConfigRequest) ProtoMessage() {}

func (x *DBUpdateTiupConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBUpdateTiupConfigRequest.ProtoReflect.Descriptor instead.
func (*DBUpdateTiupConfigRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{15}
}

func (x *DBUpdateTiupConfigRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DBUpdateTiupConfigRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *DBUpdateTiupConfigRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type DBUpdateTiupConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *DBClusterResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Cluster          *DBClusterDTO            `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	TiupConfigRecord *DBTiUPConfigDTO         `protobuf:"bytes,3,opt,name=tiupConfigRecord,proto3" json:"tiupConfigRecord,omitempty"`
}

func (x *DBUpdateTiupConfigResponse) Reset() {
	*x = DBUpdateTiupConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBUpdateTiupConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBUpdateTiupConfigResponse) ProtoMessage() {}

func (x *DBUpdateTiupConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBUpdateTiupConfigResponse.ProtoReflect.Descriptor instead.
func (*DBUpdateTiupConfigResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{16}
}

func (x *DBUpdateTiupConfigResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DBUpdateTiupConfigResponse) GetCluster() *DBClusterDTO {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *DBUpdateTiupConfigResponse) GetTiupConfigRecord() *DBTiUPConfigDTO {
	if x != nil {
		return x.TiupConfigRecord
	}
	return nil
}

type DBPageDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total    int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DBPageDTO) Reset() {
	*x = DBPageDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBPageDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBPageDTO) ProtoMessage() {}

func (x *DBPageDTO) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBPageDTO.ProtoReflect.Descriptor instead.
func (*DBPageDTO) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{17}
}

func (x *DBPageDTO) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DBPageDTO) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DBPageDTO) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DBParameterRecordDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TenantId   string `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	ClusterId  string `protobuf:"bytes,3,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	CreateTime int64  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	OperatorId string `protobuf:"bytes,5,opt,name=operatorId,proto3" json:"operatorId,omitempty"`
	Content    string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	FlowId     int64  `protobuf:"varint,7,opt,name=flowId,proto3" json:"flowId,omitempty"`
}

func (x *DBParameterRecordDTO) Reset() {
	*x = DBParameterRecordDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBParameterRecordDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBParameterRecordDTO) ProtoMessage() {}

func (x *DBParameterRecordDTO) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBParameterRecordDTO.ProtoReflect.Descriptor instead.
func (*DBParameterRecordDTO) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{18}
}

func (x *DBParameterRecordDTO) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DBParameterRecordDTO) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DBParameterRecordDTO) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DBParameterRecordDTO) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DBParameterRecordDTO) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *DBParameterRecordDTO) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *DBParameterRecordDTO) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

type DBSaveParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters *DBParameterRecordDTO `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *DBSaveParametersRequest) Reset() {
	*x = DBSaveParametersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBSaveParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBSaveParametersRequest) ProtoMessage() {}

func (x *DBSaveParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBSaveParametersRequest.ProtoReflect.Descriptor instead.
func (*DBSaveParametersRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{19}
}

func (x *DBSaveParametersRequest) GetParameters() *DBParameterRecordDTO {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type DBSaveParametersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *DBClusterResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Parameters *DBParameterRecordDTO    `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *DBSaveParametersResponse) Reset() {
	*x = DBSaveParametersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBSaveParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBSaveParametersResponse) ProtoMessage() {}

func (x *DBSaveParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBSaveParametersResponse.ProtoReflect.Descriptor instead.
func (*DBSaveParametersResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{20}
}

func (x *DBSaveParametersResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DBSaveParametersResponse) GetParameters() *DBParameterRecordDTO {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type DBGetCurrentParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *DBGetCurrentParametersRequest) Reset() {
	*x = DBGetCurrentParametersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBGetCurrentParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBGetCurrentParametersRequest) ProtoMessage() {}

func (x *DBGetCurrentParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBGetCurrentParametersRequest.ProtoReflect.Descriptor instead.
func (*DBGetCurrentParametersRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{21}
}

func (x *DBGetCurrentParametersRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DBGetCurrentParametersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *DBClusterResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Parameters *DBParameterRecordDTO    `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *DBGetCurrentParametersResponse) Reset() {
	*x = DBGetCurrentParametersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBGetCurrentParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBGetCurrentParametersResponse) ProtoMessage() {}

func (x *DBGetCurrentParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBGetCurrentParametersResponse.ProtoReflect.Descriptor instead.
func (*DBGetCurrentParametersResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{22}
}

func (x *DBGetCurrentParametersResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DBGetCurrentParametersResponse) GetParameters() *DBParameterRecordDTO {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type DBBackupRecordDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TenantId    string `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	ClusterId   string `protobuf:"bytes,3,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	StartTime   int64  `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime     int64  `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	BackupRange string `protobuf:"bytes,6,opt,name=backupRange,proto3" json:"backupRange,omitempty"`
	BackupType  string `protobuf:"bytes,7,opt,name=backupType,proto3" json:"backupType,omitempty"`
	BackupMode  string `protobuf:"bytes,8,opt,name=backupMode,proto3" json:"backupMode,omitempty"`
	OperatorId  string `protobuf:"bytes,9,opt,name=operatorId,proto3" json:"operatorId,omitempty"`
	FilePath    string `protobuf:"bytes,10,opt,name=filePath,proto3" json:"filePath,omitempty"`
	FlowId      int64  `protobuf:"varint,11,opt,name=flowId,proto3" json:"flowId,omitempty"`
	Size        uint64 `protobuf:"varint,12,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *DBBackupRecordDTO) Reset() {
	*x = DBBackupRecordDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBBackupRecordDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBBackupRecordDTO) ProtoMessage() {}

func (x *DBBackupRecordDTO) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBBackupRecordDTO.ProtoReflect.Descriptor instead.
func (*DBBackupRecordDTO) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{23}
}

func (x *DBBackupRecordDTO) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DBBackupRecordDTO) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DBBackupRecordDTO) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DBBackupRecordDTO) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DBBackupRecordDTO) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DBBackupRecordDTO) GetBackupRange() string {
	if x != nil {
		return x.BackupRange
	}
	return ""
}

func (x *DBBackupRecordDTO) GetBackupType() string {
	if x != nil {
		return x.BackupType
	}
	return ""
}

func (x *DBBackupRecordDTO) GetBackupMode() string {
	if x != nil {
		return x.BackupMode
	}
	return ""
}

func (x *DBBackupRecordDTO) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *DBBackupRecordDTO) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *DBBackupRecordDTO) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *DBBackupRecordDTO) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type DBSaveBackupRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupRecord *DBBackupRecordDTO `protobuf:"bytes,1,opt,name=backupRecord,proto3" json:"backupRecord,omitempty"`
}

func (x *DBSaveBackupRecordRequest) Reset() {
	*x = DBSaveBackupRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBSaveBackupRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBSaveBackupRecordRequest) ProtoMessage() {}

func (x *DBSaveBackupRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBSaveBackupRecordRequest.ProtoReflect.Descriptor instead.
func (*DBSaveBackupRecordRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{24}
}

func (x *DBSaveBackupRecordRequest) GetBackupRecord() *DBBackupRecordDTO {
	if x != nil {
		return x.BackupRecord
	}
	return nil
}

type DBSaveBackupRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *DBClusterResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BackupRecord *DBBackupRecordDTO       `protobuf:"bytes,2,opt,name=backupRecord,proto3" json:"backupRecord,omitempty"`
}

func (x *DBSaveBackupRecordResponse) Reset() {
	*x = DBSaveBackupRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBSaveBackupRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBSaveBackupRecordResponse) ProtoMessage() {}

func (x *DBSaveBackupRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBSaveBackupRecordResponse.ProtoReflect.Descriptor instead.
func (*DBSaveBackupRecordResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{25}
}

func (x *DBSaveBackupRecordResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DBSaveBackupRecordResponse) GetBackupRecord() *DBBackupRecordDTO {
	if x != nil {
		return x.BackupRecord
	}
	return nil
}

type DBUpdateBackupRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupRecord *DBBackupRecordDTO `protobuf:"bytes,1,opt,name=backupRecord,proto3" json:"backupRecord,omitempty"`
}

func (x *DBUpdateBackupRecordRequest) Reset() {
	*x = DBUpdateBackupRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBUpdateBackupRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBUpdateBackupRecordRequest) ProtoMessage() {}

func (x *DBUpdateBackupRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBUpdateBackupRecordRequest.ProtoReflect.Descriptor instead.
func (*DBUpdateBackupRecordRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{26}
}

func (x *DBUpdateBackupRecordRequest) GetBackupRecord() *DBBackupRecordDTO {
	if x != nil {
		return x.BackupRecord
	}
	return nil
}

type DBUpdateBackupRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *DBClusterResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DBUpdateBackupRecordResponse) Reset() {
	*x = DBUpdateBackupRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBUpdateBackupRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBUpdateBackupRecordResponse) ProtoMessage() {}

func (x *DBUpdateBackupRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBUpdateBackupRecordResponse.ProtoReflect.Descriptor instead.
func (*DBUpdateBackupRecordResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{27}
}

func (x *DBUpdateBackupRecordResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type DBDeleteBackupRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DBDeleteBackupRecordRequest) Reset() {
	*x = DBDeleteBackupRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBDeleteBackupRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBDeleteBackupRecordRequest) ProtoMessage() {}

func (x *DBDeleteBackupRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBDeleteBackupRecordRequest.ProtoReflect.Descriptor instead.
func (*DBDeleteBackupRecordRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{28}
}

func (x *DBDeleteBackupRecordRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DBDeleteBackupRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *DBClusterResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BackupRecord *DBBackupRecordDTO       `protobuf:"bytes,2,opt,name=backupRecord,proto3" json:"backupRecord,omitempty"`
}

func (x *DBDeleteBackupRecordResponse) Reset() {
	*x = DBDeleteBackupRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBDeleteBackupRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBDeleteBackupRecordResponse) ProtoMessage() {}

func (x *DBDeleteBackupRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBDeleteBackupRecordResponse.ProtoReflect.Descriptor instead.
func (*DBDeleteBackupRecordResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{29}
}

func (x *DBDeleteBackupRecordResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DBDeleteBackupRecordResponse) GetBackupRecord() *DBBackupRecordDTO {
	if x != nil {
		return x.BackupRecord
	}
	return nil
}

type DBListBackupRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string     `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	StartTime int64      `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   int64      `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Page      *DBPageDTO `protobuf:"bytes,4,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *DBListBackupRecordsRequest) Reset() {
	*x = DBListBackupRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBListBackupRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBListBackupRecordsRequest) ProtoMessage() {}

func (x *DBListBackupRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBListBackupRecordsRequest.ProtoReflect.Descriptor instead.
func (*DBListBackupRecordsRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{30}
}

func (x *DBListBackupRecordsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DBListBackupRecordsRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DBListBackupRecordsRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DBListBackupRecordsRequest) GetPage() *DBPageDTO {
	if x != nil {
		return x.Page
	}
	return nil
}

type DBDBBackupRecordDisplayDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupRecord *DBBackupRecordDTO `protobuf:"bytes,1,opt,name=backupRecord,proto3" json:"backupRecord,omitempty"`
	Flow         *DBFlowDTO         `protobuf:"bytes,2,opt,name=flow,proto3" json:"flow,omitempty"`
}

func (x *DBDBBackupRecordDisplayDTO) Reset() {
	*x = DBDBBackupRecordDisplayDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBDBBackupRecordDisplayDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBDBBackupRecordDisplayDTO) ProtoMessage() {}

func (x *DBDBBackupRecordDisplayDTO) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBDBBackupRecordDisplayDTO.ProtoReflect.Descriptor instead.
func (*DBDBBackupRecordDisplayDTO) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{31}
}

func (x *DBDBBackupRecordDisplayDTO) GetBackupRecord() *DBBackupRecordDTO {
	if x != nil {
		return x.BackupRecord
	}
	return nil
}

func (x *DBDBBackupRecordDisplayDTO) GetFlow() *DBFlowDTO {
	if x != nil {
		return x.Flow
	}
	return nil
}

type DBListBackupRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *DBClusterResponseStatus      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BackupRecords []*DBDBBackupRecordDisplayDTO `protobuf:"bytes,2,rep,name=backupRecords,proto3" json:"backupRecords,omitempty"`
	Page          *DBPageDTO                    `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *DBListBackupRecordsResponse) Reset() {
	*x = DBListBackupRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBListBackupRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBListBackupRecordsResponse) ProtoMessage() {}

func (x *DBListBackupRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBListBackupRecordsResponse.ProtoReflect.Descriptor instead.
func (*DBListBackupRecordsResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{32}
}

func (x *DBListBackupRecordsResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DBListBackupRecordsResponse) GetBackupRecords() []*DBDBBackupRecordDisplayDTO {
	if x != nil {
		return x.BackupRecords
	}
	return nil
}

func (x *DBListBackupRecordsResponse) GetPage() *DBPageDTO {
	if x != nil {
		return x.Page
	}
	return nil
}

type DBQueryBackupRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	RecordId  int64  `protobuf:"varint,2,opt,name=recordId,proto3" json:"recordId,omitempty"`
}

func (x *DBQueryBackupRecordRequest) Reset() {
	*x = DBQueryBackupRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBQueryBackupRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBQueryBackupRecordRequest) ProtoMessage() {}

func (x *DBQueryBackupRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBQueryBackupRecordRequest.ProtoReflect.Descriptor instead.
func (*DBQueryBackupRecordRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{33}
}

func (x *DBQueryBackupRecordRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DBQueryBackupRecordRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

type DBQueryBackupRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *DBClusterResponseStatus    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BackupRecords *DBDBBackupRecordDisplayDTO `protobuf:"bytes,2,opt,name=backupRecords,proto3" json:"backupRecords,omitempty"`
}

func (x *DBQueryBackupRecordResponse) Reset() {
	*x = DBQueryBackupRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBQueryBackupRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBQueryBackupRecordResponse) ProtoMessage() {}

func (x *DBQueryBackupRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBQueryBackupRecordResponse.ProtoReflect.Descriptor instead.
func (*DBQueryBackupRecordResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{34}
}

func (x *DBQueryBackupRecordResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DBQueryBackupRecordResponse) GetBackupRecords() *DBDBBackupRecordDisplayDTO {
	if x != nil {
		return x.BackupRecords
	}
	return nil
}

type DBRecoverRecordDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	ClusterId      string `protobuf:"bytes,3,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	CreateTime     int64  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	OperatorId     string `protobuf:"bytes,5,opt,name=operatorId,proto3" json:"operatorId,omitempty"`
	BackupRecordId int64  `protobuf:"varint,6,opt,name=backupRecordId,proto3" json:"backupRecordId,omitempty"`
	FlowId         int64  `protobuf:"varint,7,opt,name=flowId,proto3" json:"flowId,omitempty"`
}

func (x *DBRecoverRecordDTO) Reset() {
	*x = DBRecoverRecordDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBRecoverRecordDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRecoverRecordDTO) ProtoMessage() {}

func (x *DBRecoverRecordDTO) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBRecoverRecordDTO.ProtoReflect.Descriptor instead.
func (*DBRecoverRecordDTO) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{35}
}

func (x *DBRecoverRecordDTO) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DBRecoverRecordDTO) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DBRecoverRecordDTO) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DBRecoverRecordDTO) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DBRecoverRecordDTO) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *DBRecoverRecordDTO) GetBackupRecordId() int64 {
	if x != nil {
		return x.BackupRecordId
	}
	return 0
}

func (x *DBRecoverRecordDTO) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

type DBSaveRecoverRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecoverRecord *DBRecoverRecordDTO `protobuf:"bytes,1,opt,name=recoverRecord,proto3" json:"recoverRecord,omitempty"`
}

func (x *DBSaveRecoverRecordRequest) Reset() {
	*x = DBSaveRecoverRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBSaveRecoverRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBSaveRecoverRecordRequest) ProtoMessage() {}

func (x *DBSaveRecoverRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBSaveRecoverRecordRequest.ProtoReflect.Descriptor instead.
func (*DBSaveRecoverRecordRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{36}
}

func (x *DBSaveRecoverRecordRequest) GetRecoverRecord() *DBRecoverRecordDTO {
	if x != nil {
		return x.RecoverRecord
	}
	return nil
}

type DBSaveRecoverRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *DBClusterResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RecoverRecord *DBRecoverRecordDTO      `protobuf:"bytes,2,opt,name=recoverRecord,proto3" json:"recoverRecord,omitempty"`
}

func (x *DBSaveRecoverRecordResponse) Reset() {
	*x = DBSaveRecoverRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBSaveRecoverRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBSaveRecoverRecordResponse) ProtoMessage() {}

func (x *DBSaveRecoverRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBSaveRecoverRecordResponse.ProtoReflect.Descriptor instead.
func (*DBSaveRecoverRecordResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{37}
}

func (x *DBSaveRecoverRecordResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DBSaveRecoverRecordResponse) GetRecoverRecord() *DBRecoverRecordDTO {
	if x != nil {
		return x.RecoverRecord
	}
	return nil
}

type DBBackupStrategyDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TenantId    string `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	ClusterId   string `protobuf:"bytes,3,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	BackupDate  string `protobuf:"bytes,4,opt,name=backupDate,proto3" json:"backupDate,omitempty"`
	FilePath    string `protobuf:"bytes,5,opt,name=filePath,proto3" json:"filePath,omitempty"`
	BackupRange string `protobuf:"bytes,6,opt,name=backupRange,proto3" json:"backupRange,omitempty"`
	BackupType  string `protobuf:"bytes,7,opt,name=backupType,proto3" json:"backupType,omitempty"`
	Period      string `protobuf:"bytes,8,opt,name=period,proto3" json:"period,omitempty"`
	CreateTime  int64  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  int64  `protobuf:"varint,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *DBBackupStrategyDTO) Reset() {
	*x = DBBackupStrategyDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBBackupStrategyDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBBackupStrategyDTO) ProtoMessage() {}

func (x *DBBackupStrategyDTO) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBBackupStrategyDTO.ProtoReflect.Descriptor instead.
func (*DBBackupStrategyDTO) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{38}
}

func (x *DBBackupStrategyDTO) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DBBackupStrategyDTO) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DBBackupStrategyDTO) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DBBackupStrategyDTO) GetBackupDate() string {
	if x != nil {
		return x.BackupDate
	}
	return ""
}

func (x *DBBackupStrategyDTO) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *DBBackupStrategyDTO) GetBackupRange() string {
	if x != nil {
		return x.BackupRange
	}
	return ""
}

func (x *DBBackupStrategyDTO) GetBackupType() string {
	if x != nil {
		return x.BackupType
	}
	return ""
}

func (x *DBBackupStrategyDTO) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *DBBackupStrategyDTO) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DBBackupStrategyDTO) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type DBSaveBackupStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy *DBBackupStrategyDTO `protobuf:"bytes,1,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *DBSaveBackupStrategyRequest) Reset() {
	*x = DBSaveBackupStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBSaveBackupStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBSaveBackupStrategyRequest) ProtoMessage() {}

func (x *DBSaveBackupStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBSaveBackupStrategyRequest.ProtoReflect.Descriptor instead.
func (*DBSaveBackupStrategyRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{39}
}

func (x *DBSaveBackupStrategyRequest) GetStrategy() *DBBackupStrategyDTO {
	if x != nil {
		return x.Strategy
	}
	return nil
}

type DBSaveBackupStrategyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *DBClusterResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Strategy *DBBackupStrategyDTO     `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *DBSaveBackupStrategyResponse) Reset() {
	*x = DBSaveBackupStrategyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBSaveBackupStrategyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBSaveBackupStrategyResponse) ProtoMessage() {}

func (x *DBSaveBackupStrategyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBSaveBackupStrategyResponse.ProtoReflect.Descriptor instead.
func (*DBSaveBackupStrategyResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{40}
}

func (x *DBSaveBackupStrategyResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DBSaveBackupStrategyResponse) GetStrategy() *DBBackupStrategyDTO {
	if x != nil {
		return x.Strategy
	}
	return nil
}

type DBQueryBackupStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *DBQueryBackupStrategyRequest) Reset() {
	*x = DBQueryBackupStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBQueryBackupStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBQueryBackupStrategyRequest) ProtoMessage() {}

func (x *DBQueryBackupStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBQueryBackupStrategyRequest.ProtoReflect.Descriptor instead.
func (*DBQueryBackupStrategyRequest) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{41}
}

func (x *DBQueryBackupStrategyRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DBQueryBackupStrategyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *DBClusterResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Strategy *DBBackupStrategyDTO     `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *DBQueryBackupStrategyResponse) Reset() {
	*x = DBQueryBackupStrategyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_cluster_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBQueryBackupStrategyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBQueryBackupStrategyResponse) ProtoMessage() {}

func (x *DBQueryBackupStrategyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_cluster_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBQueryBackupStrategyResponse.ProtoReflect.Descriptor instead.
func (*DBQueryBackupStrategyResponse) Descriptor() ([]byte, []int) {
	return file_db_cluster_proto_rawDescGZIP(), []int{42}
}

func (x *DBQueryBackupStrategyResponse) GetStatus() *DBClusterResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DBQueryBackupStrategyResponse) GetStrategy() *DBBackupStrategyDTO {
	if x != nil {
		return x.Strategy
	}
	return nil
}

var File_db_cluster_proto protoreflect.FileDescriptor

var file_db_cluster_proto_rawDesc = []byte{
	0x0a, 0x10, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0d, 0x64, 0x62, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x47, 0x0a, 0x17, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb8, 0x03, 0x0a, 0x0c, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x62, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x62, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x6c,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x44, 0x42, 0x54, 0x69, 0x55, 0x50,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x41, 0x0a,
	0x16, 0x44, 0x42, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x22, 0x74, 0x0a, 0x17, 0x44, 0x42, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x14, 0x44, 0x42, 0x4c, 0x6f, 0x61, 0x64,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a,
	0x15, 0x44, 0x42, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x44, 0x54, 0x4f, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0x5e, 0x0a, 0x13, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x42, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x54, 0x4f, 0x52, 0x04, 0x66,
	0x6c, 0x6f, 0x77, 0x22, 0x9b, 0x01, 0x0a, 0x12, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x54, 0x4f, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x10, 0x74, 0x69, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x44, 0x42, 0x54, 0x69, 0x55, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x54, 0x4f, 0x52,
	0x10, 0x74, 0x69, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x1e, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x44, 0x42, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x54, 0x4f, 0x52, 0x04, 0x66, 0x6c, 0x6f,
	0x77, 0x22, 0xe4, 0x01, 0x0a, 0x14, 0x44, 0x42, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x42,
	0x50, 0x61, 0x67, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x44, 0x42, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x42, 0x50, 0x61, 0x67, 0x65, 0x44, 0x54, 0x4f, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x36, 0x0a, 0x16, 0x44, 0x42, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x74, 0x0a,
	0x17, 0x44, 0x42, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x22, 0xb0, 0x01, 0x0a, 0x1c, 0x44, 0x42, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x22, 0x7a, 0x0a, 0x1d, 0x44, 0x42, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x22, 0x6f, 0x0a, 0x19, 0x44, 0x42, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x1a, 0x44, 0x42, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x54, 0x4f, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x10, 0x74, 0x69, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x44, 0x42, 0x54, 0x69, 0x55, 0x50,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x54, 0x4f, 0x52, 0x10, 0x74, 0x69, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x51, 0x0a, 0x09, 0x44,
	0x42, 0x50, 0x61, 0x67, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xd2,
	0x01, 0x0a, 0x14, 0x44, 0x42, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x17, 0x44, 0x42, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x42, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x18, 0x44, 0x42, 0x53, 0x61, 0x76, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x42, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x3d, 0x0a, 0x1d, 0x44,
	0x42, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1e, 0x44,
	0x42, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x35, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x42, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xdf, 0x02, 0x0a, 0x11, 0x44, 0x42, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x53, 0x0a, 0x19, 0x44, 0x42, 0x53, 0x61,
	0x76, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x42,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f, 0x52,
	0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x86, 0x01,
	0x0a, 0x1a, 0x44, 0x42, 0x53, 0x61, 0x76, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36,
	0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x42, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x55, 0x0a, 0x1b, 0x44, 0x42, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x42,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f, 0x52,
	0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x50, 0x0a,
	0x1c, 0x44, 0x42, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x2d, 0x0a, 0x1b, 0x44, 0x42, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x88,
	0x01, 0x0a, 0x1c, 0x44, 0x42, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x36, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x42, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f, 0x52, 0x0c, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x1a, 0x44, 0x42,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44,
	0x42, 0x50, 0x61, 0x67, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x74,
	0x0a, 0x1a, 0x44, 0x42, 0x44, 0x42, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x36, 0x0a, 0x0c,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x42, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x42, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x54, 0x4f, 0x52, 0x04,
	0x66, 0x6c, 0x6f, 0x77, 0x22, 0xb2, 0x01, 0x0a, 0x1b, 0x44, 0x42, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x44, 0x42, 0x44, 0x42, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x42, 0x50, 0x61, 0x67, 0x65,
	0x44, 0x54, 0x4f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x1a, 0x44, 0x42, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x22, 0x92, 0x01, 0x0a, 0x1b, 0x44, 0x42, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x44, 0x42, 0x44,
	0x42, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x12, 0x44, 0x42, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1a, 0x44, 0x42, 0x53, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44,
	0x42, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x54,
	0x4f, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x22, 0x8a, 0x01, 0x0a, 0x1b, 0x44, 0x42, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44, 0x42, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xb5, 0x02,
	0x0a, 0x13, 0x44, 0x42, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x1b, 0x44, 0x42, 0x53, 0x61, 0x76, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x44, 0x42, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x1c, 0x44, 0x42, 0x53, 0x61, 0x76,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x44, 0x42,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x54,
	0x4f, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x3c, 0x0a, 0x1c, 0x44,
	0x42, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1d, 0x44, 0x42,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a,
	0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x44, 0x42, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42,
	0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x64, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_db_cluster_proto_rawDescOnce sync.Once
	file_db_cluster_proto_rawDescData = file_db_cluster_proto_rawDesc
)

func file_db_cluster_proto_rawDescGZIP() []byte {
	file_db_cluster_proto_rawDescOnce.Do(func() {
		file_db_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_db_cluster_proto_rawDescData)
	})
	return file_db_cluster_proto_rawDescData
}

var file_db_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_db_cluster_proto_goTypes = []interface{}{
	(*DBClusterResponseStatus)(nil),        // 0: DBClusterResponseStatus
	(*DBClusterDTO)(nil),                   // 1: DBClusterDTO
	(*DBTiUPConfigDTO)(nil),                // 2: DBTiUPConfigDTO
	(*DBCreateClusterRequest)(nil),         // 3: DBCreateClusterRequest
	(*DBCreateClusterResponse)(nil),        // 4: DBCreateClusterResponse
	(*DBLoadClusterRequest)(nil),           // 5: DBLoadClusterRequest
	(*DBLoadClusterResponse)(nil),          // 6: DBLoadClusterResponse
	(*DBClusterDisplayDTO)(nil),            // 7: DBClusterDisplayDTO
	(*DBClusterDetailDTO)(nil),             // 8: DBClusterDetailDTO
	(*DBListClusterRequest)(nil),           // 9: DBListClusterRequest
	(*DBListClusterResponse)(nil),          // 10: DBListClusterResponse
	(*DBDeleteClusterRequest)(nil),         // 11: DBDeleteClusterRequest
	(*DBDeleteClusterResponse)(nil),        // 12: DBDeleteClusterResponse
	(*DBUpdateClusterStatusRequest)(nil),   // 13: DBUpdateClusterStatusRequest
	(*DBUpdateClusterStatusResponse)(nil),  // 14: DBUpdateClusterStatusResponse
	(*DBUpdateTiupConfigRequest)(nil),      // 15: DBUpdateTiupConfigRequest
	(*DBUpdateTiupConfigResponse)(nil),     // 16: DBUpdateTiupConfigResponse
	(*DBPageDTO)(nil),                      // 17: DBPageDTO
	(*DBParameterRecordDTO)(nil),           // 18: DBParameterRecordDTO
	(*DBSaveParametersRequest)(nil),        // 19: DBSaveParametersRequest
	(*DBSaveParametersResponse)(nil),       // 20: DBSaveParametersResponse
	(*DBGetCurrentParametersRequest)(nil),  // 21: DBGetCurrentParametersRequest
	(*DBGetCurrentParametersResponse)(nil), // 22: DBGetCurrentParametersResponse
	(*DBBackupRecordDTO)(nil),              // 23: DBBackupRecordDTO
	(*DBSaveBackupRecordRequest)(nil),      // 24: DBSaveBackupRecordRequest
	(*DBSaveBackupRecordResponse)(nil),     // 25: DBSaveBackupRecordResponse
	(*DBUpdateBackupRecordRequest)(nil),    // 26: DBUpdateBackupRecordRequest
	(*DBUpdateBackupRecordResponse)(nil),   // 27: DBUpdateBackupRecordResponse
	(*DBDeleteBackupRecordRequest)(nil),    // 28: DBDeleteBackupRecordRequest
	(*DBDeleteBackupRecordResponse)(nil),   // 29: DBDeleteBackupRecordResponse
	(*DBListBackupRecordsRequest)(nil),     // 30: DBListBackupRecordsRequest
	(*DBDBBackupRecordDisplayDTO)(nil),     // 31: DBDBBackupRecordDisplayDTO
	(*DBListBackupRecordsResponse)(nil),    // 32: DBListBackupRecordsResponse
	(*DBQueryBackupRecordRequest)(nil),     // 33: DBQueryBackupRecordRequest
	(*DBQueryBackupRecordResponse)(nil),    // 34: DBQueryBackupRecordResponse
	(*DBRecoverRecordDTO)(nil),             // 35: DBRecoverRecordDTO
	(*DBSaveRecoverRecordRequest)(nil),     // 36: DBSaveRecoverRecordRequest
	(*DBSaveRecoverRecordResponse)(nil),    // 37: DBSaveRecoverRecordResponse
	(*DBBackupStrategyDTO)(nil),            // 38: DBBackupStrategyDTO
	(*DBSaveBackupStrategyRequest)(nil),    // 39: DBSaveBackupStrategyRequest
	(*DBSaveBackupStrategyResponse)(nil),   // 40: DBSaveBackupStrategyResponse
	(*DBQueryBackupStrategyRequest)(nil),   // 41: DBQueryBackupStrategyRequest
	(*DBQueryBackupStrategyResponse)(nil),  // 42: DBQueryBackupStrategyResponse
	(*DBFlowDTO)(nil),                      // 43: DBFlowDTO
}
var file_db_cluster_proto_depIdxs = []int32{
	1,  // 0: DBCreateClusterRequest.cluster:type_name -> DBClusterDTO
	0,  // 1: DBCreateClusterResponse.status:type_name -> DBClusterResponseStatus
	1,  // 2: DBCreateClusterResponse.cluster:type_name -> DBClusterDTO
	0,  // 3: DBLoadClusterResponse.status:type_name -> DBClusterResponseStatus
	8,  // 4: DBLoadClusterResponse.clusterDetail:type_name -> DBClusterDetailDTO
	1,  // 5: DBClusterDisplayDTO.cluster:type_name -> DBClusterDTO
	43, // 6: DBClusterDisplayDTO.flow:type_name -> DBFlowDTO
	1,  // 7: DBClusterDetailDTO.cluster:type_name -> DBClusterDTO
	2,  // 8: DBClusterDetailDTO.tiupConfigRecord:type_name -> DBTiUPConfigDTO
	43, // 9: DBClusterDetailDTO.flow:type_name -> DBFlowDTO
	17, // 10: DBListClusterRequest.pageReq:type_name -> DBPageDTO
	0,  // 11: DBListClusterResponse.status:type_name -> DBClusterResponseStatus
	8,  // 12: DBListClusterResponse.clusters:type_name -> DBClusterDetailDTO
	17, // 13: DBListClusterResponse.page:type_name -> DBPageDTO
	0,  // 14: DBDeleteClusterResponse.status:type_name -> DBClusterResponseStatus
	1,  // 15: DBDeleteClusterResponse.cluster:type_name -> DBClusterDTO
	0,  // 16: DBUpdateClusterStatusResponse.status:type_name -> DBClusterResponseStatus
	1,  // 17: DBUpdateClusterStatusResponse.cluster:type_name -> DBClusterDTO
	0,  // 18: DBUpdateTiupConfigResponse.status:type_name -> DBClusterResponseStatus
	1,  // 19: DBUpdateTiupConfigResponse.cluster:type_name -> DBClusterDTO
	2,  // 20: DBUpdateTiupConfigResponse.tiupConfigRecord:type_name -> DBTiUPConfigDTO
	18, // 21: DBSaveParametersRequest.parameters:type_name -> DBParameterRecordDTO
	0,  // 22: DBSaveParametersResponse.status:type_name -> DBClusterResponseStatus
	18, // 23: DBSaveParametersResponse.parameters:type_name -> DBParameterRecordDTO
	0,  // 24: DBGetCurrentParametersResponse.status:type_name -> DBClusterResponseStatus
	18, // 25: DBGetCurrentParametersResponse.parameters:type_name -> DBParameterRecordDTO
	23, // 26: DBSaveBackupRecordRequest.backupRecord:type_name -> DBBackupRecordDTO
	0,  // 27: DBSaveBackupRecordResponse.status:type_name -> DBClusterResponseStatus
	23, // 28: DBSaveBackupRecordResponse.backupRecord:type_name -> DBBackupRecordDTO
	23, // 29: DBUpdateBackupRecordRequest.backupRecord:type_name -> DBBackupRecordDTO
	0,  // 30: DBUpdateBackupRecordResponse.status:type_name -> DBClusterResponseStatus
	0,  // 31: DBDeleteBackupRecordResponse.status:type_name -> DBClusterResponseStatus
	23, // 32: DBDeleteBackupRecordResponse.backupRecord:type_name -> DBBackupRecordDTO
	17, // 33: DBListBackupRecordsRequest.page:type_name -> DBPageDTO
	23, // 34: DBDBBackupRecordDisplayDTO.backupRecord:type_name -> DBBackupRecordDTO
	43, // 35: DBDBBackupRecordDisplayDTO.flow:type_name -> DBFlowDTO
	0,  // 36: DBListBackupRecordsResponse.status:type_name -> DBClusterResponseStatus
	31, // 37: DBListBackupRecordsResponse.backupRecords:type_name -> DBDBBackupRecordDisplayDTO
	17, // 38: DBListBackupRecordsResponse.page:type_name -> DBPageDTO
	0,  // 39: DBQueryBackupRecordResponse.status:type_name -> DBClusterResponseStatus
	31, // 40: DBQueryBackupRecordResponse.backupRecords:type_name -> DBDBBackupRecordDisplayDTO
	35, // 41: DBSaveRecoverRecordRequest.recoverRecord:type_name -> DBRecoverRecordDTO
	0,  // 42: DBSaveRecoverRecordResponse.status:type_name -> DBClusterResponseStatus
	35, // 43: DBSaveRecoverRecordResponse.recoverRecord:type_name -> DBRecoverRecordDTO
	38, // 44: DBSaveBackupStrategyRequest.strategy:type_name -> DBBackupStrategyDTO
	0,  // 45: DBSaveBackupStrategyResponse.status:type_name -> DBClusterResponseStatus
	38, // 46: DBSaveBackupStrategyResponse.strategy:type_name -> DBBackupStrategyDTO
	0,  // 47: DBQueryBackupStrategyResponse.status:type_name -> DBClusterResponseStatus
	38, // 48: DBQueryBackupStrategyResponse.strategy:type_name -> DBBackupStrategyDTO
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_db_cluster_proto_init() }
func file_db_cluster_proto_init() {
	if File_db_cluster_proto != nil {
		return
	}
	file_db_task_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_db_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBClusterResponseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBClusterDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBTiUPConfigDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBCreateClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBCreateClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBLoadClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBLoadClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBClusterDisplayDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBClusterDetailDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBListClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBListClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBDeleteClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBDeleteClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBUpdateClusterStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBUpdateClusterStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBUpdateTiupConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBUpdateTiupConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBPageDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBParameterRecordDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBSaveParametersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBSaveParametersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBGetCurrentParametersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBGetCurrentParametersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBBackupRecordDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBSaveBackupRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBSaveBackupRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBUpdateBackupRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBUpdateBackupRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBDeleteBackupRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBDeleteBackupRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBListBackupRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBDBBackupRecordDisplayDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBListBackupRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBQueryBackupRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBQueryBackupRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBRecoverRecordDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBSaveRecoverRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBSaveRecoverRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBBackupStrategyDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBSaveBackupStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBSaveBackupStrategyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBQueryBackupStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_cluster_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBQueryBackupStrategyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_db_cluster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_db_cluster_proto_goTypes,
		DependencyIndexes: file_db_cluster_proto_depIdxs,
		MessageInfos:      file_db_cluster_proto_msgTypes,
	}.Build()
	File_db_cluster_proto = out.File
	file_db_cluster_proto_rawDesc = nil
	file_db_cluster_proto_goTypes = nil
	file_db_cluster_proto_depIdxs = nil
}
