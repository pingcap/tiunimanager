syntax = "proto3";
option go_package = "./clusterservices/;clusterservices";

service ClusterService {
    // Cluster manager module

    rpc CreateCluster(RpcRequest) returns (RpcResponse);
    rpc QueryCluster(RpcRequest) returns (RpcResponse);
    rpc DeleteCluster(RpcRequest) returns (RpcResponse);
    rpc DetailCluster(RpcRequest) returns (RpcResponse);
    rpc RestartCluster(RpcRequest) returns (RpcResponse);
    rpc StopCluster(RpcRequest) returns (RpcResponse);
    rpc TakeoverClusters(RpcRequest) returns (RpcResponse);
    rpc ScaleOutCluster(RpcRequest) returns (RpcResponse);
    rpc ScaleInCluster(RpcRequest) returns (RpcResponse);
    rpc CloneCluster(RpcRequest) returns (RpcResponse);

    rpc DeleteMetadataPhysically(RpcRequest) returns (RpcResponse);

    rpc PreviewCluster(RpcRequest) returns (RpcResponse);
    rpc PreviewScaleOutCluster(RpcRequest) returns (RpcResponse);

    rpc ImportData(RpcRequest) returns (RpcResponse);
    rpc ExportData(RpcRequest) returns (RpcResponse);
    rpc QueryDataTransport(RpcRequest) returns (RpcResponse);
    rpc DeleteDataTransportRecord(RpcRequest) returns (RpcResponse);

    rpc QueryClusterLog(RpcRequest) returns (RpcResponse);

    // Backup && Restore
    rpc QueryBackupRecords(RpcRequest) returns (RpcResponse);
    rpc CreateBackup(RpcRequest) returns (RpcResponse);
    rpc RestoreNewCluster(RpcRequest) returns (RpcResponse);
    rpc DeleteBackupRecords(RpcRequest) returns (RpcResponse);
    rpc SaveBackupStrategy(RpcRequest) returns (RpcResponse);
    rpc GetBackupStrategy(RpcRequest) returns (RpcResponse);
    rpc CancelBackup(RpcRequest) returns (RpcResponse);

    rpc GetDashboardInfo(RpcRequest) returns (RpcResponse);
    rpc GetMonitorInfo(RpcRequest) returns (RpcResponse);

    // Auth manager module
    rpc Login(RpcRequest) returns (RpcResponse);
    rpc Logout(RpcRequest) returns (RpcResponse);
    rpc VerifyIdentity(RpcRequest) returns (RpcResponse);

    // Rbac
    rpc BindRolesForUser(RpcRequest) returns (RpcResponse);
    rpc QueryRoles(RpcRequest) returns (RpcResponse);
    rpc CreateRbacRole(RpcRequest) returns (RpcResponse);
    rpc DeleteRbacRole(RpcRequest) returns (RpcResponse);
    rpc UnbindRoleForUser(RpcRequest) returns (RpcResponse);
    rpc AddPermissionsForRole(RpcRequest) returns (RpcResponse);
    rpc DeletePermissionsForRole(RpcRequest) returns (RpcResponse);
    rpc QueryPermissionsForUser(RpcRequest) returns (RpcResponse);
    rpc CheckPermissionForUser(RpcRequest) returns (RpcResponse);

    // resource manager module
    rpc ImportHosts(RpcRequest) returns (RpcResponse);
    rpc DeleteHosts(RpcRequest) returns (RpcResponse);
    rpc QueryHosts(RpcRequest) returns (RpcResponse);
    rpc UpdateHostReserved(RpcRequest) returns (RpcResponse);
    rpc UpdateHostStatus(RpcRequest) returns (RpcResponse);
    rpc GetHierarchy(RpcRequest) returns (RpcResponse);
    rpc GetStocks(RpcRequest) returns (RpcResponse);
    rpc UpdateHostInfo(RpcRequest) returns (RpcResponse);
    rpc CreateDisks(RpcRequest) returns (RpcResponse);
    rpc DeleteDisks(RpcRequest) returns (RpcResponse);
    rpc UpdateDisk(RpcRequest) returns (RpcResponse);

    // workflow
    rpc ListFlows(RpcRequest) returns (RpcResponse);
    rpc DetailFlow(RpcRequest) returns (RpcResponse);
    rpc StartFlow(RpcRequest) returns (RpcResponse);
    rpc StopFlow(RpcRequest) returns (RpcResponse);

    // Parameter Group & Cluster Parameters
    rpc CreateParameterGroup(RpcRequest) returns (RpcResponse);
    rpc UpdateParameterGroup(RpcRequest) returns (RpcResponse);
    rpc DeleteParameterGroup(RpcRequest) returns (RpcResponse);
    rpc QueryParameterGroup(RpcRequest) returns (RpcResponse);
    rpc DetailParameterGroup(RpcRequest) returns (RpcResponse);
    rpc ApplyParameterGroup(RpcRequest) returns (RpcResponse);
    rpc CopyParameterGroup(RpcRequest) returns (RpcResponse);
    rpc QueryClusterParameters(RpcRequest) returns (RpcResponse);
    rpc UpdateClusterParameters(RpcRequest) returns (RpcResponse);
    rpc InspectClusterParameters(RpcRequest) returns (RpcResponse);

    // change feed task
    rpc CreateChangeFeedTask(RpcRequest) returns (RpcResponse);
    rpc PauseChangeFeedTask(RpcRequest) returns (RpcResponse);
    rpc ResumeChangeFeedTask(RpcRequest) returns (RpcResponse);
    rpc DeleteChangeFeedTask(RpcRequest) returns (RpcResponse);
    rpc UpdateChangeFeedTask(RpcRequest) returns (RpcResponse);
    rpc QueryChangeFeedTasks(RpcRequest) returns (RpcResponse);
    rpc DetailChangeFeedTask(RpcRequest) returns (RpcResponse);

    // upgrade
    rpc QueryProductUpgradePath(RpcRequest) returns (RpcResponse);
    rpc QueryUpgradeVersionDiffInfo(RpcRequest) returns (RpcResponse);
    rpc UpgradeCluster(RpcRequest) returns (RpcResponse);

    // switchover
    rpc MasterSlaveSwitchover(RpcRequest) returns (RpcResponse);

    // system config
    rpc GetSystemConfig(RpcRequest) returns (RpcResponse);
    rpc GetSystemInfo(RpcRequest) returns (RpcResponse);
    rpc UpdateSystemConfig(RpcRequest) returns (RpcResponse);

    //product & spec
    rpc UpdateVendors(RpcRequest) returns (RpcResponse);
    rpc QueryVendors(RpcRequest) returns (RpcResponse);
    rpc QueryAvailableVendors(RpcRequest) returns (RpcResponse);

    rpc UpdateProducts(RpcRequest) returns (RpcResponse);
    rpc QueryProducts(RpcRequest) returns (RpcResponse);
    rpc QueryAvailableProducts(RpcRequest) returns (RpcResponse);
    rpc QueryProductDetail(RpcRequest) returns (RpcResponse);

    //user & tenant
    rpc CreateUser(RpcRequest) returns (RpcResponse);
    rpc DeleteUser(RpcRequest) returns (RpcResponse);
    rpc GetUser(RpcRequest) returns (RpcResponse);
    rpc QueryUsers(RpcRequest) returns (RpcResponse);
    rpc UpdateUserProfile(RpcRequest) returns (RpcResponse);
    rpc UpdateUserPassword(RpcRequest) returns (RpcResponse);
    rpc CreateTenant(RpcRequest) returns (RpcResponse);
    rpc DeleteTenant(RpcRequest) returns (RpcResponse);
    rpc GetTenant(RpcRequest) returns (RpcResponse);
    rpc QueryTenants(RpcRequest) returns (RpcResponse);
    rpc UpdateTenantOnBoardingStatus(RpcRequest) returns (RpcResponse);
    rpc UpdateTenantProfile(RpcRequest) returns (RpcResponse);

    // platform
    rpc CheckPlatform(RpcRequest) returns(RpcResponse);
    rpc CheckCluster(RpcRequest) returns(RpcResponse);
    rpc QueryCheckReports(RpcRequest) returns(RpcResponse);
    rpc GetCheckReport(RpcRequest) returns(RpcResponse);
    rpc QueryPlatformLog(RpcRequest) returns(RpcResponse);
}

message RpcRequest {
    string request = 1;
}

message RpcResponse {
    int32 code = 1;
    string message = 2;
    string response = 3;
    RpcPage page = 4;
}

message RpcPage {
    int32 page = 1;
    int32 pageSize = 2;
    int32 total = 3;
}


